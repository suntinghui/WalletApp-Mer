(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\r\n                    * Create a cached version of a pure function.\r\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\r\n   * Camelize a hyphen-delimited string.\r\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name) && name !== 'onPush';\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'onTabBarMidButtonTap',\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = webview.__uniapp_mask_id === '0' ? {\n    setStyle: function setStyle(_ref2)\n\n    {var mask = _ref2.mask;\n      requireNativePlugin('uni-tabview').setMask({\n        color: mask });\n\n    } } :\n  plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\n\n\nvar api = /*#__PURE__*/Object.freeze({\n  getSubNVueById: getSubNVueById,\n  requireNativePlugin: requireNativePlugin });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *'test'\r\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          if (methodName === '$emit') {\n            handlerCtx.$emit.apply(handlerCtx,\n            processEventArgs(\n            _this.$vm,\n            event,\n            eventArray[1],\n            eventArray[2],\n            isCustom,\n            methodName));\n\n            return;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref3)\n\n\n{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n      // vm 上也挂载 globalData\n      this.$vm.globalData = this.globalData;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n  // 将 methods 中的方法挂在 getApp() 中\n  var methods = vm.$options.methods;\n  if (methods) {\n    Object.keys(methods).forEach(function (name) {\n      appOptions[name] = methods[name];\n    });\n  }\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属\n  var parentVm = $children.find(function (childVm) {return childVm.$scope._$vueId === vuePid;});\n  if (parentVm) {\n    return parentVm;\n  }\n  // 反向递归查找\n  for (var i = $children.length - 1; i >= 0; i--) {\n    parentVm = findVmByVueId($children[i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref4 =\n\n\n\n  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var options = {\n    multipleSlots: true,\n    addGlobalClass: true };\n\n\n  var componentOptions = {\n    options: options,\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref6)\n\n\n{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 108:
/*!**********************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/common/otp.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var CryptoJS = __webpack_require__(/*! ./crypto-js-sha1.js */ 109); // 需要CryptoJS\n\n// ==================================================================================\nvar HOTP = function HOTP(secret, window, counter) {\n  this.secret = secret || \"123456\";\n  this.window = window || 3;\n  this.counter = counter || 0;\n  return this;\n};\n\nHOTP.prototype.gen = function (counter) {\n  if (counter === null) {\n    if (this.counter === null) {\n      this.counter = 0;\n    }\n    counter = this.counter;\n    var ret = this.gen(counter);\n    this.counter += 1;\n    return ret;\n  }\n\n  var num = this.otp_gen_number(counter, this.secret);\n  num = num % 100000;\n  if (num >= 10000) {\n    return String(num);\n  }\n  num = \"00000\" + num;\n  return num.substring(num.length - 5);\n};\n\nHOTP.prototype.verify = function (token, counter) {\n  if (counter === undefined) {\n    if (this.counter === undefined) {\n      this.counter = 0;\n    }\n    counter = this.counter;\n    return this.verify(token, counter);\n  }\n  for (var i = 0; i < this.window; i++) {\n    {\n      var tcounter = counter - i;\n      if (token === this.gen(tcounter))\n      return i;\n    }\n    if (i === 0)\n    continue;{\n      var tcounter = counter + i;\n      if (token === this.gen(tcounter))\n      return i;\n    }\n  }\n  return null;\n};\n\n// 需要使用CryptoJS的HmacSHA1、WordArray，counter是32bit数字\nHOTP.prototype.otp_gen_number = function (counter, secret) {\n  function convert(wordArray) {\n    var bytes20 = [];\n    for (var i = 0, j = 0; i < 5; i++) {\n      var v = wordArray.words[i];\n      bytes20[j++] = v >> 24 & 0xFF;\n      bytes20[j++] = v >> 16 & 0xFF;\n      bytes20[j++] = v >> 8 & 0xFF;\n      bytes20[j++] = v >> 0 & 0xFF;\n    }\n\n    var offset = bytes20[19] & 0xf;\n    var v = (bytes20[offset] & 0x7F) << 24 |\n    (bytes20[offset + 1] & 0xFF) << 16 |\n    (bytes20[offset + 2] & 0xFF) << 8 |\n    bytes20[offset + 3] & 0xFF;\n\n    return v;\n  }\n\n  function _gen_number(counter, secret) {\n    var low = counter & 0xffffffff;\n    var high = Math.floor(counter / 4294967296); // 没有long类型，使用除以2^32代替右移32位\n    // console.log(counter, low, high);\n    var message = CryptoJS.lib.WordArray.create([high, low], 8);\n    var wordArray = CryptoJS.HmacSHA1(message, secret);\n    var num = convert(wordArray);\n    return num;\n  }\n\n  return _gen_number(counter, secret);\n};\n\n// ==================================================================================\nvar TOTP = function TOTP(secret, window, interval) {\n  this.hotp = new HOTP(secret, window, 0);\n  this.interval = interval || 30;\n  return this;\n};\n\nTOTP.prototype.gen = function (timestamp) {\n  timestamp = timestamp || new Date().getTime();\n  var timestamp_second = Math.floor(timestamp / 1000);\n  var tcounter = Math.floor(timestamp_second / this.interval);\n  return this.hotp.gen(tcounter);\n};\n\nTOTP.prototype.gen2 = function (timestamp) {\n  timestamp = timestamp || new Date().getTime();\n  var timestamp_second = Math.floor(timestamp / 1000);\n  var tcounter = Math.floor(timestamp_second / this.interval);\n  var token = this.hotp.gen(tcounter);\n  var step = timestamp_second % this.interval;\n  var refresh_time = tcounter * this.interval;\n  return {\n    token: token, // 生成的令牌\n    loop_length: this.interval, // 循环角度，循环长度\n    loop_step: step, // 循环角度，循环到的步骤\n    refresh_interval: this.interval * 1000, // 刷新周期\n    refresh_time: refresh_time * 1000, // 刷新时间\n    timestamp: timestamp // 当前时间\n  };\n};\n\nTOTP.prototype.verify = function (token) {\n  var now = Math.floor(new Date().getTime() / 1000);\n  var tcounter = Math.floor(now / this.interval);\n  return this.hotp.verify(token, tcounter);\n};\n\nfunction makeCode(token, userId) {\n  var count = 3;\n  var interval = 30;\n  var code_length = 18;\n\n  var otp1 = new TOTP(token, count, interval).gen();\n  var otp2 = new TOTP(otp1, count, interval).gen();\n  var otp3 = new TOTP(otp2, count, interval).gen();\n\n  var lastInt = getLastBitNotZeroInt(otp1);\n  var newId = userId * lastInt;\n  var supplementLength = code_length - (\"\" + newId).length - 2; // code长度-新ID长度-前面两位\n\n  var ret = \"\";\n  ret += supplementLength != 5 ? getRndInteger(1, 9) * 10 + supplementLength % 10 : \"0\" + supplementLength;\n  ret += newId;\n  ret += otp1;\n  ret += otp2;\n  ret += otp3;\n  ret = ret.substr(0, code_length);\n\n  return ret;\n}\n\nfunction getLastBitNotZeroInt(otp) {\n  var otp = otp + '';\n  var arr = otp.split('');\n  for (var index = otp.length - 1; index >= 0; index--) {\n    if (arr[index] != '0') {\n      return arr[index];\n    }\n  }\n\n  return '-1';\n}\n\n// 返回 min（包含）～ max（包含）之间的数字\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nmodule.exports = {\n  HOTP: HOTP,\n  TOTP: TOTP,\n  makeCode: makeCode };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///108\n");

/***/ }),

/***/ 109:
/*!*********************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/common/crypto-js-sha1.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" /**\n              * CryptoJS\n              * http://github.com/brix/crypto-js\n              * 只包含了core、hmac、sha1三块\n              **/\nvar CryptoJS = CryptoJS || function (Math, undefined) {var create = Object.create || function () {function F() {}return function (obj) {var subtype;\n      F.prototype = obj;subtype = new F();F.prototype = null;return subtype;};}();var C = {};var C_lib = C.lib = {};\n  var Base = C_lib.Base = function () {return { extend: function extend(overrides) {var subtype = create(this);\n        if (overrides) {subtype.mixIn(overrides);}if (!subtype.hasOwnProperty(\"init\") || this.init === subtype.init) {subtype.init = function () {subtype.$super.init.apply(this, arguments);\n          };}subtype.init.prototype = subtype;subtype.$super = this;return subtype;}, create: function create() {var instance = this.extend();\n        instance.init.apply(instance, arguments);return instance;}, init: function init() {}, mixIn: function mixIn(properties) {for (var propertyName in properties) {if (properties.hasOwnProperty(propertyName)) {this[propertyName] = properties[propertyName];\n          }}if (properties.hasOwnProperty(\"toString\")) {this.toString = properties.toString;}}, clone: function clone() {return this.init.prototype.extend(this);\n      } };}();var WordArray = C_lib.WordArray = Base.extend({ init: function init(words, sigBytes) {words = this.words = words || [];\n      if (sigBytes != undefined) {this.sigBytes = sigBytes;} else {this.sigBytes = words.length * 4;}}, toString: function toString(encoder) {return (encoder || Hex).stringify(this);\n    }, concat: function concat(wordArray) {var thisWords = this.words;var thatWords = wordArray.words;\n      var thisSigBytes = this.sigBytes;var thatSigBytes = wordArray.sigBytes;this.clamp();if (thisSigBytes % 4) {for (var i = 0;\n        i < thatSigBytes; i++) {var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n        }} else {for (var i = 0; i < thatSigBytes; i += 4) {thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];\n        }}this.sigBytes += thatSigBytes;return this;}, clamp: function clamp() {var words = this.words;\n      var sigBytes = this.sigBytes;words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;words.length = Math.ceil(sigBytes / 4);\n    }, clone: function clone() {var clone = Base.clone.call(this);clone.words = this.words.slice(0);\n      return clone;}, random: function random(nBytes) {var words = [];var r = function r(m_w) {var m_w = m_w;\n        var m_z = 987654321;var mask = 4294967295;return function () {m_z = 36969 * (m_z & 65535) + (m_z >> 16) & mask;\n          m_w = 18000 * (m_w & 65535) + (m_w >> 16) & mask;var result = (m_z << 16) + m_w & mask;result /= 4294967296;\n          result += 0.5;return result * (Math.random() > 0.5 ? 1 : -1);};};for (var i = 0, rcache; i < nBytes;\n      i += 4) {var _r = r((rcache || Math.random()) * 4294967296);rcache = _r() * 987654071;words.push(_r() * 4294967296 | 0);\n      }return new WordArray.init(words, nBytes);} });var C_enc = C.enc = {};var Hex = C_enc.Hex = { stringify: function stringify(wordArray) {var words = wordArray.words;\n      var sigBytes = wordArray.sigBytes;var hexChars = [];for (var i = 0; i < sigBytes; i++) {var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;\n        hexChars.push((bite >>> 4).toString(16));hexChars.push((bite & 15).toString(16));}return hexChars.join(\"\");\n    }, parse: function parse(hexStr) {var hexStrLength = hexStr.length;var words = [];for (var i = 0;\n      i < hexStrLength; i += 2) {words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;}return new WordArray.init(words, hexStrLength / 2);\n    } };var Latin1 = C_enc.Latin1 = { stringify: function stringify(wordArray) {var words = wordArray.words;\n      var sigBytes = wordArray.sigBytes;var latin1Chars = [];for (var i = 0; i < sigBytes; i++) {var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;\n        latin1Chars.push(String.fromCharCode(bite));}return latin1Chars.join(\"\");}, parse: function parse(latin1Str) {var latin1StrLength = latin1Str.length;\n      var words = [];for (var i = 0; i < latin1StrLength; i++) {words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;\n      }return new WordArray.init(words, latin1StrLength);} };var Utf8 = C_enc.Utf8 = { stringify: function stringify(wordArray) {try {return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n      } catch (e) {throw new Error(\"Malformed UTF-8 data\");}}, parse: function parse(utf8Str) {return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n    } };var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({ reset: function reset() {this._data = new WordArray.init();\n      this._nDataBytes = 0;}, _append: function _append(data) {if (typeof data == \"string\") {data = Utf8.parse(data);\n      }this._data.concat(data);this._nDataBytes += data.sigBytes;}, _process: function _process(doFlush) {var processedWords;\n      var data = this._data;var dataWords = data.words;var dataSigBytes = data.sigBytes;var blockSize = this.blockSize;\n      var blockSizeBytes = blockSize * 4;var nBlocksReady = dataSigBytes / blockSizeBytes;if (doFlush) {nBlocksReady = Math.ceil(nBlocksReady);\n      } else {nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);}var nWordsReady = nBlocksReady * blockSize;\n      var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);if (nWordsReady) {for (var offset = 0;\n        offset < nWordsReady; offset += blockSize) {this._doProcessBlock(dataWords, offset);}processedWords = dataWords.splice(0, nWordsReady);\n        data.sigBytes -= nBytesReady;}return new WordArray.init(processedWords, nBytesReady);}, clone: function clone() {var clone = Base.clone.call(this);\n      clone._data = this._data.clone();return clone;}, _minBufferSize: 0 });var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({ cfg: Base.extend(), init: function init(cfg) {this.cfg = this.cfg.extend(cfg);\n      this.reset();}, reset: function reset() {BufferedBlockAlgorithm.reset.call(this);this._doReset();\n    }, update: function update(messageUpdate) {this._append(messageUpdate);this._process();return this;\n    }, finalize: function finalize(messageUpdate) {if (messageUpdate) {this._append(messageUpdate);}var hash = this._doFinalize();\n      return hash;}, blockSize: 512 / 32, _createHelper: function _createHelper(hasher) {return function (message, cfg) {return new hasher.init(cfg).finalize(message);\n      };}, _createHmacHelper: function _createHmacHelper(hasher) {return function (message, key) {return new C_algo.HMAC.init(hasher, key).finalize(message);\n      };} });var C_algo = C.algo = {};return C;}(Math);(function () {var C = CryptoJS;var C_lib = C.lib;\n  var Base = C_lib.Base;var C_enc = C.enc;var Utf8 = C_enc.Utf8;var C_algo = C.algo;var HMAC = C_algo.HMAC = Base.extend({ init: function init(hasher, key) {hasher = this._hasher = new hasher.init();\n      if (typeof key == \"string\") {key = Utf8.parse(key);}var hasherBlockSize = hasher.blockSize;\n      var hasherBlockSizeBytes = hasherBlockSize * 4;if (key.sigBytes > hasherBlockSizeBytes) {key = hasher.finalize(key);\n      }key.clamp();var oKey = this._oKey = key.clone();var iKey = this._iKey = key.clone();var oKeyWords = oKey.words;\n      var iKeyWords = iKey.words;for (var i = 0; i < hasherBlockSize; i++) {oKeyWords[i] ^= 1549556828;\n        iKeyWords[i] ^= 909522486;}oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;this.reset();\n    }, reset: function reset() {var hasher = this._hasher;hasher.reset();hasher.update(this._iKey);\n    }, update: function update(messageUpdate) {this._hasher.update(messageUpdate);return this;}, finalize: function finalize(messageUpdate) {var hasher = this._hasher;\n      var innerHash = hasher.finalize(messageUpdate);hasher.reset();var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n      return hmac;} });})();(function () {var C = CryptoJS;var C_lib = C.lib;var WordArray = C_lib.WordArray;\n  var Hasher = C_lib.Hasher;var C_algo = C.algo;var W = [];var SHA1 = C_algo.SHA1 = Hasher.extend({ _doReset: function _doReset() {this._hash = new WordArray.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);\n    }, _doProcessBlock: function _doProcessBlock(M, offset) {var H = this._hash.words;var a = H[0];var b = H[1];\n      var c = H[2];var d = H[3];var e = H[4];for (var i = 0; i < 80; i++) {if (i < 16) {W[i] = M[offset + i] | 0;\n        } else {var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];W[i] = n << 1 | n >>> 31;}var t = (a << 5 | a >>> 27) + e + W[i];\n        if (i < 20) {t += (b & c | ~b & d) + 1518500249;} else {if (i < 40) {t += (b ^ c ^ d) + 1859775393;} else {if (i < 60) {t += (b & c | b & d | c & d) - 1894007588;\n            } else {t += (b ^ c ^ d) - 899497514;}}}e = d;d = c;c = b << 30 | b >>> 2;b = a;a = t;}H[0] = H[0] + a | 0;H[1] = H[1] + b | 0;\n      H[2] = H[2] + c | 0;H[3] = H[3] + d | 0;H[4] = H[4] + e | 0;}, _doFinalize: function _doFinalize() {var data = this._data;\n      var dataWords = data.words;var nBitsTotal = this._nDataBytes * 8;var nBitsLeft = data.sigBytes * 8;\n      dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);\n      dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;data.sigBytes = dataWords.length * 4;\n      this._process();return this._hash;}, clone: function clone() {var clone = Hasher.clone.call(this);\n      clone._hash = this._hash.clone();return clone;} });C.SHA1 = Hasher._createHelper(SHA1);\n  C.HmacSHA1 = Hasher._createHmacHelper(SHA1);})();\n\n\nmodule.exports = CryptoJS;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///109\n");

/***/ }),

/***/ 12:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction formatLog() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n\n    return v;\n  });\n  var msg = '';\n\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n\n  return msg;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJmb3JtYXRMb2ciLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIm1zZ3MiLCJtYXAiLCJ0eXBlIiwidG9Mb3dlckNhc2UiLCJKU09OIiwic3RyaW5naWZ5IiwiZSIsInVuZGVmaW5lZCIsInZUeXBlIiwidG9VcHBlckNhc2UiLCJTdHJpbmciLCJtc2ciLCJsYXN0TXNnIiwicG9wIiwiam9pbiIsImluZGV4T2YiXSwibWFwcGluZ3MiOiIwRkFBQSxTQUFTQSxLQUFULENBQWdCQyxDQUFoQixFQUFtQjtBQUNqQixNQUFJQyxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCTCxDQUEvQixDQUFSO0FBQ0EsU0FBT0MsQ0FBQyxDQUFDSyxTQUFGLENBQVksQ0FBWixFQUFlTCxDQUFDLENBQUNNLE1BQUYsR0FBVyxDQUExQixDQUFQO0FBQ0Q7O0FBRWMsU0FBU0MsU0FBVCxHQUFzQjtBQUNuQyxPQUFLLElBQUlDLElBQUksR0FBR0MsU0FBUyxDQUFDSCxNQUFyQixFQUE2QkksSUFBSSxHQUFHLElBQUlDLEtBQUosQ0FBVUgsSUFBVixDQUFwQyxFQUFxREksSUFBSSxHQUFHLENBQWpFLEVBQW9FQSxJQUFJLEdBQUdKLElBQTNFLEVBQWlGSSxJQUFJLEVBQXJGLEVBQXlGO0FBQ3ZGRixRQUFJLENBQUNFLElBQUQsQ0FBSixHQUFhSCxTQUFTLENBQUNHLElBQUQsQ0FBdEI7QUFDRDs7QUFFRCxNQUFJQyxJQUFJLEdBQUdILElBQUksQ0FBQ0ksR0FBTCxDQUFTLFVBQVVmLENBQVYsRUFBYTtBQUMvQixRQUFJZ0IsSUFBSSxHQUFHZCxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkwsQ0FBL0IsQ0FBWDs7QUFFQSxRQUFJZ0IsSUFBSSxDQUFDQyxXQUFMLE9BQXVCLGlCQUEzQixFQUE4QztBQUM1QyxVQUFJO0FBQ0ZqQixTQUFDLEdBQUcscUJBQXFCa0IsSUFBSSxDQUFDQyxTQUFMLENBQWVuQixDQUFmLENBQXJCLEdBQXlDLGdCQUE3QztBQUNELE9BRkQsQ0FFRSxPQUFPb0IsQ0FBUCxFQUFVO0FBQ1ZwQixTQUFDLEdBQUcsaUJBQUo7QUFDRDtBQUNGLEtBTkQsTUFNTztBQUNMLFVBQUlBLENBQUMsS0FBSyxJQUFWLEVBQWdCO0FBQ2RBLFNBQUMsR0FBRyxZQUFKO0FBQ0QsT0FGRCxNQUVPLElBQUlBLENBQUMsS0FBS3FCLFNBQVYsRUFBcUI7QUFDMUJyQixTQUFDLEdBQUcsaUJBQUo7QUFDRCxPQUZNLE1BRUE7QUFDTCxZQUFJc0IsS0FBSyxHQUFHdkIsS0FBSyxDQUFDQyxDQUFELENBQUwsQ0FBU3VCLFdBQVQsRUFBWjs7QUFFQSxZQUFJRCxLQUFLLEtBQUssUUFBVixJQUFzQkEsS0FBSyxLQUFLLFNBQXBDLEVBQStDO0FBQzdDdEIsV0FBQyxHQUFHLGNBQWNzQixLQUFkLEdBQXNCLEtBQXRCLEdBQThCdEIsQ0FBOUIsR0FBa0MsU0FBbEMsR0FBOENzQixLQUE5QyxHQUFzRCxLQUExRDtBQUNELFNBRkQsTUFFTztBQUNMdEIsV0FBQyxHQUFHd0IsTUFBTSxDQUFDeEIsQ0FBRCxDQUFWO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQU9BLENBQVA7QUFDRCxHQTFCVSxDQUFYO0FBMkJBLE1BQUl5QixHQUFHLEdBQUcsRUFBVjs7QUFFQSxNQUFJWCxJQUFJLENBQUNQLE1BQUwsR0FBYyxDQUFsQixFQUFxQjtBQUNuQixRQUFJbUIsT0FBTyxHQUFHWixJQUFJLENBQUNhLEdBQUwsRUFBZDtBQUNBRixPQUFHLEdBQUdYLElBQUksQ0FBQ2MsSUFBTCxDQUFVLGFBQVYsQ0FBTjs7QUFFQSxRQUFJRixPQUFPLENBQUNHLE9BQVIsQ0FBZ0IsTUFBaEIsTUFBNEIsQ0FBaEMsRUFBbUM7QUFDakNKLFNBQUcsSUFBSUMsT0FBUDtBQUNELEtBRkQsTUFFTztBQUNMRCxTQUFHLElBQUksZ0JBQWdCQyxPQUF2QjtBQUNEO0FBQ0YsR0FURCxNQVNPO0FBQ0xELE9BQUcsR0FBR1gsSUFBSSxDQUFDLENBQUQsQ0FBVjtBQUNEOztBQUVELFNBQU9XLEdBQVA7QUFDRCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XHJcbiAgdmFyIHMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuICByZXR1cm4gcy5zdWJzdHJpbmcoOCwgcy5sZW5ndGggLSAxKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2cgKCkge1xyXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xyXG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XVxyXG4gIH1cclxuXHJcbiAgdmFyIG1zZ3MgPSBhcmdzLm1hcChmdW5jdGlvbiAodikge1xyXG4gICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuXHJcbiAgICBpZiAodHlwZS50b0xvd2VyQ2FzZSgpID09PSAnW29iamVjdCBvYmplY3RdJykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHYgPSAnLS0tQkVHSU46SlNPTi0tLScgKyBKU09OLnN0cmluZ2lmeSh2KSArICctLS1FTkQ6SlNPTi0tLSdcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHYgPSAnW29iamVjdCBvYmplY3RdJ1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHYgPSAnLS0tTlVMTC0tLSdcclxuICAgICAgfSBlbHNlIGlmICh2ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2ID0gJy0tLVVOREVGSU5FRC0tLSdcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgdlR5cGUgPSB0eXBvZih2KS50b1VwcGVyQ2FzZSgpXHJcblxyXG4gICAgICAgIGlmICh2VHlwZSA9PT0gJ05VTUJFUicgfHwgdlR5cGUgPT09ICdCT09MRUFOJykge1xyXG4gICAgICAgICAgdiA9ICctLS1CRUdJTjonICsgdlR5cGUgKyAnLS0tJyArIHYgKyAnLS0tRU5EOicgKyB2VHlwZSArICctLS0nXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHYgPSBTdHJpbmcodilcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdlxyXG4gIH0pXHJcbiAgdmFyIG1zZyA9ICcnXHJcblxyXG4gIGlmIChtc2dzLmxlbmd0aCA+IDEpIHtcclxuICAgIHZhciBsYXN0TXNnID0gbXNncy5wb3AoKVxyXG4gICAgbXNnID0gbXNncy5qb2luKCctLS1DT01NQS0tLScpXHJcblxyXG4gICAgaWYgKGxhc3RNc2cuaW5kZXhPZignIGF0ICcpID09PSAwKSB7XHJcbiAgICAgIG1zZyArPSBsYXN0TXNnXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtc2cgKz0gJy0tLUNPTU1BLS0tJyArIGxhc3RNc2dcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgbXNnID0gbXNnc1swXVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG1zZ1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),

/***/ 15:
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),

/***/ 16:
/*!***********************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/store/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _vuex = _interopRequireDefault(__webpack_require__(/*! vuex */ 17));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n_vue.default.use(_vuex.default);\n\nvar store = new _vuex.default.Store({\n  state: {\n    hasLogin: false,\n    loginProvider: \"\",\n    openid: null,\n    token: null,\n    userInfo: null,\n    accountList: null },\n\n  mutations: {\n    login: function login(state, provider) {\n      state.hasLogin = true;\n      state.loginProvider = provider;\n    },\n    logout: function logout(state) {\n      state.hasLogin = false;\n      state.openid = null;\n      state.token = null;\n\n      uni.setStorage({ //缓存用户登陆状态\n        key: 'token',\n        data: null });\n\n\n      console.log(__f__(\"已清空token.\", \" at store\\\\index.js:30\"));\n\n    },\n    setOpenid: function setOpenid(state, openid) {\n      state.openid = openid;\n    },\n    updateToken: function updateToken(state, token) {\n      state.token = token;\n\n      uni.setStorage({ //缓存用户登陆状态\n        key: 'token',\n        data: token });\n\n\n      //console.log(\"已更新token:\"+token);\n    },\n    setUserInfo: function setUserInfo(state, info) {\n      state.userInfo = info;\n    },\n    saveAccountList: function saveAccountList(state, list) {\n      state.accountList = list;\n    } },\n\n\n  getters: {\n    token: function token(state) {\n      state.token = uni.getStorageSync('token');\n      return state.token;\n    },\n    userInfo: function userInfo(state) {\n      return state.userInfo;\n    },\n    accountList: function accountList(state) {\n      return state.accountList;\n    } },\n\n\n  actions: {} });var _default =\n\n\n\n\nstore;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvaW5kZXguanMiXSwibmFtZXMiOlsiVnVlIiwidXNlIiwiVnVleCIsInN0b3JlIiwiU3RvcmUiLCJzdGF0ZSIsImhhc0xvZ2luIiwibG9naW5Qcm92aWRlciIsIm9wZW5pZCIsInRva2VuIiwidXNlckluZm8iLCJhY2NvdW50TGlzdCIsIm11dGF0aW9ucyIsImxvZ2luIiwicHJvdmlkZXIiLCJsb2dvdXQiLCJ1bmkiLCJzZXRTdG9yYWdlIiwia2V5IiwiZGF0YSIsImNvbnNvbGUiLCJsb2ciLCJzZXRPcGVuaWQiLCJ1cGRhdGVUb2tlbiIsInNldFVzZXJJbmZvIiwiaW5mbyIsInNhdmVBY2NvdW50TGlzdCIsImxpc3QiLCJnZXR0ZXJzIiwiZ2V0U3RvcmFnZVN5bmMiLCJhY3Rpb25zIl0sIm1hcHBpbmdzIjoieUlBQUE7QUFDQSx3RTs7QUFFQUEsYUFBSUMsR0FBSixDQUFRQyxhQUFSOztBQUVBLElBQU1DLEtBQUssR0FBRyxJQUFJRCxjQUFLRSxLQUFULENBQWU7QUFDNUJDLE9BQUssRUFBRTtBQUNOQyxZQUFRLEVBQUUsS0FESjtBQUVOQyxpQkFBYSxFQUFFLEVBRlQ7QUFHTkMsVUFBTSxFQUFFLElBSEY7QUFJTkMsU0FBSyxFQUFFLElBSkQ7QUFLTkMsWUFBUSxFQUFFLElBTEo7QUFNTkMsZUFBVyxFQUFFLElBTlAsRUFEcUI7O0FBUzVCQyxXQUFTLEVBQUU7QUFDVkMsU0FEVSxpQkFDSlIsS0FESSxFQUNHUyxRQURILEVBQ2E7QUFDdEJULFdBQUssQ0FBQ0MsUUFBTixHQUFpQixJQUFqQjtBQUNBRCxXQUFLLENBQUNFLGFBQU4sR0FBc0JPLFFBQXRCO0FBQ0EsS0FKUztBQUtWQyxVQUxVLGtCQUtIVixLQUxHLEVBS0k7QUFDYkEsV0FBSyxDQUFDQyxRQUFOLEdBQWlCLEtBQWpCO0FBQ0FELFdBQUssQ0FBQ0csTUFBTixHQUFlLElBQWY7QUFDQUgsV0FBSyxDQUFDSSxLQUFOLEdBQWMsSUFBZDs7QUFFQU8sU0FBRyxDQUFDQyxVQUFKLENBQWUsRUFBQztBQUNaQyxXQUFHLEVBQUUsT0FETTtBQUVYQyxZQUFJLEVBQUUsSUFGSyxFQUFmOzs7QUFLQUMsYUFBTyxDQUFDQyxHQUFSLE9BQVksV0FBWjs7QUFFQSxLQWpCUztBQWtCVkMsYUFsQlUscUJBa0JBakIsS0FsQkEsRUFrQk9HLE1BbEJQLEVBa0JlO0FBQ3hCSCxXQUFLLENBQUNHLE1BQU4sR0FBZUEsTUFBZjtBQUNBLEtBcEJTO0FBcUJWZSxlQXJCVSx1QkFxQkVsQixLQXJCRixFQXFCU0ksS0FyQlQsRUFxQmdCO0FBQ3pCSixXQUFLLENBQUNJLEtBQU4sR0FBY0EsS0FBZDs7QUFFQU8sU0FBRyxDQUFDQyxVQUFKLENBQWUsRUFBQztBQUNaQyxXQUFHLEVBQUUsT0FETTtBQUVYQyxZQUFJLEVBQUVWLEtBRkssRUFBZjs7O0FBS0E7QUFDQSxLQTlCUztBQStCVmUsZUEvQlUsdUJBK0JFbkIsS0EvQkYsRUErQlNvQixJQS9CVCxFQStCZTtBQUN4QnBCLFdBQUssQ0FBQ0ssUUFBTixHQUFpQmUsSUFBakI7QUFDQSxLQWpDUztBQWtDVkMsbUJBbENVLDJCQWtDTXJCLEtBbENOLEVBa0Nhc0IsSUFsQ2IsRUFrQ21CO0FBQzVCdEIsV0FBSyxDQUFDTSxXQUFOLEdBQW9CZ0IsSUFBcEI7QUFDQSxLQXBDUyxFQVRpQjs7O0FBZ0Q1QkMsU0FBTyxFQUFDO0FBQ1BuQixTQURPLGlCQUNESixLQURDLEVBQ007QUFDWkEsV0FBSyxDQUFDSSxLQUFOLEdBQWNPLEdBQUcsQ0FBQ2EsY0FBSixDQUFtQixPQUFuQixDQUFkO0FBQ0EsYUFBT3hCLEtBQUssQ0FBQ0ksS0FBYjtBQUNBLEtBSk07QUFLUEMsWUFMTyxvQkFLRUwsS0FMRixFQUtTO0FBQ2YsYUFBT0EsS0FBSyxDQUFDSyxRQUFiO0FBQ0EsS0FQTTtBQVFQQyxlQVJPLHVCQVFLTixLQVJMLEVBUVk7QUFDbEIsYUFBT0EsS0FBSyxDQUFDTSxXQUFiO0FBQ0EsS0FWTSxFQWhEb0I7OztBQTZENUJtQixTQUFPLEVBQUUsRUE3RG1CLEVBQWYsQ0FBZCxDOzs7OztBQWtFZTNCLEsiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcclxuaW1wb3J0IFZ1ZXggZnJvbSAndnVleCdcclxuXHJcblZ1ZS51c2UoVnVleClcclxuXHJcbmNvbnN0IHN0b3JlID0gbmV3IFZ1ZXguU3RvcmUoe1xyXG5cdHN0YXRlOiB7XHJcblx0XHRoYXNMb2dpbjogZmFsc2UsXHJcblx0XHRsb2dpblByb3ZpZGVyOiBcIlwiLFxyXG5cdFx0b3BlbmlkOiBudWxsLFxyXG5cdFx0dG9rZW46IG51bGwsXHJcblx0XHR1c2VySW5mbzogbnVsbCxcclxuXHRcdGFjY291bnRMaXN0OiBudWxsLFxyXG5cdH0sXHJcblx0bXV0YXRpb25zOiB7XHJcblx0XHRsb2dpbihzdGF0ZSwgcHJvdmlkZXIpIHtcclxuXHRcdFx0c3RhdGUuaGFzTG9naW4gPSB0cnVlO1xyXG5cdFx0XHRzdGF0ZS5sb2dpblByb3ZpZGVyID0gcHJvdmlkZXI7XHJcblx0XHR9LFxyXG5cdFx0bG9nb3V0KHN0YXRlKSB7XHJcblx0XHRcdHN0YXRlLmhhc0xvZ2luID0gZmFsc2U7XHJcblx0XHRcdHN0YXRlLm9wZW5pZCA9IG51bGw7XHJcblx0XHRcdHN0YXRlLnRva2VuID0gbnVsbDtcclxuXHRcdFx0XHJcblx0XHRcdHVuaS5zZXRTdG9yYWdlKHsvL+e8k+WtmOeUqOaIt+eZu+mZhueKtuaAgVxyXG5cdFx0XHQgICAga2V5OiAndG9rZW4nLCAgXHJcblx0XHRcdCAgICBkYXRhOiBudWxsICBcclxuXHRcdFx0fSkgXHJcblx0XHRcdFxyXG5cdFx0XHRjb25zb2xlLmxvZyhcIuW3sua4heepunRva2VuLlwiKTtcclxuXHRcdFx0XHJcblx0XHR9LFxyXG5cdFx0c2V0T3BlbmlkKHN0YXRlLCBvcGVuaWQpIHtcclxuXHRcdFx0c3RhdGUub3BlbmlkID0gb3BlbmlkXHJcblx0XHR9LFxyXG5cdFx0dXBkYXRlVG9rZW4oc3RhdGUsIHRva2VuKSB7XHJcblx0XHRcdHN0YXRlLnRva2VuID0gdG9rZW47XHJcblx0XHRcdFxyXG5cdFx0XHR1bmkuc2V0U3RvcmFnZSh7Ly/nvJPlrZjnlKjmiLfnmbvpmYbnirbmgIFcclxuXHRcdFx0ICAgIGtleTogJ3Rva2VuJywgIFxyXG5cdFx0XHQgICAgZGF0YTogdG9rZW4gIFxyXG5cdFx0XHR9KSBcclxuXHRcdFx0XHJcblx0XHRcdC8vY29uc29sZS5sb2coXCLlt7Lmm7TmlrB0b2tlbjpcIit0b2tlbik7XHJcblx0XHR9LFxyXG5cdFx0c2V0VXNlckluZm8oc3RhdGUsIGluZm8pIHtcclxuXHRcdFx0c3RhdGUudXNlckluZm8gPSBpbmZvO1xyXG5cdFx0fSxcclxuXHRcdHNhdmVBY2NvdW50TGlzdChzdGF0ZSwgbGlzdCkge1xyXG5cdFx0XHRzdGF0ZS5hY2NvdW50TGlzdCA9IGxpc3Q7XHJcblx0XHR9XHJcblx0fSxcclxuXHRcclxuXHRnZXR0ZXJzOntcclxuXHRcdHRva2VuKHN0YXRlKSB7XHJcblx0XHRcdHN0YXRlLnRva2VuID0gdW5pLmdldFN0b3JhZ2VTeW5jKCd0b2tlbicpO1xyXG5cdFx0XHRyZXR1cm4gc3RhdGUudG9rZW47XHJcblx0XHR9LFxyXG5cdFx0dXNlckluZm8oc3RhdGUpIHtcclxuXHRcdFx0cmV0dXJuIHN0YXRlLnVzZXJJbmZvO1xyXG5cdFx0fSxcclxuXHRcdGFjY291bnRMaXN0KHN0YXRlKSB7XHJcblx0XHRcdHJldHVybiBzdGF0ZS5hY2NvdW50TGlzdDtcclxuXHRcdH1cclxuXHR9LFxyXG5cdFxyXG5cdGFjdGlvbnM6IHtcclxuXHRcdFxyXG5cdH1cclxufSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHN0b3JlXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n");

/***/ }),

/***/ 17:
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: Store, install, mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Store\", function() { return Store; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"install\", function() { return install; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapState\", function() { return mapState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapMutations\", function() { return mapMutations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapGetters\", function() { return mapGetters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapActions\", function() { return mapActions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createNamespacedHelpers\", function() { return createNamespacedHelpers; });\n/**\n * vuex v3.0.1\n * (c) 2017 Evan You\n * @license MIT\n */\nvar applyMixin = function (Vue) {\n  var version = Number(Vue.version.split('.')[0]);\n\n  if (version >= 2) {\n    Vue.mixin({ beforeCreate: vuexInit });\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    var _init = Vue.prototype._init;\n    Vue.prototype._init = function (options) {\n      if ( options === void 0 ) options = {};\n\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit;\n      _init.call(this, options);\n    };\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit () {\n    var options = this.$options;\n    // store injection\n    if (options.store) {\n      this.$store = typeof options.store === 'function'\n        ? options.store()\n        : options.store;\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store;\n    }\n  }\n};\n\nvar devtoolHook =\n  typeof window !== 'undefined' &&\n  window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin (store) {\n  if (!devtoolHook) { return }\n\n  store._devtoolHook = devtoolHook;\n\n  devtoolHook.emit('vuex:init', store);\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state);\n  });\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\n\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });\n}\n\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nfunction isPromise (val) {\n  return val && typeof val.then === 'function'\n}\n\nfunction assert (condition, msg) {\n  if (!condition) { throw new Error((\"[vuex] \" + msg)) }\n}\n\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime;\n  this._children = Object.create(null);\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors$1 = { namespaced: { configurable: true } };\n\nprototypeAccessors$1.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors$1 );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  // register root module (Vuex.Store options)\n  this.register([], rawRootModule, false);\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update([], this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  if (true) {\n    assertRawModule(path, rawModule);\n  }\n\n  var newModule = new Module(rawModule, runtime);\n  if (path.length === 0) {\n    this.root = newModule;\n  } else {\n    var parent = this.get(path.slice(0, -1));\n    parent.addChild(path[path.length - 1], newModule);\n  }\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  if (!parent.getChild(key).runtime) { return }\n\n  parent.removeChild(key);\n};\n\nfunction update (path, targetModule, newModule) {\n  if (true) {\n    assertRawModule(path, newModule);\n  }\n\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        if (true) {\n          console.warn(\n            \"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" +\n            'manual reload is needed'\n          );\n        }\n        return\n      }\n      update(\n        path.concat(key),\n        targetModule.getChild(key),\n        newModule.modules[key]\n      );\n    }\n  }\n}\n\nvar functionAssert = {\n  assert: function (value) { return typeof value === 'function'; },\n  expected: 'function'\n};\n\nvar objectAssert = {\n  assert: function (value) { return typeof value === 'function' ||\n    (typeof value === 'object' && typeof value.handler === 'function'); },\n  expected: 'function or object with \"handler\" function'\n};\n\nvar assertTypes = {\n  getters: functionAssert,\n  mutations: functionAssert,\n  actions: objectAssert\n};\n\nfunction assertRawModule (path, rawModule) {\n  Object.keys(assertTypes).forEach(function (key) {\n    if (!rawModule[key]) { return }\n\n    var assertOptions = assertTypes[key];\n\n    forEachValue(rawModule[key], function (value, type) {\n      assert(\n        assertOptions.assert(value),\n        makeAssertionMessage(path, key, type, value, assertOptions.expected)\n      );\n    });\n  });\n}\n\nfunction makeAssertionMessage (path, key, type, value, expected) {\n  var buf = key + \" should be \" + expected + \" but \\\"\" + key + \".\" + type + \"\\\"\";\n  if (path.length > 0) {\n    buf += \" in module \\\"\" + (path.join('.')) + \"\\\"\";\n  }\n  buf += \" is \" + (JSON.stringify(value)) + \".\";\n  return buf\n}\n\nvar Vue; // bind on install\n\nvar Store = function Store (options) {\n  var this$1 = this;\n  if ( options === void 0 ) options = {};\n\n  // Auto install if it is not done yet and `window` has `Vue`.\n  // To allow users to avoid auto-installation in some cases,\n  // this code should be placed here. See #731\n  if (!Vue && typeof window !== 'undefined' && window.Vue) {\n    install(window.Vue);\n  }\n\n  if (true) {\n    assert(Vue, \"must call Vue.use(Vuex) before creating a store instance.\");\n    assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\");\n    assert(this instanceof Store, \"Store must be called with the new operator.\");\n  }\n\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n\n  var state = options.state; if ( state === void 0 ) state = {};\n  if (typeof state === 'function') {\n    state = state() || {};\n  }\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._actionSubscribers = [];\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._watcherVM = new Vue();\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  };\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store vm, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreVM(this, state);\n\n  // apply plugins\n  plugins.forEach(function (plugin) { return plugin(this$1); });\n\n  if (Vue.config.devtools) {\n    devtoolPlugin(this);\n  }\n};\n\nvar prototypeAccessors = { state: { configurable: true } };\n\nprototypeAccessors.state.get = function () {\n  return this._vm._data.$$state\n};\n\nprototypeAccessors.state.set = function (v) {\n  if (true) {\n    assert(false, \"Use store.replaceState() to explicit replace store state.\");\n  }\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown mutation type: \" + type));\n    }\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload);\n    });\n  });\n  this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); });\n\n  if (\n     true &&\n    options && options.silent\n  ) {\n    console.warn(\n      \"[vuex] mutation type: \" + type + \". Silent option has been removed. \" +\n      'Use the filter functionality in the vue-devtools'\n    );\n  }\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n    var this$1 = this;\n\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var action = { type: type, payload: payload };\n  var entry = this._actions[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown action type: \" + type));\n    }\n    return\n  }\n\n  this._actionSubscribers.forEach(function (sub) { return sub(action, this$1.state); });\n\n  return entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload)\n};\n\nStore.prototype.subscribe = function subscribe (fn) {\n  return genericSubscribe(fn, this._subscribers)\n};\n\nStore.prototype.subscribeAction = function subscribeAction (fn) {\n  return genericSubscribe(fn, this._actionSubscribers)\n};\n\nStore.prototype.watch = function watch (getter, cb, options) {\n    var this$1 = this;\n\n  if (true) {\n    assert(typeof getter === 'function', \"store.watch only accepts a function.\");\n  }\n  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._vm._data.$$state = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule, options) {\n    if ( options === void 0 ) options = {};\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n    assert(path.length > 0, 'cannot register the root module by using registerModule.');\n  }\n\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path), options.preserveState);\n  // reset store to update getters...\n  resetStoreVM(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1 = this;\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  }\n\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1));\n    Vue.delete(parentState, path[path.length - 1]);\n  });\n  resetStore(this);\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors );\n\nfunction genericSubscribe (fn, subs) {\n  if (subs.indexOf(fn) < 0) {\n    subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  }\n}\n\nfunction resetStore (store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset vm\n  resetStoreVM(store, state, hot);\n}\n\nfunction resetStoreVM (store, state, hot) {\n  var oldVm = store._vm;\n\n  // bind store public getters\n  store.getters = {};\n  var wrappedGetters = store._wrappedGetters;\n  var computed = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    computed[key] = function () { return fn(store); };\n    Object.defineProperty(store.getters, key, {\n      get: function () { return store._vm[key]; },\n      enumerable: true // for local getters\n    });\n  });\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  var silent = Vue.config.silent;\n  Vue.config.silent = true;\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed: computed\n  });\n  Vue.config.silent = silent;\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldVm._data.$$state = null;\n      });\n    }\n    Vue.nextTick(function () { return oldVm.$destroy(); });\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      Vue.set(parentState, moduleName, module.state);\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var type = action.root ? key : namespace + key;\n    var handler = action.handler || action;\n    registerAction(store, type, handler, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace, path) {\n  var noNamespace = namespace === '';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._actions[type]) {\n          console.error((\"[vuex] unknown local action type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._mutations[type]) {\n          console.error((\"[vuex] unknown local mutation type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by vm update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace\n        ? function () { return store.getters; }\n        : function () { return makeLocalGetters(store, namespace); }\n    },\n    state: {\n      get: function () { return getNestedState(store.state, path); }\n    }\n  });\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  var gettersProxy = {};\n\n  var splitPos = namespace.length;\n  Object.keys(store.getters).forEach(function (type) {\n    // skip if the target getter is not match this namespace\n    if (type.slice(0, splitPos) !== namespace) { return }\n\n    // extract local getter type\n    var localType = type.slice(splitPos);\n\n    // Add a port to the getters proxy.\n    // Define as getter property because\n    // we do not want to evaluate the getters in this time.\n    Object.defineProperty(gettersProxy, localType, {\n      get: function () { return store.getters[type]; },\n      enumerable: true\n    });\n  });\n\n  return gettersProxy\n}\n\nfunction registerMutation (store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload);\n  });\n}\n\nfunction registerAction (store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler (payload, cb) {\n    var res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb);\n    if (!isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err);\n        throw err\n      })\n    } else {\n      return res\n    }\n  });\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    if (true) {\n      console.error((\"[vuex] duplicate getter key: \" + type));\n    }\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  };\n}\n\nfunction enableStrictMode (store) {\n  store._vm.$watch(function () { return this._data.$$state }, function () {\n    if (true) {\n      assert(store._committing, \"Do not mutate vuex store state outside mutation handlers.\");\n    }\n  }, { deep: true, sync: true });\n}\n\nfunction getNestedState (state, path) {\n  return path.length\n    ? path.reduce(function (state, key) { return state[key]; }, state)\n    : state\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  if (true) {\n    assert(typeof type === 'string', (\"Expects string as the type, but found \" + (typeof type) + \".\"));\n  }\n\n  return { type: type, payload: payload, options: options }\n}\n\nfunction install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    if (true) {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      );\n    }\n    return\n  }\n  Vue = _Vue;\n  applyMixin(Vue);\n}\n\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n        if (!module) {\n          return\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var commit = this.$store.commit;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);\n        if (!module) {\n          return\n        }\n        commit = module.context.commit;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [commit].concat(args))\n        : commit.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedGetter () {\n      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n        return\n      }\n      if ( true && !(val in this.$store.getters)) {\n        console.error((\"[vuex] unknown getter: \" + val));\n        return\n      }\n      return this.$store.getters[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var dispatch = this.$store.dispatch;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);\n        if (!module) {\n          return\n        }\n        dispatch = module.context.dispatch;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [dispatch].concat(args))\n        : dispatch.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar createNamespacedHelpers = function (namespace) { return ({\n  mapState: mapState.bind(null, namespace),\n  mapGetters: mapGetters.bind(null, namespace),\n  mapMutations: mapMutations.bind(null, namespace),\n  mapActions: mapActions.bind(null, namespace)\n}); };\n\nfunction normalizeMap (map) {\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace;\n      namespace = '';\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/';\n    }\n    return fn(namespace, map)\n  }\n}\n\nfunction getModuleByNamespace (store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if ( true && !module) {\n    console.error((\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace));\n  }\n  return module\n}\n\nvar index_esm = {\n  Store: Store,\n  install: install,\n  version: '3.0.1',\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions,\n  createNamespacedHelpers: createNamespacedHelpers\n};\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index_esm);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),

/***/ 190:
/*!***********************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/common/util.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("function formatTime(time) {\n  if (typeof time !== 'number' || time < 0) {\n    return time;\n  }\n\n  var hour = parseInt(time / 3600);\n  time = time % 3600;\n  var minute = parseInt(time / 60);\n  time = time % 60;\n  var second = time;\n\n  return [hour, minute, second].map(function (n) {\n    n = n.toString();\n    return n[1] ? n : '0' + n;\n  }).join(':');\n}\n\nfunction formatLocation(longitude, latitude) {\n  if (typeof longitude === 'string' && typeof latitude === 'string') {\n    longitude = parseFloat(longitude);\n    latitude = parseFloat(latitude);\n  }\n\n  longitude = longitude.toFixed(2);\n  latitude = latitude.toFixed(2);\n\n  return {\n    longitude: longitude.toString().split('.'),\n    latitude: latitude.toString().split('.') };\n\n}\n\nfunction formatAmount(number, decimals, dec_point, thousands_sep) {\n  /*\r\n                                                                    * 参数说明：\r\n                                                                    * number：要格式化的数字\r\n                                                                    * decimals：保留几位小数\r\n                                                                    * dec_point：小数点符号\r\n                                                                    * thousands_sep：千分位符号\r\n                                                                    * */\n  number = (number + '').replace(/[^0-9+-Ee.]/g, '');\n  var n = !isFinite(+number) ? 0 : +number,\n  prec = !isFinite(+decimals) ? 2 : Math.abs(decimals),\n  sep = typeof thousands_sep === 'undefined' ? ',' : thousands_sep,\n  dec = typeof dec_point === 'undefined' ? '.' : dec_point,\n  s = '',\n  toFixedFix = function toFixedFix(n, prec) {\n    var k = Math.pow(10, prec);\n    return '' + Math.ceil(n * k) / k;\n  };\n\n  s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');\n  var re = /(-?\\d+)(\\d{3})/;\n  while (re.test(s[0])) {\n    s[0] = s[0].replace(re, \"$1\" + sep + \"$2\");\n  }\n\n  if ((s[1] || '').length < prec) {\n    s[1] = s[1] || '';\n    s[1] += new Array(prec - s[1].length + 1).join('0');\n  }\n  return s.join(dec);\n}\n\nfunction currentMonth() {\n  var curDate = new Date();\n  var year = curDate.getFullYear();\n  var month = curDate.getMonth() + 1;\n\n  if (month < 10) {\n    return year + \"0\" + month;\n  } else {\n    return year + \"\" + month;\n  }\n}\n\nvar dateUtils = {\n  UNITS: {\n    '年': 31557600000,\n    '月': 2629800000,\n    '天': 86400000,\n    '小时': 3600000,\n    '分钟': 60000,\n    '秒': 1000 },\n\n  humanize: function humanize(milliseconds) {\n    var humanize = '';\n    for (var key in this.UNITS) {\n      if (milliseconds >= this.UNITS[key]) {\n        humanize = Math.floor(milliseconds / this.UNITS[key]) + key + '前';\n        break;\n      }\n    }\n    return humanize || '刚刚';\n  },\n  format: function format(dateStr) {\n    var date = this.parse(dateStr);\n    var diff = Date.now() - date.getTime();\n    if (diff < this.UNITS['天']) {\n      return this.humanize(diff);\n    }\n    var _format = function _format(number) {\n      return number < 10 ? '0' + number : number;\n    };\n    return date.getFullYear() + '/' + _format(date.getMonth() + 1) + '/' + _format(date.getDay()) + '-' +\n    _format(date.getHours()) + ':' + _format(date.getMinutes());\n  },\n  parse: function parse(str) {//将\"yyyy-mm-dd HH:MM:ss\"格式的字符串，转化为一个Date对象\n    var a = str.split(/[^0-9]/);\n    return new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]);\n  } };\n\n\nmodule.exports = {\n  formatTime: formatTime,\n  formatLocation: formatLocation,\n  formatAmount: formatAmount,\n  dateUtils: dateUtils,\n  currentMonth: currentMonth };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///190\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 227:
/*!*******************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/common/country-code.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("module.exports = {\n  \"list\": [{\n    \"en\": \"Angola\",\n    \"cn\": \"安哥拉\",\n    \"code\": \"+244\" },\n\n  {\n    \"en\": \"Afghanistan\",\n    \"cn\": \"阿富汗\",\n    \"code\": \"+93\" },\n\n  {\n    \"en\": \"Albania\",\n    \"cn\": \"阿尔巴尼亚\",\n    \"code\": \"+335\" },\n\n  {\n    \"en\": \"Algeria\",\n    \"cn\": \"阿尔及利亚\",\n    \"code\": \"+213\" },\n\n  {\n    \"en\": \"Andorra\",\n    \"cn\": \"安道尔共和国\",\n    \"code\": \"+376\" },\n\n  {\n    \"en\": \"Anguilla\",\n    \"cn\": \"安圭拉岛\",\n    \"code\": \"+1254\" },\n\n  {\n    \"en\": \"Antigua and Barbuda\",\n    \"cn\": \"安提瓜和巴布达\",\n    \"code\": \"+1268\" },\n\n  {\n    \"en\": \"Argentina\",\n    \"cn\": \"阿根廷\",\n    \"code\": \"+54\" },\n\n  {\n    \"en\": \"Armenia\",\n    \"cn\": \"亚美尼亚\",\n    \"code\": \"+374\" },\n\n  {\n    \"en\": \"Ascension\",\n    \"cn\": \"阿森松\",\n    \"code\": \"+247\" },\n\n  {\n    \"en\": \"Australia\",\n    \"cn\": \"澳大利亚\",\n    \"code\": \"+61\" },\n\n  {\n    \"en\": \"Austria\",\n    \"cn\": \"奥地利\",\n    \"code\": \"+43\" },\n\n  {\n    \"en\": \"Azerbaijan\",\n    \"cn\": \"阿塞拜疆\",\n    \"code\": \"+994\" },\n\n  {\n    \"en\": \"Bahamas\",\n    \"cn\": \"巴哈马\",\n    \"code\": \"+1242\" },\n\n  {\n    \"en\": \"Bahrain\",\n    \"cn\": \"巴林\",\n    \"code\": \"+973\" },\n\n  {\n    \"en\": \"Bangladesh\",\n    \"cn\": \"孟加拉国\",\n    \"code\": \"+880\" },\n\n  {\n    \"en\": \"Barbados\",\n    \"cn\": \"巴巴多斯\",\n    \"code\": \"+1246\" },\n\n  {\n    \"en\": \"Belarus\",\n    \"cn\": \"白俄罗斯\",\n    \"code\": \"+375\" },\n\n  {\n    \"en\": \"Belgium\",\n    \"cn\": \"比利时\",\n    \"code\": \"+32\" },\n\n  {\n    \"en\": \"Belize\",\n    \"cn\": \"伯利兹\",\n    \"code\": \"+501\" },\n\n  {\n    \"en\": \"Benin\",\n    \"cn\": \"贝宁\",\n    \"code\": \"+229\" },\n\n  {\n    \"en\": \"Bermuda Is\",\n    \"cn\": \"百慕大群岛\",\n    \"code\": \"+1441\" },\n\n  {\n    \"en\": \"Bolivia\",\n    \"cn\": \"玻利维亚\",\n    \"code\": \"+591\" },\n\n  {\n    \"en\": \"Botswana\",\n    \"cn\": \"博茨瓦纳\",\n    \"code\": \"+267\" },\n\n  {\n    \"en\": \"Brazil\",\n    \"cn\": \"巴西\",\n    \"code\": \"+55\" },\n\n  {\n    \"en\": \"Brunei\",\n    \"cn\": \"文莱\",\n    \"code\": \"+673\" },\n\n  {\n    \"en\": \"Bulgaria\",\n    \"cn\": \"保加利亚\",\n    \"code\": \"+359\" },\n\n  {\n    \"en\": \"Burkina Faso\",\n    \"cn\": \"布基纳法索\",\n    \"code\": \"+226\" },\n\n  {\n    \"en\": \"Burma\",\n    \"cn\": \"缅甸\",\n    \"code\": \"+95\" },\n\n  {\n    \"en\": \"Burundi\",\n    \"cn\": \"布隆迪\",\n    \"code\": \"+257\" },\n\n  {\n    \"en\": \"Cameroon\",\n    \"cn\": \"喀麦隆\",\n    \"code\": \"+237\" },\n\n  {\n    \"en\": \"Canada\",\n    \"cn\": \"加拿大\",\n    \"code\": \"+1\" },\n\n  {\n    \"en\": \"Cayman Is\",\n    \"cn\": \"开曼群岛\",\n    \"code\": \"+1345\" },\n\n  {\n    \"en\": \"Central African Republic\",\n    \"cn\": \"中非共和国\",\n    \"code\": \"+236\" },\n\n  {\n    \"en\": \"Chad\",\n    \"cn\": \"乍得\",\n    \"code\": \"+235\" },\n\n  {\n    \"en\": \"Chile\",\n    \"cn\": \"智利\",\n    \"code\": \"+56\" },\n\n  {\n    \"en\": \"China\",\n    \"cn\": \"中国\",\n    \"code\": \"+86\" },\n\n  {\n    \"en\": \"Colombia\",\n    \"cn\": \"哥伦比亚\",\n    \"code\": \"+57\" },\n\n  {\n    \"en\": \"Congo\",\n    \"cn\": \"刚果\",\n    \"code\": \"+242\" },\n\n  {\n    \"en\": \"Cook Is\",\n    \"cn\": \"库克群岛\",\n    \"code\": \"+682\" },\n\n  {\n    \"en\": \"Costa Rica\",\n    \"cn\": \"哥斯达黎加\",\n    \"code\": \"+506\" },\n\n  {\n    \"en\": \"Cuba\",\n    \"cn\": \"古巴\",\n    \"code\": \"+53\" },\n\n  {\n    \"en\": \"Cyprus\",\n    \"cn\": \"塞浦路斯\",\n    \"code\": \"+357\" },\n\n  {\n    \"en\": \"Czech Republic\",\n    \"cn\": \"捷克\",\n    \"code\": \"+420\" },\n\n  {\n    \"en\": \"Denmark\",\n    \"cn\": \"丹麦\",\n    \"code\": \"+45\" },\n\n  {\n    \"en\": \"Djibouti\",\n    \"cn\": \"吉布提\",\n    \"code\": \"+253\" },\n\n  {\n    \"en\": \"Dominica Rep\",\n    \"cn\": \"多米尼加共和国\",\n    \"code\": \"+1890\" },\n\n  {\n    \"en\": \"Ecuador\",\n    \"cn\": \"厄瓜多尔\",\n    \"code\": \"+593\" },\n\n  {\n    \"en\": \"Egypt\",\n    \"cn\": \"埃及\",\n    \"code\": \"+20\" },\n\n  {\n    \"en\": \"EI Salvador\",\n    \"cn\": \"萨尔瓦多\",\n    \"code\": \"+503\" },\n\n  {\n    \"en\": \"Estonia\",\n    \"cn\": \"爱沙尼亚\",\n    \"code\": \"+372\" },\n\n  {\n    \"en\": \"Ethiopia\",\n    \"cn\": \"埃塞俄比亚\",\n    \"code\": \"+251\" },\n\n  {\n    \"en\": \"Fiji\",\n    \"cn\": \"斐济\",\n    \"code\": \"+679\" },\n\n  {\n    \"en\": \"Finland\",\n    \"cn\": \"芬兰\",\n    \"code\": \"+358\" },\n\n  {\n    \"en\": \"France\",\n    \"cn\": \"法国\",\n    \"code\": \"+33\" },\n\n  {\n    \"en\": \"French Guiana\",\n    \"cn\": \"法属圭亚那\",\n    \"code\": \"+594\" },\n\n  {\n    \"en\": \"French Polynesia\",\n    \"cn\": \"法属玻利尼西亚\",\n    \"code\": \"+689\" },\n\n  {\n    \"en\": \"Gabon\",\n    \"cn\": \"加蓬\",\n    \"code\": \"+241\" },\n\n  {\n    \"en\": \"Gambia\",\n    \"cn\": \"冈比亚\",\n    \"code\": \"+220\" },\n\n  {\n    \"en\": \"Georgia\",\n    \"cn\": \"格鲁吉亚\",\n    \"code\": \"+995\" },\n\n  {\n    \"en\": \"Germany\",\n    \"cn\": \"德国\",\n    \"code\": \"+49\" },\n\n  {\n    \"en\": \"Ghana\",\n    \"cn\": \"加纳\",\n    \"code\": \"+233\" },\n\n  {\n    \"en\": \"Gibraltar\",\n    \"cn\": \"直布罗陀\",\n    \"code\": \"+350\" },\n\n  {\n    \"en\": \"Greece\",\n    \"cn\": \"希腊\",\n    \"code\": \"+30\" },\n\n  {\n    \"en\": \"Grenada\",\n    \"cn\": \"格林纳达\",\n    \"code\": \"+1809\" },\n\n  {\n    \"en\": \"Guam\",\n    \"cn\": \"关岛\",\n    \"code\": \"+1671\" },\n\n  {\n    \"en\": \"Guatemala\",\n    \"cn\": \"危地马拉\",\n    \"code\": \"+502\" },\n\n  {\n    \"en\": \"Guinea\",\n    \"cn\": \"几内亚\",\n    \"code\": \"+224\" },\n\n  {\n    \"en\": \"Guyana\",\n    \"cn\": \"圭亚那\",\n    \"code\": \"+592\" },\n\n  {\n    \"en\": \"Haiti\",\n    \"cn\": \"海地\",\n    \"code\": \"+509\" },\n\n  {\n    \"en\": \"Honduras\",\n    \"cn\": \"洪都拉斯\",\n    \"code\": \"+504\" },\n\n  {\n    \"en\": \"Hongkong\",\n    \"cn\": \"香港\",\n    \"code\": \"+852\" },\n\n  {\n    \"en\": \"Hungary\",\n    \"cn\": \"匈牙利\",\n    \"code\": \"+36\" },\n\n  {\n    \"en\": \"Iceland\",\n    \"cn\": \"冰岛\",\n    \"code\": \"+354\" },\n\n  {\n    \"en\": \"India\",\n    \"cn\": \"印度\",\n    \"code\": \"+91\" },\n\n  {\n    \"en\": \"Indonesia\",\n    \"cn\": \"印度尼西亚\",\n    \"code\": \"+62\" },\n\n  {\n    \"en\": \"Iran\",\n    \"cn\": \"伊朗\",\n    \"code\": \"+98\" },\n\n  {\n    \"en\": \"Iraq\",\n    \"cn\": \"伊拉克\",\n    \"code\": \"+964\" },\n\n  {\n    \"en\": \"Ireland\",\n    \"cn\": \"爱尔兰\",\n    \"code\": \"+353\" },\n\n  {\n    \"en\": \"Israel\",\n    \"cn\": \"以色列\",\n    \"code\": \"+972\" },\n\n  {\n    \"en\": \"Italy\",\n    \"cn\": \"意大利\",\n    \"code\": \"+39\" },\n\n  {\n    \"en\": \"Ivory Coast\",\n    \"cn\": \"科特迪瓦\",\n    \"code\": \"+225\" },\n\n  {\n    \"en\": \"Jamaica\",\n    \"cn\": \"牙买加\",\n    \"code\": \"+1876\" },\n\n  {\n    \"en\": \"Japan\",\n    \"cn\": \"日本\",\n    \"code\": \"+81\" },\n\n  {\n    \"en\": \"Jordan\",\n    \"cn\": \"约旦\",\n    \"code\": \"+962\" },\n\n  {\n    \"en\": \"Kampuchea (Cambodia )\",\n    \"cn\": \"柬埔寨\",\n    \"code\": \"+855\" },\n\n  {\n    \"en\": \"Kazakstan\",\n    \"cn\": \"哈萨克斯坦\",\n    \"code\": \"+327\" },\n\n  {\n    \"en\": \"Kenya\",\n    \"cn\": \"肯尼亚\",\n    \"code\": \"+254\" },\n\n  {\n    \"en\": \"Korea\",\n    \"cn\": \"韩国\",\n    \"code\": \"+82\" },\n\n  {\n    \"en\": \"Kuwait\",\n    \"cn\": \"科威特\",\n    \"code\": \"+965\" },\n\n  {\n    \"en\": \"Kyrgyzstan\",\n    \"cn\": \"吉尔吉斯坦\",\n    \"code\": \"+331\" },\n\n  {\n    \"en\": \"Laos\",\n    \"cn\": \"老挝\",\n    \"code\": \"+856\" },\n\n  {\n    \"en\": \"Latvia\",\n    \"cn\": \"拉脱维亚\",\n    \"code\": \"+371\" },\n\n  {\n    \"en\": \"Lebanon\",\n    \"cn\": \"黎巴嫩\",\n    \"code\": \"+961\" },\n\n  {\n    \"en\": \"Lesotho\",\n    \"cn\": \"莱索托\",\n    \"code\": \"+266\" },\n\n  {\n    \"en\": \"Liberia\",\n    \"cn\": \"利比里亚\",\n    \"code\": \"+231\" },\n\n  {\n    \"en\": \"Libya\",\n    \"cn\": \"利比亚\",\n    \"code\": \"+218\" },\n\n  {\n    \"en\": \"Liechtenstein\",\n    \"cn\": \"列支敦士登\",\n    \"code\": \"+423\" },\n\n  {\n    \"en\": \"Lithuania\",\n    \"cn\": \"立陶宛\",\n    \"code\": \"+370\" },\n\n  {\n    \"en\": \"Luxembourg\",\n    \"cn\": \"卢森堡\",\n    \"code\": \"+352\" },\n\n  {\n    \"en\": \"Macao\",\n    \"cn\": \"澳门\",\n    \"code\": \"+853\" },\n\n  {\n    \"en\": \"Madagascar\",\n    \"cn\": \"马达加斯加\",\n    \"code\": \"+261\" },\n\n  {\n    \"en\": \"Malawi\",\n    \"cn\": \"马拉维\",\n    \"code\": \"+265\" },\n\n  {\n    \"en\": \"Malaysia\",\n    \"cn\": \"马来西亚\",\n    \"code\": \"+60\" },\n\n  {\n    \"en\": \"Maldives\",\n    \"cn\": \"马尔代夫\",\n    \"code\": \"+960\" },\n\n  {\n    \"en\": \"Mali\",\n    \"cn\": \"马里\",\n    \"code\": \"+223\" },\n\n  {\n    \"en\": \"Malta\",\n    \"cn\": \"马耳他\",\n    \"code\": \"+356\" },\n\n  {\n    \"en\": \"Mariana Is\",\n    \"cn\": \"马里亚那群岛\",\n    \"code\": \"+1670\" },\n\n  {\n    \"en\": \"Martinique\",\n    \"cn\": \"马提尼克\",\n    \"code\": \"+596\" },\n\n  {\n    \"en\": \"Mauritius\",\n    \"cn\": \"毛里求斯\",\n    \"code\": \"+230\" },\n\n  {\n    \"en\": \"Mexico\",\n    \"cn\": \"墨西哥\",\n    \"code\": \"+52\" },\n\n  {\n    \"en\": \"Moldova\",\n    \"cn\": \"摩尔多瓦\",\n    \"code\": \"+373\" },\n\n  {\n    \"en\": \"Monaco\",\n    \"cn\": \"摩纳哥\",\n    \"code\": \"+377\" },\n\n  {\n    \"en\": \"Mongolia\",\n    \"cn\": \"蒙古\",\n    \"code\": \"+976\" },\n\n  {\n    \"en\": \"Montserrat Is\",\n    \"cn\": \"蒙特塞拉特岛\",\n    \"code\": \"+1664\" },\n\n  {\n    \"en\": \"Morocco\",\n    \"cn\": \"摩洛哥\",\n    \"code\": \"+212\" },\n\n  {\n    \"en\": \"Mozambique\",\n    \"cn\": \"莫桑比克\",\n    \"code\": \"+258\" },\n\n  {\n    \"en\": \"Namibia\",\n    \"cn\": \"纳米比亚\",\n    \"code\": \"+264\" },\n\n  {\n    \"en\": \"Nauru\",\n    \"cn\": \"瑙鲁\",\n    \"code\": \"+674\" },\n\n  {\n    \"en\": \"Nepal\",\n    \"cn\": \"尼泊尔\",\n    \"code\": \"+977\" },\n\n  {\n    \"en\": \"Netheriands Antilles\",\n    \"cn\": \"荷属安的列斯\",\n    \"code\": \"+599\" },\n\n  {\n    \"en\": \"Netherlands\",\n    \"cn\": \"荷兰\",\n    \"code\": \"+31\" },\n\n  {\n    \"en\": \"New Zealand\",\n    \"cn\": \"新西兰\",\n    \"code\": \"+64\" },\n\n  {\n    \"en\": \"Nicaragua\",\n    \"cn\": \"尼加拉瓜\",\n    \"code\": \"+505\" },\n\n  {\n    \"en\": \"Niger\",\n    \"cn\": \"尼日尔\",\n    \"code\": \"+227\" },\n\n  {\n    \"en\": \"Nigeria\",\n    \"cn\": \"尼日利亚\",\n    \"code\": \"+234\" },\n\n  {\n    \"en\": \"North Korea\",\n    \"cn\": \"朝鲜\",\n    \"code\": \"+850\" },\n\n  {\n    \"en\": \"Norway\",\n    \"cn\": \"挪威\",\n    \"code\": \"+47\" },\n\n  {\n    \"en\": \"Oman\",\n    \"cn\": \"阿曼\",\n    \"code\": \"+968\" },\n\n  {\n    \"en\": \"Pakistan\",\n    \"cn\": \"巴基斯坦\",\n    \"code\": \"+92\" },\n\n  {\n    \"en\": \"Panama\",\n    \"cn\": \"巴拿马\",\n    \"code\": \"+507\" },\n\n  {\n    \"en\": \"Papua New Cuinea\",\n    \"cn\": \"巴布亚新几内亚\",\n    \"code\": \"+675\" },\n\n  {\n    \"en\": \"Paraguay\",\n    \"cn\": \"巴拉圭\",\n    \"code\": \"+595\" },\n\n  {\n    \"en\": \"Peru\",\n    \"cn\": \"秘鲁\",\n    \"code\": \"+51\" },\n\n  {\n    \"en\": \"Philippines\",\n    \"cn\": \"菲律宾\",\n    \"code\": \"+63\" },\n\n  {\n    \"en\": \"Poland\",\n    \"cn\": \"波兰\",\n    \"code\": \"+48\" },\n\n  {\n    \"en\": \"Portugal\",\n    \"cn\": \"葡萄牙\",\n    \"code\": \"+351\" },\n\n  {\n    \"en\": \"Puerto Rico\",\n    \"cn\": \"波多黎各\",\n    \"code\": \"+1787\" },\n\n  {\n    \"en\": \"Qatar\",\n    \"cn\": \"卡塔尔\",\n    \"code\": \"+974\" },\n\n  {\n    \"en\": \"Reunion\",\n    \"cn\": \"留尼旺\",\n    \"code\": \"+262\" },\n\n  {\n    \"en\": \"Romania\",\n    \"cn\": \"罗马尼亚\",\n    \"code\": \"+40\" },\n\n  {\n    \"en\": \"Russia\",\n    \"cn\": \"俄罗斯\",\n    \"code\": \"+7\" },\n\n  {\n    \"en\": \"Saint Lueia\",\n    \"cn\": \"圣卢西亚\",\n    \"code\": \"+1758\" },\n\n  {\n    \"en\": \"Saint Vincent\",\n    \"cn\": \"圣文森特岛\",\n    \"code\": \"+1784\" },\n\n  {\n    \"en\": \"Samoa Eastern\",\n    \"cn\": \"东萨摩亚(美)\",\n    \"code\": \"+684\" },\n\n  {\n    \"en\": \"Samoa Western\",\n    \"cn\": \"西萨摩亚\",\n    \"code\": \"+685\" },\n\n  {\n    \"en\": \"San Marino\",\n    \"cn\": \"圣马力诺\",\n    \"code\": \"+378\" },\n\n  {\n    \"en\": \"Sao Tome and Principe\",\n    \"cn\": \"圣多美和普林西比\",\n    \"code\": \"+239\" },\n\n  {\n    \"en\": \"Saudi Arabia\",\n    \"cn\": \"沙特阿拉伯\",\n    \"code\": \"+966\" },\n\n  {\n    \"en\": \"Senegal\",\n    \"cn\": \"塞内加尔\",\n    \"code\": \"+221\" },\n\n  {\n    \"en\": \"Seychelles\",\n    \"cn\": \"塞舌尔\",\n    \"code\": \"+248\" },\n\n  {\n    \"en\": \"Sierra Leone\",\n    \"cn\": \"塞拉利昂\",\n    \"code\": \"+232\" },\n\n  {\n    \"en\": \"Singapore\",\n    \"cn\": \"新加坡\",\n    \"code\": \"+65\" },\n\n  {\n    \"en\": \"Slovakia\",\n    \"cn\": \"斯洛伐克\",\n    \"code\": \"+421\" },\n\n  {\n    \"en\": \"Slovenia\",\n    \"cn\": \"斯洛文尼亚\",\n    \"code\": \"+386\" },\n\n  {\n    \"en\": \"Solomon Is\",\n    \"cn\": \"所罗门群岛\",\n    \"code\": \"+677\" },\n\n  {\n    \"en\": \"Somali\",\n    \"cn\": \"索马里\",\n    \"code\": \"+252\" },\n\n  {\n    \"en\": \"South Africa\",\n    \"cn\": \"南非\",\n    \"code\": \"+27\" },\n\n  {\n    \"en\": \"Spain\",\n    \"cn\": \"西班牙\",\n    \"code\": \"+34\" },\n\n  {\n    \"en\": \"SriLanka\",\n    \"cn\": \"斯里兰卡\",\n    \"code\": \"+94\" },\n\n  {\n    \"en\": \"St.Lucia\",\n    \"cn\": \"圣卢西亚\",\n    \"code\": \"+1758\" },\n\n  {\n    \"en\": \"St.Vincent\",\n    \"cn\": \"圣文森特\",\n    \"code\": \"+1784\" },\n\n  {\n    \"en\": \"Sudan\",\n    \"cn\": \"苏丹\",\n    \"code\": \"+249\" },\n\n  {\n    \"en\": \"Suriname\",\n    \"cn\": \"苏里南\",\n    \"code\": \"+597\" },\n\n  {\n    \"en\": \"Swaziland\",\n    \"cn\": \"斯威士兰\",\n    \"code\": \"+268\" },\n\n  {\n    \"en\": \"Sweden\",\n    \"cn\": \"瑞典\",\n    \"code\": \"+46\" },\n\n  {\n    \"en\": \"Switzerland\",\n    \"cn\": \"瑞士\",\n    \"code\": \"+41\" },\n\n  {\n    \"en\": \"Syria\",\n    \"cn\": \"叙利亚\",\n    \"code\": \"+963\" },\n\n  {\n    \"en\": \"Taiwan\",\n    \"cn\": \"台湾省\",\n    \"code\": \"+886\" },\n\n  {\n    \"en\": \"Tajikstan\",\n    \"cn\": \"塔吉克斯坦\",\n    \"code\": \"+992\" },\n\n  {\n    \"en\": \"Tanzania\",\n    \"cn\": \"坦桑尼亚\",\n    \"code\": \"+255\" },\n\n  {\n    \"en\": \"Thailand\",\n    \"cn\": \"泰国\",\n    \"code\": \"+66\" },\n\n  {\n    \"en\": \"Togo\",\n    \"cn\": \"多哥\",\n    \"code\": \"+228\" },\n\n  {\n    \"en\": \"Tonga\",\n    \"cn\": \"汤加\",\n    \"code\": \"+676\" },\n\n  {\n    \"en\": \"Trinidad and Tobago\",\n    \"cn\": \"特立尼达和多巴哥\",\n    \"code\": \"+1809\" },\n\n  {\n    \"en\": \"Tunisia\",\n    \"cn\": \"突尼斯\",\n    \"code\": \"+216\" },\n\n  {\n    \"en\": \"Turkey\",\n    \"cn\": \"土耳其\",\n    \"code\": \"+90\" },\n\n  {\n    \"en\": \"Turkmenistan\",\n    \"cn\": \"土库曼斯坦\",\n    \"code\": \"+993\" },\n\n  {\n    \"en\": \"Uganda\",\n    \"cn\": \"乌干达\",\n    \"code\": \"+256\" },\n\n  {\n    \"en\": \"Ukraine\",\n    \"cn\": \"乌克兰\",\n    \"code\": \"+380\" },\n\n  {\n    \"en\": \"United Arab Emirates\",\n    \"cn\": \"阿拉伯联合酋长国\",\n    \"code\": \"+971\" },\n\n  {\n    \"en\": \"United Kiongdom\",\n    \"cn\": \"英国\",\n    \"code\": \"+44\" },\n\n  {\n    \"en\": \"United States of America\",\n    \"cn\": \"美国\",\n    \"code\": \"+1\" },\n\n  {\n    \"en\": \"Uruguay\",\n    \"cn\": \"乌拉圭\",\n    \"code\": \"+598\" },\n\n  {\n    \"en\": \"Uzbekistan\",\n    \"cn\": \"乌兹别克斯坦\",\n    \"code\": \"+233\" },\n\n  {\n    \"en\": \"Venezuela\",\n    \"cn\": \"委内瑞拉\",\n    \"code\": \"+58\" },\n\n  {\n    \"en\": \"Vietnam\",\n    \"cn\": \"越南\",\n    \"code\": \"+84\" },\n\n  {\n    \"en\": \"Yemen\",\n    \"cn\": \"也门\",\n    \"code\": \"+967\" },\n\n  {\n    \"en\": \"Yugoslavia\",\n    \"cn\": \"南斯拉夫\",\n    \"code\": \"+381\" },\n\n  {\n    \"en\": \"Zimbabwe\",\n    \"cn\": \"津巴布韦\",\n    \"code\": \"+263\" },\n\n  {\n    \"en\": \"Zaire\",\n    \"cn\": \"扎伊尔\",\n    \"code\": \"+243\" },\n\n  {\n    \"en\": \"Zambia\",\n    \"cn\": \"赞比亚\",\n    \"code\": \"+260\" }] };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///227\n");

/***/ }),

/***/ 242:
/*!*******************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/common/graceChecker.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" /**\r\n              数据验证（表单验证）\r\n              来自 grace.hcoder.net \r\n              作者 hcoder 深海\r\n              */\nmodule.exports = {\n  error: '',\n  check: function check(data, rule) {\n    for (var i = 0; i < rule.length; i++) {\n      if (!rule[i].checkType) {return true;}\n      if (!rule[i].name) {return true;}\n      if (!rule[i].errorMsg) {return true;}\n      if (!data[rule[i].name]) {this.error = rule[i].errorMsg;return false;}\n      switch (rule[i].checkType) {\n        case 'string':\n          var reg = new RegExp('^.{' + rule[i].checkRule + '}$');\n          if (!reg.test(data[rule[i].name])) {this.error = rule[i].errorMsg;return false;}\n          break;\n        case 'int':\n          var reg = new RegExp('^(-[1-9]|[1-9])[0-9]{' + rule[i].checkRule + '}$');\n          if (!reg.test(data[rule[i].name])) {this.error = rule[i].errorMsg;return false;}\n          break;\n          break;\n        case 'between':\n          if (!this.isNumber(data[rule[i].name])) {\n            this.error = rule[i].errorMsg;\n            return false;\n          }\n          var minMax = rule[i].checkRule.split(',');\n          minMax[0] = Number(minMax[0]);\n          minMax[1] = Number(minMax[1]);\n          if (data[rule[i].name] > minMax[1] || data[rule[i].name] < minMax[0]) {\n            this.error = rule[i].errorMsg;\n            return false;\n          }\n          break;\n        case 'betweenD':\n          var reg = /^-?[1-9][0-9]?$/;\n          if (!reg.test(data[rule[i].name])) {this.error = rule[i].errorMsg;return false;}\n          var minMax = rule[i].checkRule.split(',');\n          minMax[0] = Number(minMax[0]);\n          minMax[1] = Number(minMax[1]);\n          if (data[rule[i].name] > minMax[1] || data[rule[i].name] < minMax[0]) {\n            this.error = rule[i].errorMsg;\n            return false;\n          }\n          break;\n        case 'betweenF':\n          var reg = /^-?[0-9][0-9]?.+[0-9]+$/;\n          if (!reg.test(data[rule[i].name])) {this.error = rule[i].errorMsg;return false;}\n          var minMax = rule[i].checkRule.split(',');\n          minMax[0] = Number(minMax[0]);\n          minMax[1] = Number(minMax[1]);\n          if (data[rule[i].name] > minMax[1] || data[rule[i].name] < minMax[0]) {\n            this.error = rule[i].errorMsg;\n            return false;\n          }\n          break;\n        case 'same':\n          if (data[rule[i].name] != rule[i].checkRule) {this.error = rule[i].errorMsg;return false;}\n          break;\n        case 'notsame':\n          if (data[rule[i].name] == rule[i].checkRule) {this.error = rule[i].errorMsg;return false;}\n          break;\n        case 'email':\n          var reg = /^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/;\n          if (!reg.test(data[rule[i].name])) {this.error = rule[i].errorMsg;return false;}\n          break;\n        case 'phoneno':\n          var reg = /^1[0-9]{10,10}$/;\n          if (!reg.test(data[rule[i].name])) {this.error = rule[i].errorMsg;return false;}\n          break;\n        case 'zipcode':\n          var reg = /^[0-9]{6}$/;\n          if (!reg.test(data[rule[i].name])) {this.error = rule[i].errorMsg;return false;}\n          break;\n        case 'reg':\n          var reg = new RegExp(rule[i].checkRule);\n          if (!reg.test(data[rule[i].name])) {this.error = rule[i].errorMsg;return false;}\n          break;\n        case 'in':\n          if (rule[i].checkRule.indexOf(data[rule[i].name]) == -1) {\n            this.error = rule[i].errorMsg;return false;\n          }\n          break;\n        case 'notnull':\n          if (data[rule[i].name] == null || data[rule[i].name].length < 1) {this.error = rule[i].errorMsg;return false;}\n          break;}\n\n    }\n    return true;\n  },\n  isNumber: function isNumber(checkVal) {\n    var reg = /^-?[1-9][0-9]?.?[0-9]*$/;\n    return reg.test(checkVal);\n  } };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///242\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.10\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a speical value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack becaues all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.10';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\r\n    console.error(err);\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope) {\r\n        return this.$scope[method](args)\r\n      }\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 4:
/*!*******************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/pages.json ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 429:
/*!****************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-qrcode/qrcode.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var QRCode = {};\n(function () {\n  /**\r\n               * 获取单个字符的utf8编码\r\n               * unicode BMP平面约65535个字符\r\n               * @param {num} code\r\n               * return {array}\r\n               */\n  function unicodeFormat8(code) {\n    // 1 byte\n    var c0, c1, c2;\n    if (code < 128) {\n      return [code];\n      // 2 bytes\n    } else if (code < 2048) {\n      c0 = 192 + (code >> 6);\n      c1 = 128 + (code & 63);\n      return [c0, c1];\n      // 3 bytes\n    } else {\n      c0 = 224 + (code >> 12);\n      c1 = 128 + (code >> 6 & 63);\n      c2 = 128 + (code & 63);\n      return [c0, c1, c2];\n    }\n  }\n  /**\r\n     * 获取字符串的utf8编码字节串\r\n     * @param {string} string\r\n     * @return {array}\r\n     */\n  function getUTF8Bytes(string) {\n    var utf8codes = [];\n    for (var i = 0; i < string.length; i++) {\n      var code = string.charCodeAt(i);\n      var utf8 = unicodeFormat8(code);\n      for (var j = 0; j < utf8.length; j++) {\n        utf8codes.push(utf8[j]);\n      }\n    }\n    return utf8codes;\n  }\n  /**\r\n     * 二维码算法实现\r\n     * @param {string} data              要编码的信息字符串\r\n     * @param {num} errorCorrectLevel 纠错等级\r\n     */\n  function QRCodeAlg(data, errorCorrectLevel) {\n    this.typeNumber = -1; //版本\n    this.errorCorrectLevel = errorCorrectLevel;\n    this.modules = null; //二维矩阵，存放最终结果\n    this.moduleCount = 0; //矩阵大小\n    this.dataCache = null; //数据缓存\n    this.rsBlocks = null; //版本数据信息\n    this.totalDataCount = -1; //可使用的数据量\n    this.data = data;\n    this.utf8bytes = getUTF8Bytes(data);\n    this.make();\n  }\n  QRCodeAlg.prototype = {\n    constructor: QRCodeAlg,\n    /**\r\n                             * 获取二维码矩阵大小\r\n                             * @return {num} 矩阵大小\r\n                             */\n    getModuleCount: function getModuleCount() {\n      return this.moduleCount;\n    },\n    /**\r\n        * 编码\r\n        */\n    make: function make() {\n      this.getRightType();\n      this.dataCache = this.createData();\n      this.createQrcode();\n    },\n    /**\r\n        * 设置二位矩阵功能图形\r\n        * @param  {bool} test 表示是否在寻找最好掩膜阶段\r\n        * @param  {num} maskPattern 掩膜的版本\r\n        */\n    makeImpl: function makeImpl(maskPattern) {\n      this.moduleCount = this.typeNumber * 4 + 17;\n      this.modules = new Array(this.moduleCount);\n      for (var row = 0; row < this.moduleCount; row++) {\n        this.modules[row] = new Array(this.moduleCount);\n      }\n      this.setupPositionProbePattern(0, 0);\n      this.setupPositionProbePattern(this.moduleCount - 7, 0);\n      this.setupPositionProbePattern(0, this.moduleCount - 7);\n      this.setupPositionAdjustPattern();\n      this.setupTimingPattern();\n      this.setupTypeInfo(true, maskPattern);\n      if (this.typeNumber >= 7) {\n        this.setupTypeNumber(true);\n      }\n      this.mapData(this.dataCache, maskPattern);\n    },\n    /**\r\n        * 设置二维码的位置探测图形\r\n        * @param  {num} row 探测图形的中心横坐标\r\n        * @param  {num} col 探测图形的中心纵坐标\r\n        */\n    setupPositionProbePattern: function setupPositionProbePattern(row, col) {\n      for (var r = -1; r <= 7; r++) {\n        if (row + r <= -1 || this.moduleCount <= row + r) continue;\n        for (var c = -1; c <= 7; c++) {\n          if (col + c <= -1 || this.moduleCount <= col + c) continue;\n          if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n            this.modules[row + r][col + c] = true;\n          } else {\n            this.modules[row + r][col + c] = false;\n          }\n        }\n      }\n    },\n    /**\r\n        * 创建二维码\r\n        * @return {[type]} [description]\r\n        */\n    createQrcode: function createQrcode() {\n      var minLostPoint = 0;\n      var pattern = 0;\n      var bestModules = null;\n      for (var i = 0; i < 8; i++) {\n        this.makeImpl(i);\n        var lostPoint = QRUtil.getLostPoint(this);\n        if (i == 0 || minLostPoint > lostPoint) {\n          minLostPoint = lostPoint;\n          pattern = i;\n          bestModules = this.modules;\n        }\n      }\n      this.modules = bestModules;\n      this.setupTypeInfo(false, pattern);\n      if (this.typeNumber >= 7) {\n        this.setupTypeNumber(false);\n      }\n    },\n    /**\r\n        * 设置定位图形\r\n        * @return {[type]} [description]\r\n        */\n    setupTimingPattern: function setupTimingPattern() {\n      for (var r = 8; r < this.moduleCount - 8; r++) {\n        if (this.modules[r][6] != null) {\n          continue;\n        }\n        this.modules[r][6] = r % 2 == 0;\n        if (this.modules[6][r] != null) {\n          continue;\n        }\n        this.modules[6][r] = r % 2 == 0;\n      }\n    },\n    /**\r\n        * 设置矫正图形\r\n        * @return {[type]} [description]\r\n        */\n    setupPositionAdjustPattern: function setupPositionAdjustPattern() {\n      var pos = QRUtil.getPatternPosition(this.typeNumber);\n      for (var i = 0; i < pos.length; i++) {\n        for (var j = 0; j < pos.length; j++) {\n          var row = pos[i];\n          var col = pos[j];\n          if (this.modules[row][col] != null) {\n            continue;\n          }\n          for (var r = -2; r <= 2; r++) {\n            for (var c = -2; c <= 2; c++) {\n              if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n                this.modules[row + r][col + c] = true;\n              } else {\n                this.modules[row + r][col + c] = false;\n              }\n            }\n          }\n        }\n      }\n    },\n    /**\r\n        * 设置版本信息（7以上版本才有）\r\n        * @param  {bool} test 是否处于判断最佳掩膜阶段\r\n        * @return {[type]}      [description]\r\n        */\n    setupTypeNumber: function setupTypeNumber(test) {\n      var bits = QRUtil.getBCHTypeNumber(this.typeNumber);\n      for (var i = 0; i < 18; i++) {\n        var mod = !test && (bits >> i & 1) == 1;\n        this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n        this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n      }\n    },\n    /**\r\n        * 设置格式信息（纠错等级和掩膜版本）\r\n        * @param  {bool} test\r\n        * @param  {num} maskPattern 掩膜版本\r\n        * @return {}\r\n        */\n    setupTypeInfo: function setupTypeInfo(test, maskPattern) {\n      var data = QRErrorCorrectLevel[this.errorCorrectLevel] << 3 | maskPattern;\n      var bits = QRUtil.getBCHTypeInfo(data);\n      // vertical\n      for (var i = 0; i < 15; i++) {\n        var mod = !test && (bits >> i & 1) == 1;\n        if (i < 6) {\n          this.modules[i][8] = mod;\n        } else if (i < 8) {\n          this.modules[i + 1][8] = mod;\n        } else {\n          this.modules[this.moduleCount - 15 + i][8] = mod;\n        }\n        // horizontal\n        var mod = !test && (bits >> i & 1) == 1;\n        if (i < 8) {\n          this.modules[8][this.moduleCount - i - 1] = mod;\n        } else if (i < 9) {\n          this.modules[8][15 - i - 1 + 1] = mod;\n        } else {\n          this.modules[8][15 - i - 1] = mod;\n        }\n      }\n      // fixed module\n      this.modules[this.moduleCount - 8][8] = !test;\n    },\n    /**\r\n        * 数据编码\r\n        * @return {[type]} [description]\r\n        */\n    createData: function createData() {\n      var buffer = new QRBitBuffer();\n      var lengthBits = this.typeNumber > 9 ? 16 : 8;\n      buffer.put(4, 4); //添加模式\n      buffer.put(this.utf8bytes.length, lengthBits);\n      for (var i = 0, l = this.utf8bytes.length; i < l; i++) {\n        buffer.put(this.utf8bytes[i], 8);\n      }\n      if (buffer.length + 4 <= this.totalDataCount * 8) {\n        buffer.put(0, 4);\n      }\n      // padding\n      while (buffer.length % 8 != 0) {\n        buffer.putBit(false);\n      }\n      // padding\n      while (true) {\n        if (buffer.length >= this.totalDataCount * 8) {\n          break;\n        }\n        buffer.put(QRCodeAlg.PAD0, 8);\n        if (buffer.length >= this.totalDataCount * 8) {\n          break;\n        }\n        buffer.put(QRCodeAlg.PAD1, 8);\n      }\n      return this.createBytes(buffer);\n    },\n    /**\r\n        * 纠错码编码\r\n        * @param  {buffer} buffer 数据编码\r\n        * @return {[type]}\r\n        */\n    createBytes: function createBytes(buffer) {\n      var offset = 0;\n      var maxDcCount = 0;\n      var maxEcCount = 0;\n      var length = this.rsBlock.length / 3;\n      var rsBlocks = new Array();\n      for (var i = 0; i < length; i++) {\n        var count = this.rsBlock[i * 3 + 0];\n        var totalCount = this.rsBlock[i * 3 + 1];\n        var dataCount = this.rsBlock[i * 3 + 2];\n        for (var j = 0; j < count; j++) {\n          rsBlocks.push([dataCount, totalCount]);\n        }\n      }\n      var dcdata = new Array(rsBlocks.length);\n      var ecdata = new Array(rsBlocks.length);\n      for (var r = 0; r < rsBlocks.length; r++) {\n        var dcCount = rsBlocks[r][0];\n        var ecCount = rsBlocks[r][1] - dcCount;\n        maxDcCount = Math.max(maxDcCount, dcCount);\n        maxEcCount = Math.max(maxEcCount, ecCount);\n        dcdata[r] = new Array(dcCount);\n        for (var i = 0; i < dcdata[r].length; i++) {\n          dcdata[r][i] = 0xff & buffer.buffer[i + offset];\n        }\n        offset += dcCount;\n        var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n        var rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);\n        var modPoly = rawPoly.mod(rsPoly);\n        ecdata[r] = new Array(rsPoly.getLength() - 1);\n        for (var i = 0; i < ecdata[r].length; i++) {\n          var modIndex = i + modPoly.getLength() - ecdata[r].length;\n          ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;\n        }\n      }\n      var data = new Array(this.totalDataCount);\n      var index = 0;\n      for (var i = 0; i < maxDcCount; i++) {\n        for (var r = 0; r < rsBlocks.length; r++) {\n          if (i < dcdata[r].length) {\n            data[index++] = dcdata[r][i];\n          }\n        }\n      }\n      for (var i = 0; i < maxEcCount; i++) {\n        for (var r = 0; r < rsBlocks.length; r++) {\n          if (i < ecdata[r].length) {\n            data[index++] = ecdata[r][i];\n          }\n        }\n      }\n      return data;\n\n    },\n    /**\r\n        * 布置模块，构建最终信息\r\n        * @param  {} data\r\n        * @param  {} maskPattern\r\n        * @return {}\r\n        */\n    mapData: function mapData(data, maskPattern) {\n      var inc = -1;\n      var row = this.moduleCount - 1;\n      var bitIndex = 7;\n      var byteIndex = 0;\n      for (var col = this.moduleCount - 1; col > 0; col -= 2) {\n        if (col == 6) col--;\n        while (true) {\n          for (var c = 0; c < 2; c++) {\n            if (this.modules[row][col - c] == null) {\n              var dark = false;\n              if (byteIndex < data.length) {\n                dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n              }\n              var mask = QRUtil.getMask(maskPattern, row, col - c);\n              if (mask) {\n                dark = !dark;\n              }\n              this.modules[row][col - c] = dark;\n              bitIndex--;\n              if (bitIndex == -1) {\n                byteIndex++;\n                bitIndex = 7;\n              }\n            }\n          }\n          row += inc;\n          if (row < 0 || this.moduleCount <= row) {\n            row -= inc;\n            inc = -inc;\n            break;\n          }\n        }\n      }\n    } };\n\n  /**\r\n          * 填充字段\r\n          */\n  QRCodeAlg.PAD0 = 0xEC;\n  QRCodeAlg.PAD1 = 0x11;\n  //---------------------------------------------------------------------\n  // 纠错等级对应的编码\n  //---------------------------------------------------------------------\n  var QRErrorCorrectLevel = [1, 0, 3, 2];\n  //---------------------------------------------------------------------\n  // 掩膜版本\n  //---------------------------------------------------------------------\n  var QRMaskPattern = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7 };\n\n  //---------------------------------------------------------------------\n  // 工具类\n  //---------------------------------------------------------------------\n  var QRUtil = {\n    /*\r\n                 每个版本矫正图形的位置\r\n                  */\n    PATTERN_POSITION_TABLE: [\n    [],\n    [6, 18],\n    [6, 22],\n    [6, 26],\n    [6, 30],\n    [6, 34],\n    [6, 22, 38],\n    [6, 24, 42],\n    [6, 26, 46],\n    [6, 28, 50],\n    [6, 30, 54],\n    [6, 32, 58],\n    [6, 34, 62],\n    [6, 26, 46, 66],\n    [6, 26, 48, 70],\n    [6, 26, 50, 74],\n    [6, 30, 54, 78],\n    [6, 30, 56, 82],\n    [6, 30, 58, 86],\n    [6, 34, 62, 90],\n    [6, 28, 50, 72, 94],\n    [6, 26, 50, 74, 98],\n    [6, 30, 54, 78, 102],\n    [6, 28, 54, 80, 106],\n    [6, 32, 58, 84, 110],\n    [6, 30, 58, 86, 114],\n    [6, 34, 62, 90, 118],\n    [6, 26, 50, 74, 98, 122],\n    [6, 30, 54, 78, 102, 126],\n    [6, 26, 52, 78, 104, 130],\n    [6, 30, 56, 82, 108, 134],\n    [6, 34, 60, 86, 112, 138],\n    [6, 30, 58, 86, 114, 142],\n    [6, 34, 62, 90, 118, 146],\n    [6, 30, 54, 78, 102, 126, 150],\n    [6, 24, 50, 76, 102, 128, 154],\n    [6, 28, 54, 80, 106, 132, 158],\n    [6, 32, 58, 84, 110, 136, 162],\n    [6, 26, 54, 82, 110, 138, 166],\n    [6, 30, 58, 86, 114, 142, 170]],\n\n    G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,\n    G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,\n    G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,\n    /*\r\n                                                             BCH编码格式信息\r\n                                                              */\n    getBCHTypeInfo: function getBCHTypeInfo(data) {\n      var d = data << 10;\n      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n        d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);\n      }\n      return (data << 10 | d) ^ QRUtil.G15_MASK;\n    },\n    /*\r\n       BCH编码版本信息\r\n        */\n    getBCHTypeNumber: function getBCHTypeNumber(data) {\n      var d = data << 12;\n      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n        d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);\n      }\n      return data << 12 | d;\n    },\n    /*\r\n       获取BCH位信息\r\n        */\n    getBCHDigit: function getBCHDigit(data) {\n      var digit = 0;\n      while (data != 0) {\n        digit++;\n        data >>>= 1;\n      }\n      return digit;\n    },\n    /*\r\n       获取版本对应的矫正图形位置\r\n        */\n    getPatternPosition: function getPatternPosition(typeNumber) {\n      return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n    },\n    /*\r\n       掩膜算法\r\n        */\n    getMask: function getMask(maskPattern, i, j) {\n      switch (maskPattern) {\n        case QRMaskPattern.PATTERN000:\n          return (i + j) % 2 == 0;\n        case QRMaskPattern.PATTERN001:\n          return i % 2 == 0;\n        case QRMaskPattern.PATTERN010:\n          return j % 3 == 0;\n        case QRMaskPattern.PATTERN011:\n          return (i + j) % 3 == 0;\n        case QRMaskPattern.PATTERN100:\n          return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n        case QRMaskPattern.PATTERN101:\n          return i * j % 2 + i * j % 3 == 0;\n        case QRMaskPattern.PATTERN110:\n          return (i * j % 2 + i * j % 3) % 2 == 0;\n        case QRMaskPattern.PATTERN111:\n          return (i * j % 3 + (i + j) % 2) % 2 == 0;\n        default:\n          throw new Error(\"bad maskPattern:\" + maskPattern);}\n\n    },\n    /*\r\n       获取RS的纠错多项式\r\n        */\n    getErrorCorrectPolynomial: function getErrorCorrectPolynomial(errorCorrectLength) {\n      var a = new QRPolynomial([1], 0);\n      for (var i = 0; i < errorCorrectLength; i++) {\n        a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));\n      }\n      return a;\n    },\n    /*\r\n       获取评价\r\n        */\n    getLostPoint: function getLostPoint(qrCode) {\n      var moduleCount = qrCode.getModuleCount(),\n      lostPoint = 0,\n      darkCount = 0;\n      for (var row = 0; row < moduleCount; row++) {\n        var sameCount = 0;\n        var head = qrCode.modules[row][0];\n        for (var col = 0; col < moduleCount; col++) {\n          var current = qrCode.modules[row][col];\n          //level 3 评价\n          if (col < moduleCount - 6) {\n            if (current && !qrCode.modules[row][col + 1] && qrCode.modules[row][col + 2] && qrCode.modules[row][col + 3] && qrCode.modules[row][col + 4] && !qrCode.modules[row][col + 5] && qrCode.modules[row][col + 6]) {\n              if (col < moduleCount - 10) {\n                if (qrCode.modules[row][col + 7] && qrCode.modules[row][col + 8] && qrCode.modules[row][col + 9] && qrCode.modules[row][col + 10]) {\n                  lostPoint += 40;\n                }\n              } else if (col > 3) {\n                if (qrCode.modules[row][col - 1] && qrCode.modules[row][col - 2] && qrCode.modules[row][col - 3] && qrCode.modules[row][col - 4]) {\n                  lostPoint += 40;\n                }\n              }\n            }\n          }\n          //level 2 评价\n          if (row < moduleCount - 1 && col < moduleCount - 1) {\n            var count = 0;\n            if (current) count++;\n            if (qrCode.modules[row + 1][col]) count++;\n            if (qrCode.modules[row][col + 1]) count++;\n            if (qrCode.modules[row + 1][col + 1]) count++;\n            if (count == 0 || count == 4) {\n              lostPoint += 3;\n            }\n          }\n          //level 1 评价\n          if (head ^ current) {\n            sameCount++;\n          } else {\n            head = current;\n            if (sameCount >= 5) {\n              lostPoint += 3 + sameCount - 5;\n            }\n            sameCount = 1;\n          }\n          //level 4 评价\n          if (current) {\n            darkCount++;\n          }\n        }\n      }\n      for (var col = 0; col < moduleCount; col++) {\n        var sameCount = 0;\n        var head = qrCode.modules[0][col];\n        for (var row = 0; row < moduleCount; row++) {\n          var current = qrCode.modules[row][col];\n          //level 3 评价\n          if (row < moduleCount - 6) {\n            if (current && !qrCode.modules[row + 1][col] && qrCode.modules[row + 2][col] && qrCode.modules[row + 3][col] && qrCode.modules[row + 4][col] && !qrCode.modules[row + 5][col] && qrCode.modules[row + 6][col]) {\n              if (row < moduleCount - 10) {\n                if (qrCode.modules[row + 7][col] && qrCode.modules[row + 8][col] && qrCode.modules[row + 9][col] && qrCode.modules[row + 10][col]) {\n                  lostPoint += 40;\n                }\n              } else if (row > 3) {\n                if (qrCode.modules[row - 1][col] && qrCode.modules[row - 2][col] && qrCode.modules[row - 3][col] && qrCode.modules[row - 4][col]) {\n                  lostPoint += 40;\n                }\n              }\n            }\n          }\n          //level 1 评价\n          if (head ^ current) {\n            sameCount++;\n          } else {\n            head = current;\n            if (sameCount >= 5) {\n              lostPoint += 3 + sameCount - 5;\n            }\n            sameCount = 1;\n          }\n        }\n      }\n      // LEVEL4\n      var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n      lostPoint += ratio * 10;\n      return lostPoint;\n    } };\n\n\n  //---------------------------------------------------------------------\n  // QRMath使用的数学工具\n  //---------------------------------------------------------------------\n  var QRMath = {\n    /*\r\n                 将n转化为a^m\r\n                  */\n    glog: function glog(n) {\n      if (n < 1) {\n        throw new Error(\"glog(\" + n + \")\");\n      }\n      return QRMath.LOG_TABLE[n];\n    },\n    /*\r\n       将a^m转化为n\r\n        */\n    gexp: function gexp(n) {\n      while (n < 0) {\n        n += 255;\n      }\n      while (n >= 256) {\n        n -= 255;\n      }\n      return QRMath.EXP_TABLE[n];\n    },\n    EXP_TABLE: new Array(256),\n    LOG_TABLE: new Array(256) };\n\n\n  for (var i = 0; i < 8; i++) {\n    QRMath.EXP_TABLE[i] = 1 << i;\n  }\n  for (var i = 8; i < 256; i++) {\n    QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];\n  }\n  for (var i = 0; i < 255; i++) {\n    QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;\n  }\n  //---------------------------------------------------------------------\n  // QRPolynomial 多项式\n  //---------------------------------------------------------------------\n  /**\r\n   * 多项式类\r\n   * @param {Array} num   系数\r\n   * @param {num} shift a^shift\r\n   */\n  function QRPolynomial(num, shift) {\n    if (num.length == undefined) {\n      throw new Error(num.length + \"/\" + shift);\n    }\n    var offset = 0;\n    while (offset < num.length && num[offset] == 0) {\n      offset++;\n    }\n    this.num = new Array(num.length - offset + shift);\n    for (var i = 0; i < num.length - offset; i++) {\n      this.num[i] = num[i + offset];\n    }\n  }\n  QRPolynomial.prototype = {\n    get: function get(index) {\n      return this.num[index];\n    },\n    getLength: function getLength() {\n      return this.num.length;\n    },\n    /**\r\n        * 多项式乘法\r\n        * @param  {QRPolynomial} e 被乘多项式\r\n        * @return {[type]}   [description]\r\n        */\n    multiply: function multiply(e) {\n      var num = new Array(this.getLength() + e.getLength() - 1);\n      for (var i = 0; i < this.getLength(); i++) {\n        for (var j = 0; j < e.getLength(); j++) {\n          num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i)) + QRMath.glog(e.get(j)));\n        }\n      }\n      return new QRPolynomial(num, 0);\n    },\n    /**\r\n        * 多项式模运算\r\n        * @param  {QRPolynomial} e 模多项式\r\n        * @return {}\r\n        */\n    mod: function mod(e) {\n      var tl = this.getLength(),\n      el = e.getLength();\n      if (tl - el < 0) {\n        return this;\n      }\n      var num = new Array(tl);\n      for (var i = 0; i < tl; i++) {\n        num[i] = this.get(i);\n      }\n      while (num.length >= el) {\n        var ratio = QRMath.glog(num[0]) - QRMath.glog(e.get(0));\n\n        for (var i = 0; i < e.getLength(); i++) {\n          num[i] ^= QRMath.gexp(QRMath.glog(e.get(i)) + ratio);\n        }\n        while (num[0] == 0) {\n          num.shift();\n        }\n      }\n      return new QRPolynomial(num, 0);\n    } };\n\n\n  //---------------------------------------------------------------------\n  // RS_BLOCK_TABLE\n  //---------------------------------------------------------------------\n  /*\r\n  二维码各个版本信息[块数, 每块中的数据块数, 每块中的信息块数]\r\n   */\n  var RS_BLOCK_TABLE = [\n  // L\n  // M\n  // Q\n  // H\n  // 1\n  [1, 26, 19],\n  [1, 26, 16],\n  [1, 26, 13],\n  [1, 26, 9],\n\n  // 2\n  [1, 44, 34],\n  [1, 44, 28],\n  [1, 44, 22],\n  [1, 44, 16],\n\n  // 3\n  [1, 70, 55],\n  [1, 70, 44],\n  [2, 35, 17],\n  [2, 35, 13],\n\n  // 4\n  [1, 100, 80],\n  [2, 50, 32],\n  [2, 50, 24],\n  [4, 25, 9],\n\n  // 5\n  [1, 134, 108],\n  [2, 67, 43],\n  [2, 33, 15, 2, 34, 16],\n  [2, 33, 11, 2, 34, 12],\n\n  // 6\n  [2, 86, 68],\n  [4, 43, 27],\n  [4, 43, 19],\n  [4, 43, 15],\n\n  // 7\n  [2, 98, 78],\n  [4, 49, 31],\n  [2, 32, 14, 4, 33, 15],\n  [4, 39, 13, 1, 40, 14],\n\n  // 8\n  [2, 121, 97],\n  [2, 60, 38, 2, 61, 39],\n  [4, 40, 18, 2, 41, 19],\n  [4, 40, 14, 2, 41, 15],\n\n  // 9\n  [2, 146, 116],\n  [3, 58, 36, 2, 59, 37],\n  [4, 36, 16, 4, 37, 17],\n  [4, 36, 12, 4, 37, 13],\n\n  // 10\n  [2, 86, 68, 2, 87, 69],\n  [4, 69, 43, 1, 70, 44],\n  [6, 43, 19, 2, 44, 20],\n  [6, 43, 15, 2, 44, 16],\n\n  // 11\n  [4, 101, 81],\n  [1, 80, 50, 4, 81, 51],\n  [4, 50, 22, 4, 51, 23],\n  [3, 36, 12, 8, 37, 13],\n\n  // 12\n  [2, 116, 92, 2, 117, 93],\n  [6, 58, 36, 2, 59, 37],\n  [4, 46, 20, 6, 47, 21],\n  [7, 42, 14, 4, 43, 15],\n\n  // 13\n  [4, 133, 107],\n  [8, 59, 37, 1, 60, 38],\n  [8, 44, 20, 4, 45, 21],\n  [12, 33, 11, 4, 34, 12],\n\n  // 14\n  [3, 145, 115, 1, 146, 116],\n  [4, 64, 40, 5, 65, 41],\n  [11, 36, 16, 5, 37, 17],\n  [11, 36, 12, 5, 37, 13],\n\n  // 15\n  [5, 109, 87, 1, 110, 88],\n  [5, 65, 41, 5, 66, 42],\n  [5, 54, 24, 7, 55, 25],\n  [11, 36, 12],\n\n  // 16\n  [5, 122, 98, 1, 123, 99],\n  [7, 73, 45, 3, 74, 46],\n  [15, 43, 19, 2, 44, 20],\n  [3, 45, 15, 13, 46, 16],\n\n  // 17\n  [1, 135, 107, 5, 136, 108],\n  [10, 74, 46, 1, 75, 47],\n  [1, 50, 22, 15, 51, 23],\n  [2, 42, 14, 17, 43, 15],\n\n  // 18\n  [5, 150, 120, 1, 151, 121],\n  [9, 69, 43, 4, 70, 44],\n  [17, 50, 22, 1, 51, 23],\n  [2, 42, 14, 19, 43, 15],\n\n  // 19\n  [3, 141, 113, 4, 142, 114],\n  [3, 70, 44, 11, 71, 45],\n  [17, 47, 21, 4, 48, 22],\n  [9, 39, 13, 16, 40, 14],\n\n  // 20\n  [3, 135, 107, 5, 136, 108],\n  [3, 67, 41, 13, 68, 42],\n  [15, 54, 24, 5, 55, 25],\n  [15, 43, 15, 10, 44, 16],\n\n  // 21\n  [4, 144, 116, 4, 145, 117],\n  [17, 68, 42],\n  [17, 50, 22, 6, 51, 23],\n  [19, 46, 16, 6, 47, 17],\n\n  // 22\n  [2, 139, 111, 7, 140, 112],\n  [17, 74, 46],\n  [7, 54, 24, 16, 55, 25],\n  [34, 37, 13],\n\n  // 23\n  [4, 151, 121, 5, 152, 122],\n  [4, 75, 47, 14, 76, 48],\n  [11, 54, 24, 14, 55, 25],\n  [16, 45, 15, 14, 46, 16],\n\n  // 24\n  [6, 147, 117, 4, 148, 118],\n  [6, 73, 45, 14, 74, 46],\n  [11, 54, 24, 16, 55, 25],\n  [30, 46, 16, 2, 47, 17],\n\n  // 25\n  [8, 132, 106, 4, 133, 107],\n  [8, 75, 47, 13, 76, 48],\n  [7, 54, 24, 22, 55, 25],\n  [22, 45, 15, 13, 46, 16],\n\n  // 26\n  [10, 142, 114, 2, 143, 115],\n  [19, 74, 46, 4, 75, 47],\n  [28, 50, 22, 6, 51, 23],\n  [33, 46, 16, 4, 47, 17],\n\n  // 27\n  [8, 152, 122, 4, 153, 123],\n  [22, 73, 45, 3, 74, 46],\n  [8, 53, 23, 26, 54, 24],\n  [12, 45, 15, 28, 46, 16],\n\n  // 28\n  [3, 147, 117, 10, 148, 118],\n  [3, 73, 45, 23, 74, 46],\n  [4, 54, 24, 31, 55, 25],\n  [11, 45, 15, 31, 46, 16],\n\n  // 29\n  [7, 146, 116, 7, 147, 117],\n  [21, 73, 45, 7, 74, 46],\n  [1, 53, 23, 37, 54, 24],\n  [19, 45, 15, 26, 46, 16],\n\n  // 30\n  [5, 145, 115, 10, 146, 116],\n  [19, 75, 47, 10, 76, 48],\n  [15, 54, 24, 25, 55, 25],\n  [23, 45, 15, 25, 46, 16],\n\n  // 31\n  [13, 145, 115, 3, 146, 116],\n  [2, 74, 46, 29, 75, 47],\n  [42, 54, 24, 1, 55, 25],\n  [23, 45, 15, 28, 46, 16],\n\n  // 32\n  [17, 145, 115],\n  [10, 74, 46, 23, 75, 47],\n  [10, 54, 24, 35, 55, 25],\n  [19, 45, 15, 35, 46, 16],\n\n  // 33\n  [17, 145, 115, 1, 146, 116],\n  [14, 74, 46, 21, 75, 47],\n  [29, 54, 24, 19, 55, 25],\n  [11, 45, 15, 46, 46, 16],\n\n  // 34\n  [13, 145, 115, 6, 146, 116],\n  [14, 74, 46, 23, 75, 47],\n  [44, 54, 24, 7, 55, 25],\n  [59, 46, 16, 1, 47, 17],\n\n  // 35\n  [12, 151, 121, 7, 152, 122],\n  [12, 75, 47, 26, 76, 48],\n  [39, 54, 24, 14, 55, 25],\n  [22, 45, 15, 41, 46, 16],\n\n  // 36\n  [6, 151, 121, 14, 152, 122],\n  [6, 75, 47, 34, 76, 48],\n  [46, 54, 24, 10, 55, 25],\n  [2, 45, 15, 64, 46, 16],\n\n  // 37\n  [17, 152, 122, 4, 153, 123],\n  [29, 74, 46, 14, 75, 47],\n  [49, 54, 24, 10, 55, 25],\n  [24, 45, 15, 46, 46, 16],\n\n  // 38\n  [4, 152, 122, 18, 153, 123],\n  [13, 74, 46, 32, 75, 47],\n  [48, 54, 24, 14, 55, 25],\n  [42, 45, 15, 32, 46, 16],\n\n  // 39\n  [20, 147, 117, 4, 148, 118],\n  [40, 75, 47, 7, 76, 48],\n  [43, 54, 24, 22, 55, 25],\n  [10, 45, 15, 67, 46, 16],\n\n  // 40\n  [19, 148, 118, 6, 149, 119],\n  [18, 75, 47, 31, 76, 48],\n  [34, 54, 24, 34, 55, 25],\n  [20, 45, 15, 61, 46, 16]];\n\n\n  /**\r\n                              * 根据数据获取对应版本\r\n                              * @return {[type]} [description]\r\n                              */\n  QRCodeAlg.prototype.getRightType = function () {\n    for (var typeNumber = 1; typeNumber < 41; typeNumber++) {\n      var rsBlock = RS_BLOCK_TABLE[(typeNumber - 1) * 4 + this.errorCorrectLevel];\n      if (rsBlock == undefined) {\n        throw new Error(\"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectLevel:\" + this.errorCorrectLevel);\n      }\n      var length = rsBlock.length / 3;\n      var totalDataCount = 0;\n      for (var i = 0; i < length; i++) {\n        var count = rsBlock[i * 3 + 0];\n        var dataCount = rsBlock[i * 3 + 2];\n        totalDataCount += dataCount * count;\n      }\n      var lengthBytes = typeNumber > 9 ? 2 : 1;\n      if (this.utf8bytes.length + lengthBytes < totalDataCount || typeNumber == 40) {\n        this.typeNumber = typeNumber;\n        this.rsBlock = rsBlock;\n        this.totalDataCount = totalDataCount;\n        break;\n      }\n    }\n  };\n\n  //---------------------------------------------------------------------\n  // QRBitBuffer\n  //---------------------------------------------------------------------\n  function QRBitBuffer() {\n    this.buffer = new Array();\n    this.length = 0;\n  }\n  QRBitBuffer.prototype = {\n    get: function get(index) {\n      var bufIndex = Math.floor(index / 8);\n      return this.buffer[bufIndex] >>> 7 - index % 8 & 1;\n    },\n    put: function put(num, length) {\n      for (var i = 0; i < length; i++) {\n        this.putBit(num >>> length - i - 1 & 1);\n      }\n    },\n    putBit: function putBit(bit) {\n      var bufIndex = Math.floor(this.length / 8);\n      if (this.buffer.length <= bufIndex) {\n        this.buffer.push(0);\n      }\n      if (bit) {\n        this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n      }\n      this.length++;\n    } };\n\n\n\n\n  // xzedit\n  var qrcodeAlgObjCache = [];\n  /**\r\n                               * 二维码构造函数，主要用于绘制\r\n                               * @param  {参数列表} opt 传递参数\r\n                               * @return {}\r\n                               */\n  QRCode = function QRCode(opt) {\n    //设置默认参数\n    this.options = {\n      text: '',\n      size: 256,\n      correctLevel: 3,\n      background: '#ffffff',\n      foreground: '#000000',\n      pdground: '#000000',\n      image: '',\n      imageSize: 30,\n      canvasId: opt.canvasId,\n      context: opt.context,\n      usingComponents: opt.usingComponents,\n      showLoading: opt.showLoading,\n      loadingText: opt.loadingText };\n\n    if (typeof opt === 'string') {// 只编码ASCII字符串\n      opt = {\n        text: opt };\n\n    }\n    if (opt) {\n      for (var i in opt) {\n        this.options[i] = opt[i];\n      }\n    }\n    //使用QRCodeAlg创建二维码结构\n    var qrCodeAlg = null;\n    for (var i = 0, l = qrcodeAlgObjCache.length; i < l; i++) {\n      if (qrcodeAlgObjCache[i].text == this.options.text && qrcodeAlgObjCache[i].text.correctLevel == this.options.correctLevel) {\n        qrCodeAlg = qrcodeAlgObjCache[i].obj;\n        break;\n      }\n    }\n    if (i == l) {\n      qrCodeAlg = new QRCodeAlg(this.options.text, this.options.correctLevel);\n      qrcodeAlgObjCache.push({\n        text: this.options.text,\n        correctLevel: this.options.correctLevel,\n        obj: qrCodeAlg });\n\n    }\n    /**\r\n       * 计算矩阵点的前景色\r\n       * @param {Obj} config\r\n       * @param {Number} config.row 点x坐标\r\n       * @param {Number} config.col 点y坐标\r\n       * @param {Number} config.count 矩阵大小\r\n       * @param {Number} config.options 组件的options\r\n       * @return {String}\r\n       */\n    var getForeGround = function getForeGround(config) {\n      var options = config.options;\n      if (options.pdground && (\n      config.row > 1 && config.row < 5 && config.col > 1 && config.col < 5 ||\n      config.row > config.count - 6 && config.row < config.count - 2 && config.col > 1 && config.col < 5 ||\n      config.row > 1 && config.row < 5 && config.col > config.count - 6 && config.col < config.count - 2))\n      {\n        return options.pdground;\n      }\n      return options.foreground;\n    };\n    // 创建canvas\n    var createCanvas = function createCanvas(options) {\n      if (options.showLoading) {\n        uni.showLoading({\n          title: options.loadingText,\n          mask: true });\n\n      }\n      var ctx = uni.createCanvasContext(options.canvasId, options.context);\n      var count = qrCodeAlg.getModuleCount();\n      var ratioSize = options.size;\n      var ratioImgSize = options.imageSize;\n      //计算每个点的长宽\n      var tileW = (ratioSize / count).toPrecision(4);\n      var tileH = (ratioSize / count).toPrecision(4);\n      //绘制\n      for (var row = 0; row < count; row++) {\n        for (var col = 0; col < count; col++) {\n          var w = Math.ceil((col + 1) * tileW) - Math.floor(col * tileW);\n          var h = Math.ceil((row + 1) * tileW) - Math.floor(row * tileW);\n          var foreground = getForeGround({\n            row: row,\n            col: col,\n            count: count,\n            options: options });\n\n          ctx.setFillStyle(qrCodeAlg.modules[row][col] ? foreground : options.background);\n          ctx.fillRect(Math.round(col * tileW), Math.round(row * tileH), w, h);\n        }\n      }\n      if (options.image) {\n\n\n\n\n        // 画圆角矩形\n        var drawRoundedRect = function drawRoundedRect(ctxi, x, y, width, height, r, lineWidth, fill, stroke) {\n          ctxi.setLineWidth(lineWidth);\n          ctxi.setFillStyle(options.background);\n          ctxi.setStrokeStyle(options.background);\n          ctxi.beginPath(); // draw top and top right corner \n          ctxi.moveTo(x + r, y);\n          ctxi.arcTo(x + width, y, x + width, y + r, r); // draw right side and bottom right corner \n          ctxi.arcTo(x + width, y + height, x + width - r, y + height, r); // draw bottom and bottom left corner \n          ctxi.arcTo(x, y + height, x, y + height - r, r); // draw left and top left corner \n          ctxi.arcTo(x, y, x + r, y, r);\n          ctxi.closePath();\n          if (fill) {\n            ctxi.fill();\n          }\n          if (stroke) {\n            ctxi.stroke();\n          }\n        };var x = Number(((ratioSize - ratioImgSize) / 2).toFixed(2));var y = Number(((ratioSize - ratioImgSize) / 2).toFixed(2));drawRoundedRect(ctx, x, y, ratioImgSize, ratioImgSize, 2, 6, true, true);ctx.drawImage(options.image, x, y, ratioImgSize, ratioImgSize);\n      }\n      setTimeout(function () {\n        ctx.draw(true, function () {\n          // 保存到临时区域\n          setTimeout(function () {\n            uni.canvasToTempFilePath({\n              width: options.width,\n              height: options.height,\n              destWidth: options.width,\n              destHeight: options.height,\n              canvasId: options.canvasId,\n              quality: Number(1),\n              success: function success(res) {\n                if (options.cbResult) {\n                  // 由于官方还没有统一此接口的输出字段，所以先判定下  支付宝为 res.apFilePath\n                  if (!empty(res.tempFilePath)) {\n                    options.cbResult(res.tempFilePath);\n                  } else if (!empty(res.apFilePath)) {\n                    options.cbResult(res.apFilePath);\n                  } else {\n                    options.cbResult(res.tempFilePath);\n                  }\n                }\n              },\n              fail: function fail(res) {\n                if (options.cbResult) {\n                  options.cbResult(res);\n                }\n              },\n              complete: function complete() {\n                uni.hideLoading();\n              } },\n            options.context);\n          }, options.text.length + 100);\n        });\n      }, options.usingComponents ? 0 : 150);\n    };\n    createCanvas(this.options);\n    // 空判定\n    var empty = function empty(v) {\n      var tp = typeof v,\n      rt = false;\n      if (tp == \"number\" && String(v) == \"\") {\n        rt = true;\n      } else if (tp == \"undefined\") {\n        rt = true;\n      } else if (tp == \"object\") {\n        if (JSON.stringify(v) == \"{}\" || JSON.stringify(v) == \"[]\" || v == null) rt = true;\n      } else if (tp == \"string\") {\n        if (v == \"\" || v == \"undefined\" || v == \"null\" || v == \"{}\" || v == \"[]\") rt = true;\n      } else if (tp == \"function\") {\n        rt = false;\n      }\n      return rt;\n    };\n  };\n  QRCode.prototype.clear = function (fn) {\n    var ctx = uni.createCanvasContext(this.options.canvasId, this.options.context);\n    ctx.clearRect(0, 0, this.options.size, this.options.size);\n    ctx.draw(false, function () {\n      if (fn) {\n        fn();\n      }\n    });\n  };\n})();var _default =\n\nQRCode;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///429\n");

/***/ }),

/***/ 458:
/*!******************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcode.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}var barcodes = __webpack_require__(/*! ./barcodes/index.js */ 459)['default'];\nvar _barcode = {};\n(function () {\n  // 初始化\n  _barcode = function barcode(cont, ctxid, options, ctxsize, result) {\n    var ops = {},newOptions,encodings,globaContext,ctx,globaCtxid,cbCanvasSize,cbResult;\n    globaCtxid = ctxid;\n    cbCanvasSize = ctxsize;\n    cbResult = result;\n    newOptions = Object.assign(ops, options);\n    // 修成margin\n    fixMargin(newOptions);\n    // 处理options 数据\n    if (newOptions.text == '' || cont == '') {\n      return false;\n    }\n    // 获取ctx\n    globaContext = cont;\n    ctx = uni.createCanvasContext(globaCtxid, globaContext);\n    // 获取编码数据\n    encodings = new barcodes[newOptions.format.toUpperCase()](newOptions.text, newOptions).encode();\n    var fixencodings = fixEncodings(encodings, newOptions);\n    // 返回canvas实际大小\n    cbCanvasSize({ width: fixencodings.width, height: fixencodings.height });\n    // 绘制canvas\n    setTimeout(function () {\n      drawCanvas.render(newOptions, fixencodings);\n    }, 50);\n    // 绘制canvas\n    var drawCanvas = {\n      render: function render(options, encoding) {var _this = this;\n        this.prepare(options, encoding);\n        encoding.encodings.forEach(function (v, i) {\n          _this.barcode(options, v);\n          _this.text(options, v);\n          _this.move(v);\n        });\n        this.draw(options, encoding);\n      },\n      barcode: function barcode(options, encoding) {\n        var binary = encoding.data;\n        var yFrom;\n        if (options.textPosition == \"top\") {\n          yFrom = options.marginTop + options.fontSize + options.textMargin;\n        } else {\n          yFrom = options.marginTop;\n        }\n        // 绘制条码\n        ctx.fillStyle = options.lineColor;\n        for (var b = 0; b < binary.length; b++) {\n          var x = b * options.width + encoding.barcodePadding;\n          var height = options.height;\n          if (encoding.options) {\n            if (encoding.options.height != undefined) {\n              height = encoding.options.height;\n            }\n          }\n          if (binary[b] === \"1\") {\n            ctx.fillRect(x, yFrom, options.width, height);\n          } else if (binary[b]) {\n            ctx.fillRect(x, yFrom, options.width, height * binary[b]);\n          }\n        }\n      },\n      text: function text(options, encoding) {\n        if (options.displayValue) {\n          var x, y, align, size;\n          if (options.textPosition == \"top\") {\n            y = options.marginTop + options.fontSize;\n          } else {\n            y = options.height + options.textMargin + options.marginTop + options.fontSize;\n          }\n          if (encoding.options) {\n            if (encoding.options.textAlign != undefined) {\n              align = encoding.options.textAlign;\n            }\n            if (encoding.options.fontSize != undefined) {\n              size = encoding.options.fontSize;\n            }\n          } else {\n            align = options.textAlign;\n            size = options.fontSize;\n          }\n          ctx.setFontSize(size);\n          if (align == \"left\" || encoding.barcodePadding > 0) {\n            x = 0;\n            ctx.setTextAlign('left');\n          } else if (align == \"right\") {\n            x = encoding.width - 1;\n            ctx.setTextAlign('right');\n          } else\n          {\n            x = encoding.width / 2;\n            ctx.setTextAlign('center');\n          }\n          ctx.fillStyle = options.fontColor;\n          if (encoding.text != undefined) {\n            ctx.fillText(encoding.text, x, y);\n          }\n        }\n      },\n      move: function move(encoding) {\n        ctx.translate(encoding.width, 0);\n      },\n      prepare: function prepare(options, encoding) {\n        // 绘制背景\n        if (options.background) {\n          ctx.fillStyle = options.background;\n          ctx.fillRect(0, 0, encoding.width, encoding.height);\n        }\n        ctx.translate(options.marginLeft, 0);\n      },\n      draw: function draw(options, encoding) {var _this2 = this;\n        ctx.draw(false, function () {\n          _this2.toImgs(options, encoding);\n        });\n      },\n      toImgs: function toImgs(options, encoding) {\n        setTimeout(function () {\n          uni.canvasToTempFilePath({\n            width: encoding.width,\n            height: encoding.height,\n            destWidth: encoding.width,\n            destHeight: encoding.height,\n            canvasId: globaCtxid,\n            fileType: 'png',\n            success: function success(res) {\n              cbResult(res.tempFilePath);\n            },\n            fail: function fail(res) {\n              cbResult(res);\n            },\n            complete: function complete() {\n              uni.hideLoading();\n            } },\n          globaContext);\n        }, options.text.length + 100);\n      } };\n\n    // 混入canvas数据\n    function fixEncodings(encoding, options) {\n      var encodingArr = [],width = options.marginLeft + options.marginRight,height;\n      if (!Array.isArray(encoding)) {\n        encodingArr[0] = JSON.parse(JSON.stringify(encoding));\n      } else {\n        encodingArr = _toConsumableArray(encoding);\n      }\n      encodingArr.forEach(function (v, i) {\n        // 获取文本宽度\n        var textWidth = ctx.measureText(encodingArr[i].text ? encodingArr[i].text : '').width;\n        // 获取条形码宽度\n        var barcodeWidth = encodingArr[i].data.length * options.width;\n        // 获取内边距\n        var barcodePadding = 0;\n        if (options.displayValue && barcodeWidth < textWidth) {\n          if (options.textAlign == \"center\") {\n            barcodePadding = Math.floor((textWidth - barcodeWidth) / 2);\n          } else if (options.textAlign == \"left\") {\n            barcodePadding = 0;\n          } else if (options.textAlign == \"right\") {\n            barcodePadding = Math.floor(textWidth - barcodeWidth);\n          }\n        }\n        // 混入encodingArr[i]\n        encodingArr[i].barcodePadding = barcodePadding;\n        encodingArr[i].width = Math.ceil(Math.max(textWidth, barcodeWidth));\n        width += encodingArr[i].width;\n        if (encodingArr[i].options) {\n          if (encodingArr[i].options.height != undefined) {\n            encodingArr[i].height = encodingArr[i].options.height + (options.displayValue && (encodingArr[i].text ? encodingArr[i].text : '').length > 0 ? options.fontSize + options.textMargin : 0) + options.marginTop + options.marginBottom;\n          } else {\n            encodingArr[i].height = height = options.height + (options.displayValue && (encodingArr[i].text ? encodingArr[i].text : '').length > 0 ? options.fontSize + options.textMargin : 0) + options.marginTop + options.marginBottom;\n          }\n        } else {\n          encodingArr[i].height = height = options.height + (options.displayValue && (encodingArr[i].text ? encodingArr[i].text : '').length > 0 ? options.fontSize + options.textMargin : 0) + options.marginTop + options.marginBottom;\n        }\n      });\n      return { encodings: encodingArr, width: width, height: height };\n    }\n    // 修正Margin\n    function fixMargin(options) {\n      options.marginTop = options.marginTop == undefined ? options.margin : options.marginTop;\n      options.marginBottom = options.marginBottom == undefined ? options.margin : options.marginBottom;\n      options.marginRight = options.marginRight == undefined ? options.margin : options.marginRight;\n      options.marginLeft = options.marginLeft == undefined ? options.margin : options.marginLeft;\n    }\n  };\n})();var _default =\n\n_barcode;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///458\n");

/***/ }),

/***/ 459:
/*!*************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/index.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _CODE = __webpack_require__(/*! ./CODE39/ */ 460);\n\nvar _CODE2 = __webpack_require__(/*! ./CODE128/ */ 462);\n\nvar _EAN_UPC = __webpack_require__(/*! ./EAN_UPC/ */ 470);\n\nvar _ITF = __webpack_require__(/*! ./ITF/ */ 480);\n\nvar _MSI = __webpack_require__(/*! ./MSI/ */ 484);\n\nvar _pharmacode = __webpack_require__(/*! ./pharmacode/ */ 491);\n\nvar _codabar = __webpack_require__(/*! ./codabar */ 492);\n\nvar _GenericBarcode = __webpack_require__(/*! ./GenericBarcode/ */ 493);\n\nexports.default = {\n  CODE39: _CODE.CODE39,\n  CODE128: _CODE2.CODE128, CODE128A: _CODE2.CODE128A, CODE128B: _CODE2.CODE128B, CODE128C: _CODE2.CODE128C,\n  EAN13: _EAN_UPC.EAN13, EAN8: _EAN_UPC.EAN8, EAN5: _EAN_UPC.EAN5, EAN2: _EAN_UPC.EAN2,\n  UPC: _EAN_UPC.UPC, UPCE: _EAN_UPC.UPCE,\n  ITF14: _ITF.ITF14,\n  ITF: _ITF.ITF,\n  MSI: _MSI.MSI, MSI10: _MSI.MSI10, MSI11: _MSI.MSI11, MSI1010: _MSI.MSI1010, MSI1110: _MSI.MSI1110,\n  PHARMACODE: _pharmacode.pharmacode,\n  CODABAR: _codabar.codabar,\n  GENERICBARCODE: _GenericBarcode.GenericBarcode };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9DT0RFIiwicmVxdWlyZSIsIl9DT0RFMiIsIl9FQU5fVVBDIiwiX0lURiIsIl9NU0kiLCJfcGhhcm1hY29kZSIsIl9jb2RhYmFyIiwiX0dlbmVyaWNCYXJjb2RlIiwiZGVmYXVsdCIsIkNPREUzOSIsIkNPREUxMjgiLCJDT0RFMTI4QSIsIkNPREUxMjhCIiwiQ09ERTEyOEMiLCJFQU4xMyIsIkVBTjgiLCJFQU41IiwiRUFOMiIsIlVQQyIsIlVQQ0UiLCJJVEYxNCIsIklURiIsIk1TSSIsIk1TSTEwIiwiTVNJMTEiLCJNU0kxMDEwIiwiTVNJMTExMCIsIlBIQVJNQUNPREUiLCJwaGFybWFjb2RlIiwiQ09EQUJBUiIsImNvZGFiYXIiLCJHRU5FUklDQkFSQ09ERSIsIkdlbmVyaWNCYXJjb2RlIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUM1Q0MsT0FBSyxFQUFFLElBRHFDLEVBQTdDOzs7QUFJQSxJQUFJQyxLQUFLLEdBQUdDLG1CQUFPLENBQUMsb0JBQUQsQ0FBbkI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHRCxtQkFBTyxDQUFDLHFCQUFELENBQXBCOztBQUVBLElBQUlFLFFBQVEsR0FBR0YsbUJBQU8sQ0FBQyxxQkFBRCxDQUF0Qjs7QUFFQSxJQUFJRyxJQUFJLEdBQUdILG1CQUFPLENBQUMsaUJBQUQsQ0FBbEI7O0FBRUEsSUFBSUksSUFBSSxHQUFHSixtQkFBTyxDQUFDLGlCQUFELENBQWxCOztBQUVBLElBQUlLLFdBQVcsR0FBR0wsbUJBQU8sQ0FBQyx3QkFBRCxDQUF6Qjs7QUFFQSxJQUFJTSxRQUFRLEdBQUdOLG1CQUFPLENBQUMsb0JBQUQsQ0FBdEI7O0FBRUEsSUFBSU8sZUFBZSxHQUFHUCxtQkFBTyxDQUFDLDRCQUFELENBQTdCOztBQUVBSCxPQUFPLENBQUNXLE9BQVIsR0FBa0I7QUFDakJDLFFBQU0sRUFBRVYsS0FBSyxDQUFDVSxNQURHO0FBRWpCQyxTQUFPLEVBQUVULE1BQU0sQ0FBQ1MsT0FGQyxFQUVRQyxRQUFRLEVBQUVWLE1BQU0sQ0FBQ1UsUUFGekIsRUFFbUNDLFFBQVEsRUFBRVgsTUFBTSxDQUFDVyxRQUZwRCxFQUU4REMsUUFBUSxFQUFFWixNQUFNLENBQUNZLFFBRi9FO0FBR2pCQyxPQUFLLEVBQUVaLFFBQVEsQ0FBQ1ksS0FIQyxFQUdNQyxJQUFJLEVBQUViLFFBQVEsQ0FBQ2EsSUFIckIsRUFHMkJDLElBQUksRUFBRWQsUUFBUSxDQUFDYyxJQUgxQyxFQUdnREMsSUFBSSxFQUFFZixRQUFRLENBQUNlLElBSC9EO0FBSWpCQyxLQUFHLEVBQUVoQixRQUFRLENBQUNnQixHQUpHLEVBSUVDLElBQUksRUFBRWpCLFFBQVEsQ0FBQ2lCLElBSmpCO0FBS2pCQyxPQUFLLEVBQUVqQixJQUFJLENBQUNpQixLQUxLO0FBTWpCQyxLQUFHLEVBQUVsQixJQUFJLENBQUNrQixHQU5PO0FBT2pCQyxLQUFHLEVBQUVsQixJQUFJLENBQUNrQixHQVBPLEVBT0ZDLEtBQUssRUFBRW5CLElBQUksQ0FBQ21CLEtBUFYsRUFPaUJDLEtBQUssRUFBRXBCLElBQUksQ0FBQ29CLEtBUDdCLEVBT29DQyxPQUFPLEVBQUVyQixJQUFJLENBQUNxQixPQVBsRCxFQU8yREMsT0FBTyxFQUFFdEIsSUFBSSxDQUFDc0IsT0FQekU7QUFRakJDLFlBQVUsRUFBRXRCLFdBQVcsQ0FBQ3VCLFVBUlA7QUFTakJDLFNBQU8sRUFBRXZCLFFBQVEsQ0FBQ3dCLE9BVEQ7QUFVakJDLGdCQUFjLEVBQUV4QixlQUFlLENBQUN5QixjQVZmLEVBQWxCIiwiZmlsZSI6IjQ1OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9DT0RFID0gcmVxdWlyZSgnLi9DT0RFMzkvJyk7XG5cbnZhciBfQ09ERTIgPSByZXF1aXJlKCcuL0NPREUxMjgvJyk7XG5cbnZhciBfRUFOX1VQQyA9IHJlcXVpcmUoJy4vRUFOX1VQQy8nKTtcblxudmFyIF9JVEYgPSByZXF1aXJlKCcuL0lURi8nKTtcblxudmFyIF9NU0kgPSByZXF1aXJlKCcuL01TSS8nKTtcblxudmFyIF9waGFybWFjb2RlID0gcmVxdWlyZSgnLi9waGFybWFjb2RlLycpO1xuXG52YXIgX2NvZGFiYXIgPSByZXF1aXJlKCcuL2NvZGFiYXInKTtcblxudmFyIF9HZW5lcmljQmFyY29kZSA9IHJlcXVpcmUoJy4vR2VuZXJpY0JhcmNvZGUvJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHtcblx0Q09ERTM5OiBfQ09ERS5DT0RFMzksXG5cdENPREUxMjg6IF9DT0RFMi5DT0RFMTI4LCBDT0RFMTI4QTogX0NPREUyLkNPREUxMjhBLCBDT0RFMTI4QjogX0NPREUyLkNPREUxMjhCLCBDT0RFMTI4QzogX0NPREUyLkNPREUxMjhDLFxuXHRFQU4xMzogX0VBTl9VUEMuRUFOMTMsIEVBTjg6IF9FQU5fVVBDLkVBTjgsIEVBTjU6IF9FQU5fVVBDLkVBTjUsIEVBTjI6IF9FQU5fVVBDLkVBTjIsIFxuXHRVUEM6IF9FQU5fVVBDLlVQQywgVVBDRTogX0VBTl9VUEMuVVBDRSxcblx0SVRGMTQ6IF9JVEYuSVRGMTQsXG5cdElURjogX0lURi5JVEYsXG5cdE1TSTogX01TSS5NU0ksIE1TSTEwOiBfTVNJLk1TSTEwLCBNU0kxMTogX01TSS5NU0kxMSwgTVNJMTAxMDogX01TSS5NU0kxMDEwLCBNU0kxMTEwOiBfTVNJLk1TSTExMTAsXG5cdFBIQVJNQUNPREU6IF9waGFybWFjb2RlLnBoYXJtYWNvZGUsXG5cdENPREFCQVI6IF9jb2RhYmFyLmNvZGFiYXIsXG5cdEdFTkVSSUNCQVJDT0RFOiBfR2VuZXJpY0JhcmNvZGUuR2VuZXJpY0JhcmNvZGVcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///459\n");

/***/ }),

/***/ 460:
/*!********************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/CODE39/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.CODE39 = undefined;\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 461);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation:\n// https://en.wikipedia.org/wiki/Code_39#Encoding\n\nvar CODE39 = function (_Barcode) {\n  _inherits(CODE39, _Barcode);\n\n  function CODE39(data, options) {\n    _classCallCheck(this, CODE39);\n\n    data = data.toUpperCase();\n\n    // Calculate mod43 checksum if enabled\n    if (options.mod43) {\n      data += getCharacter(mod43checksum(data));\n    }\n\n    return _possibleConstructorReturn(this, (CODE39.__proto__ || Object.getPrototypeOf(CODE39)).call(this, data, options));\n  }\n\n  _createClass(CODE39, [{\n    key: \"encode\",\n    value: function encode() {\n      // First character is always a *\n      var result = getEncoding(\"*\");\n\n      // Take every character and add the binary representation to the result\n      for (var i = 0; i < this.data.length; i++) {\n        result += getEncoding(this.data[i]) + \"0\";\n      }\n\n      // Last character is always a *\n      result += getEncoding(\"*\");\n      return {\n        data: result,\n        text: this.text };\n\n    } },\n  {\n    key: \"valid\",\n    value: function valid() {\n      return this.data.search(/^[0-9A-Z\\-\\.\\ \\$\\/\\+\\%]+$/) !== -1;\n    } }]);\n\n\n  return CODE39;\n}(_Barcode3.default);\n\n// All characters. The position in the array is the (checksum) value\n\n\nvar characters = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"-\", \".\", \" \", \"$\", \"/\", \"+\", \"%\", \"*\"];\n\n// The decimal representation of the characters, is converted to the\n// corresponding binary with the getEncoding function\nvar encodings = [20957, 29783, 23639, 30485, 20951, 29813, 23669, 20855, 29789, 23645, 29975, 23831, 30533, 22295, 30149, 24005, 21623, 29981, 23837, 22301, 30023, 23879, 30545, 22343, 30161, 24017, 21959, 30065, 23921, 22385, 29015, 18263, 29141, 17879, 29045, 18293, 17783, 29021, 18269, 17477, 17489, 17681, 20753, 35770];\n\n// Get the binary representation of a character by converting the encodings\n// from decimal to binary\nfunction getEncoding(character) {\n  return getBinary(characterValue(character));\n}\n\nfunction getBinary(characterValue) {\n  return encodings[characterValue].toString(2);\n}\n\nfunction getCharacter(characterValue) {\n  return characters[characterValue];\n}\n\nfunction characterValue(character) {\n  return characters.indexOf(character);\n}\n\nfunction mod43checksum(data) {\n  var checksum = 0;\n  for (var i = 0; i < data.length; i++) {\n    checksum += characterValue(data[i]);\n  }\n\n  checksum = checksum % 43;\n  return checksum;\n}\n\nexports.CODE39 = CODE39;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///460\n");

/***/ }),

/***/ 461:
/*!***************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/Barcode.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nvar Barcode = function Barcode(data, options) {\n  _classCallCheck(this, Barcode);\n\n  this.data = data;\n  this.text = options.text || data;\n  this.options = options;\n};\n\nexports.default = Barcode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9CYXJjb2RlLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIkJhcmNvZGUiLCJkYXRhIiwib3B0aW9ucyIsInRleHQiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUM1Q0MsT0FBSyxFQUFFLElBRHFDLEVBQTdDOzs7QUFJQSxTQUFTQyxlQUFULENBQXlCQyxRQUF6QixFQUFtQ0MsV0FBbkMsRUFBZ0QsQ0FBRSxJQUFJLEVBQUVELFFBQVEsWUFBWUMsV0FBdEIsQ0FBSixFQUF3QyxDQUFFLE1BQU0sSUFBSUMsU0FBSixDQUFjLG1DQUFkLENBQU4sQ0FBMkQsQ0FBRTs7QUFFekosSUFBSUMsT0FBTyxHQUFHLFNBQVNBLE9BQVQsQ0FBaUJDLElBQWpCLEVBQXVCQyxPQUF2QixFQUFnQztBQUM3Q04saUJBQWUsQ0FBQyxJQUFELEVBQU9JLE9BQVAsQ0FBZjs7QUFFQSxPQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxPQUFLRSxJQUFMLEdBQVlELE9BQU8sQ0FBQ0MsSUFBUixJQUFnQkYsSUFBNUI7QUFDQSxPQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDQSxDQU5EOztBQVFBUixPQUFPLENBQUNVLE9BQVIsR0FBa0JKLE9BQWxCIiwiZmlsZSI6IjQ2MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQmFyY29kZSA9IGZ1bmN0aW9uIEJhcmNvZGUoZGF0YSwgb3B0aW9ucykge1xuXHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFyY29kZSk7XG5cblx0dGhpcy5kYXRhID0gZGF0YTtcblx0dGhpcy50ZXh0ID0gb3B0aW9ucy50ZXh0IHx8IGRhdGE7XG5cdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBCYXJjb2RlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///461\n");

/***/ }),

/***/ 462:
/*!*********************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/CODE128/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.CODE128C = exports.CODE128B = exports.CODE128A = exports.CODE128 = undefined;\n\nvar _CODE128_AUTO = __webpack_require__(/*! ./CODE128_AUTO.js */ 463);\n\nvar _CODE128_AUTO2 = _interopRequireDefault(_CODE128_AUTO);\n\nvar _CODE128A = __webpack_require__(/*! ./CODE128A.js */ 467);\n\nvar _CODE128A2 = _interopRequireDefault(_CODE128A);\n\nvar _CODE128B = __webpack_require__(/*! ./CODE128B.js */ 468);\n\nvar _CODE128B2 = _interopRequireDefault(_CODE128B);\n\nvar _CODE128C = __webpack_require__(/*! ./CODE128C.js */ 469);\n\nvar _CODE128C2 = _interopRequireDefault(_CODE128C);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nexports.CODE128 = _CODE128_AUTO2.default;\nexports.CODE128A = _CODE128A2.default;\nexports.CODE128B = _CODE128B2.default;\nexports.CODE128C = _CODE128C2.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9DT0RFMTI4L2luZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ09ERTEyOEMiLCJDT0RFMTI4QiIsIkNPREUxMjhBIiwiQ09ERTEyOCIsInVuZGVmaW5lZCIsIl9DT0RFMTI4X0FVVE8iLCJyZXF1aXJlIiwiX0NPREUxMjhfQVVUTzIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX0NPREUxMjhBIiwiX0NPREUxMjhBMiIsIl9DT0RFMTI4QiIsIl9DT0RFMTI4QjIiLCJfQ09ERTEyOEMiLCJfQ09ERTEyOEMyIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxPQUFLLEVBQUUsSUFEb0MsRUFBN0M7O0FBR0FELE9BQU8sQ0FBQ0UsUUFBUixHQUFtQkYsT0FBTyxDQUFDRyxRQUFSLEdBQW1CSCxPQUFPLENBQUNJLFFBQVIsR0FBbUJKLE9BQU8sQ0FBQ0ssT0FBUixHQUFrQkMsU0FBM0U7O0FBRUEsSUFBSUMsYUFBYSxHQUFHQyxtQkFBTyxDQUFDLDRCQUFELENBQTNCOztBQUVBLElBQUlDLGNBQWMsR0FBR0Msc0JBQXNCLENBQUNILGFBQUQsQ0FBM0M7O0FBRUEsSUFBSUksU0FBUyxHQUFHSCxtQkFBTyxDQUFDLHdCQUFELENBQXZCOztBQUVBLElBQUlJLFVBQVUsR0FBR0Ysc0JBQXNCLENBQUNDLFNBQUQsQ0FBdkM7O0FBRUEsSUFBSUUsU0FBUyxHQUFHTCxtQkFBTyxDQUFDLHdCQUFELENBQXZCOztBQUVBLElBQUlNLFVBQVUsR0FBR0osc0JBQXNCLENBQUNHLFNBQUQsQ0FBdkM7O0FBRUEsSUFBSUUsU0FBUyxHQUFHUCxtQkFBTyxDQUFDLHdCQUFELENBQXZCOztBQUVBLElBQUlRLFVBQVUsR0FBR04sc0JBQXNCLENBQUNLLFNBQUQsQ0FBdkM7O0FBRUEsU0FBU0wsc0JBQVQsQ0FBZ0NPLEdBQWhDLEVBQXFDLENBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVFLE9BQU8sRUFBRUYsR0FBWCxFQUFyQyxDQUF3RDs7QUFFL0ZqQixPQUFPLENBQUNLLE9BQVIsR0FBa0JJLGNBQWMsQ0FBQ1UsT0FBakM7QUFDQW5CLE9BQU8sQ0FBQ0ksUUFBUixHQUFtQlEsVUFBVSxDQUFDTyxPQUE5QjtBQUNBbkIsT0FBTyxDQUFDRyxRQUFSLEdBQW1CVyxVQUFVLENBQUNLLE9BQTlCO0FBQ0FuQixPQUFPLENBQUNFLFFBQVIsR0FBbUJjLFVBQVUsQ0FBQ0csT0FBOUIiLCJmaWxlIjoiNDYyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5DT0RFMTI4QyA9IGV4cG9ydHMuQ09ERTEyOEIgPSBleHBvcnRzLkNPREUxMjhBID0gZXhwb3J0cy5DT0RFMTI4ID0gdW5kZWZpbmVkO1xuXG52YXIgX0NPREUxMjhfQVVUTyA9IHJlcXVpcmUoJy4vQ09ERTEyOF9BVVRPLmpzJyk7XG5cbnZhciBfQ09ERTEyOF9BVVRPMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NPREUxMjhfQVVUTyk7XG5cbnZhciBfQ09ERTEyOEEgPSByZXF1aXJlKCcuL0NPREUxMjhBLmpzJyk7XG5cbnZhciBfQ09ERTEyOEEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ09ERTEyOEEpO1xuXG52YXIgX0NPREUxMjhCID0gcmVxdWlyZSgnLi9DT0RFMTI4Qi5qcycpO1xuXG52YXIgX0NPREUxMjhCMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NPREUxMjhCKTtcblxudmFyIF9DT0RFMTI4QyA9IHJlcXVpcmUoJy4vQ09ERTEyOEMuanMnKTtcblxudmFyIF9DT0RFMTI4QzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DT0RFMTI4Qyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuQ09ERTEyOCA9IF9DT0RFMTI4X0FVVE8yLmRlZmF1bHQ7XG5leHBvcnRzLkNPREUxMjhBID0gX0NPREUxMjhBMi5kZWZhdWx0O1xuZXhwb3J0cy5DT0RFMTI4QiA9IF9DT0RFMTI4QjIuZGVmYXVsdDtcbmV4cG9ydHMuQ09ERTEyOEMgPSBfQ09ERTEyOEMyLmRlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///462\n");

/***/ }),

/***/ 463:
/*!****************************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/CODE128/CODE128_AUTO.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _CODE2 = __webpack_require__(/*! ./CODE128 */ 464);\n\nvar _CODE3 = _interopRequireDefault(_CODE2);\n\nvar _auto = __webpack_require__(/*! ./auto */ 466);\n\nvar _auto2 = _interopRequireDefault(_auto);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar CODE128AUTO = function (_CODE) {\n  _inherits(CODE128AUTO, _CODE);\n\n  function CODE128AUTO(data, options) {\n    _classCallCheck(this, CODE128AUTO);\n\n    // ASCII value ranges 0-127, 200-211\n    if (/^[\\x00-\\x7F\\xC8-\\xD3]+$/.test(data)) {\n      var _this = _possibleConstructorReturn(this, (CODE128AUTO.__proto__ || Object.getPrototypeOf(CODE128AUTO)).call(this, (0, _auto2.default)(data), options));\n    } else {\n      var _this = _possibleConstructorReturn(this, (CODE128AUTO.__proto__ || Object.getPrototypeOf(CODE128AUTO)).call(this, data, options));\n    }\n    return _possibleConstructorReturn(_this);\n  }\n\n  return CODE128AUTO;\n}(_CODE3.default);\n\nexports.default = CODE128AUTO;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9DT0RFMTI4L0NPREUxMjhfQVVUTy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9DT0RFMiIsInJlcXVpcmUiLCJfQ09ERTMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2F1dG8iLCJfYXV0bzIiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQ09ERTEyOEFVVE8iLCJfQ09ERSIsImRhdGEiLCJvcHRpb25zIiwidGVzdCIsIl90aGlzIiwiZ2V0UHJvdG90eXBlT2YiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzVDQyxPQUFLLEVBQUUsSUFEcUMsRUFBN0M7OztBQUlBLElBQUlDLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxvQkFBRCxDQUFwQjs7QUFFQSxJQUFJQyxNQUFNLEdBQUdDLHNCQUFzQixDQUFDSCxNQUFELENBQW5DOztBQUVBLElBQUlJLEtBQUssR0FBR0gsbUJBQU8sQ0FBQyxpQkFBRCxDQUFuQjs7QUFFQSxJQUFJSSxNQUFNLEdBQUdGLHNCQUFzQixDQUFDQyxLQUFELENBQW5DOztBQUVBLFNBQVNELHNCQUFULENBQWdDRyxHQUFoQyxFQUFxQyxDQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxPQUFPLEVBQUVGLEdBQVgsRUFBckMsQ0FBd0Q7O0FBRS9GLFNBQVNHLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DQyxXQUFuQyxFQUFnRCxDQUFFLElBQUksRUFBRUQsUUFBUSxZQUFZQyxXQUF0QixDQUFKLEVBQXdDLENBQUUsTUFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTixDQUEyRCxDQUFFOztBQUV6SixTQUFTQywwQkFBVCxDQUFvQ0MsSUFBcEMsRUFBMENDLElBQTFDLEVBQWdELENBQUUsSUFBSSxDQUFDRCxJQUFMLEVBQVcsQ0FBRSxNQUFNLElBQUlFLGNBQUosQ0FBbUIsMkRBQW5CLENBQU4sQ0FBd0YsQ0FBQyxPQUFPRCxJQUFJLEtBQUssT0FBT0EsSUFBUCxLQUFnQixRQUFoQixJQUE0QixPQUFPQSxJQUFQLEtBQWdCLFVBQWpELENBQUosR0FBbUVBLElBQW5FLEdBQTBFRCxJQUFqRixDQUF3Rjs7QUFFaFAsU0FBU0csU0FBVCxDQUFtQkMsUUFBbkIsRUFBNkJDLFVBQTdCLEVBQXlDLENBQUUsSUFBSSxPQUFPQSxVQUFQLEtBQXNCLFVBQXRCLElBQW9DQSxVQUFVLEtBQUssSUFBdkQsRUFBNkQsQ0FBRSxNQUFNLElBQUlQLFNBQUosQ0FBYyw2REFBNkQsT0FBT08sVUFBbEYsQ0FBTixDQUFzRyxDQUFDRCxRQUFRLENBQUNFLFNBQVQsR0FBcUJ4QixNQUFNLENBQUN5QixNQUFQLENBQWNGLFVBQVUsSUFBSUEsVUFBVSxDQUFDQyxTQUF2QyxFQUFrRCxFQUFFRSxXQUFXLEVBQUUsRUFBRXZCLEtBQUssRUFBRW1CLFFBQVQsRUFBbUJLLFVBQVUsRUFBRSxLQUEvQixFQUFzQ0MsUUFBUSxFQUFFLElBQWhELEVBQXNEQyxZQUFZLEVBQUUsSUFBcEUsRUFBZixFQUFsRCxDQUFyQixDQUFxSyxJQUFJTixVQUFKLEVBQWdCdkIsTUFBTSxDQUFDOEIsY0FBUCxHQUF3QjlCLE1BQU0sQ0FBQzhCLGNBQVAsQ0FBc0JSLFFBQXRCLEVBQWdDQyxVQUFoQyxDQUF4QixHQUFzRUQsUUFBUSxDQUFDUyxTQUFULEdBQXFCUixVQUEzRixDQUF3Rzs7QUFFOWUsSUFBSVMsV0FBVyxHQUFHLFVBQVVDLEtBQVYsRUFBaUI7QUFDbENaLFdBQVMsQ0FBQ1csV0FBRCxFQUFjQyxLQUFkLENBQVQ7O0FBRUEsV0FBU0QsV0FBVCxDQUFxQkUsSUFBckIsRUFBMkJDLE9BQTNCLEVBQW9DO0FBQ25DdEIsbUJBQWUsQ0FBQyxJQUFELEVBQU9tQixXQUFQLENBQWY7O0FBRUE7QUFDQSxRQUFJLDBCQUEwQkksSUFBMUIsQ0FBK0JGLElBQS9CLENBQUosRUFBMEM7QUFDekMsVUFBSUcsS0FBSyxHQUFHcEIsMEJBQTBCLENBQUMsSUFBRCxFQUFPLENBQUNlLFdBQVcsQ0FBQ0QsU0FBWixJQUF5Qi9CLE1BQU0sQ0FBQ3NDLGNBQVAsQ0FBc0JOLFdBQXRCLENBQTFCLEVBQThEYixJQUE5RCxDQUFtRSxJQUFuRSxFQUF5RSxDQUFDLEdBQUdWLE1BQU0sQ0FBQ0csT0FBWCxFQUFvQnNCLElBQXBCLENBQXpFLEVBQW9HQyxPQUFwRyxDQUFQLENBQXRDO0FBQ0EsS0FGRCxNQUVPO0FBQ04sVUFBSUUsS0FBSyxHQUFHcEIsMEJBQTBCLENBQUMsSUFBRCxFQUFPLENBQUNlLFdBQVcsQ0FBQ0QsU0FBWixJQUF5Qi9CLE1BQU0sQ0FBQ3NDLGNBQVAsQ0FBc0JOLFdBQXRCLENBQTFCLEVBQThEYixJQUE5RCxDQUFtRSxJQUFuRSxFQUF5RWUsSUFBekUsRUFBK0VDLE9BQS9FLENBQVAsQ0FBdEM7QUFDQTtBQUNELFdBQU9sQiwwQkFBMEIsQ0FBQ29CLEtBQUQsQ0FBakM7QUFDQTs7QUFFRCxTQUFPTCxXQUFQO0FBQ0EsQ0FoQmlCLENBZ0JoQjFCLE1BQU0sQ0FBQ00sT0FoQlMsQ0FBbEI7O0FBa0JBVixPQUFPLENBQUNVLE9BQVIsR0FBa0JvQixXQUFsQiIsImZpbGUiOiI0NjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfQ09ERTIgPSByZXF1aXJlKCcuL0NPREUxMjgnKTtcblxudmFyIF9DT0RFMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NPREUyKTtcblxudmFyIF9hdXRvID0gcmVxdWlyZSgnLi9hdXRvJyk7XG5cbnZhciBfYXV0bzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hdXRvKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQ09ERTEyOEFVVE8gPSBmdW5jdGlvbiAoX0NPREUpIHtcblx0X2luaGVyaXRzKENPREUxMjhBVVRPLCBfQ09ERSk7XG5cblx0ZnVuY3Rpb24gQ09ERTEyOEFVVE8oZGF0YSwgb3B0aW9ucykge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDT0RFMTI4QVVUTyk7XG5cblx0XHQvLyBBU0NJSSB2YWx1ZSByYW5nZXMgMC0xMjcsIDIwMC0yMTFcblx0XHRpZiAoL15bXFx4MDAtXFx4N0ZcXHhDOC1cXHhEM10rJC8udGVzdChkYXRhKSkge1xuXHRcdFx0dmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENPREUxMjhBVVRPLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ09ERTEyOEFVVE8pKS5jYWxsKHRoaXMsICgwLCBfYXV0bzIuZGVmYXVsdCkoZGF0YSksIG9wdGlvbnMpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENPREUxMjhBVVRPLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ09ERTEyOEFVVE8pKS5jYWxsKHRoaXMsIGRhdGEsIG9wdGlvbnMpKTtcblx0XHR9XG5cdFx0cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzKTtcblx0fVxuXG5cdHJldHVybiBDT0RFMTI4QVVUTztcbn0oX0NPREUzLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDT0RFMTI4QVVUTzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///463\n");

/***/ }),

/***/ 464:
/*!***********************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/CODE128/CODE128.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 461);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nvar _constants = __webpack_require__(/*! ./constants */ 465);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\n// This is the master class,\n// it does require the start code to be included in the string\nvar CODE128 = function (_Barcode) {\n  _inherits(CODE128, _Barcode);\n\n  function CODE128(data, options) {\n    _classCallCheck(this, CODE128);\n\n    // Get array of ascii codes from data\n    var _this = _possibleConstructorReturn(this, (CODE128.__proto__ || Object.getPrototypeOf(CODE128)).call(this, data.substring(1), options));\n\n    _this.bytes = data.split('').map(function (char) {\n      return char.charCodeAt(0);\n    });\n    return _this;\n  }\n\n  _createClass(CODE128, [{\n    key: 'valid',\n    value: function valid() {\n      // ASCII value ranges 0-127, 200-211\n      return /^[\\x00-\\x7F\\xC8-\\xD3]+$/.test(this.data);\n\n    }\n\n    // The public encoding function\n  },\n  {\n    key: 'encode',\n    value: function encode() {\n      var bytes = this.bytes;\n      // Remove the start code from the bytes and set its index\n      var startIndex = bytes.shift() - 105;\n      // Get start set by index\n      var startSet = _constants.SET_BY_CODE[startIndex];\n\n      if (startSet === undefined) {\n        throw new RangeError('The encoding does not start with a start character.');\n      }\n\n      if (this.shouldEncodeAsEan128() === true) {\n        bytes.unshift(_constants.FNC1);\n      }\n\n      // Start encode with the right type\n      var encodingResult = CODE128.next(bytes, 1, startSet);\n\n      return {\n        text: this.text === this.data ? this.text.replace(/[^\\x20-\\x7E]/g, '') : this.text,\n        data:\n        // Add the start bits\n        CODE128.getBar(startIndex) +\n        // Add the encoded bits\n        encodingResult.result +\n        // Add the checksum\n        CODE128.getBar((encodingResult.checksum + startIndex) % _constants.MODULO) +\n        // Add the end bits\n        CODE128.getBar(_constants.STOP) };\n\n    }\n\n    // GS1-128/EAN-128\n  },\n  {\n    key: 'shouldEncodeAsEan128',\n    value: function shouldEncodeAsEan128() {\n      var isEAN128 = this.options.ean128 || false;\n      if (typeof isEAN128 === 'string') {\n        isEAN128 = isEAN128.toLowerCase() === 'true';\n      }\n      return isEAN128;\n    }\n\n    // Get a bar symbol by index\n  }],\n  [{\n    key: 'getBar',\n    value: function getBar(index) {\n      return _constants.BARS[index] ? _constants.BARS[index].toString() : '';\n    }\n\n    // Correct an index by a set and shift it from the bytes array\n  },\n  {\n    key: 'correctIndex',\n    value: function correctIndex(bytes, set) {\n      if (set === _constants.SET_A) {\n        var charCode = bytes.shift();\n        return charCode < 32 ? charCode + 64 : charCode - 32;\n      } else if (set === _constants.SET_B) {\n        return bytes.shift() - 32;\n      } else {\n        return (bytes.shift() - 48) * 10 + bytes.shift() - 48;\n      }\n    } },\n  {\n    key: 'next',\n    value: function next(bytes, pos, set) {\n      if (!bytes.length) {\n        return { result: '', checksum: 0 };\n      }\n\n      var nextCode = void 0,\n      index = void 0;\n\n      // Special characters\n      if (bytes[0] >= 200) {\n        index = bytes.shift() - 105;\n        var nextSet = _constants.SWAP[index];\n\n        // Swap to other set\n        if (nextSet !== undefined) {\n          nextCode = CODE128.next(bytes, pos + 1, nextSet);\n        }\n        // Continue on current set but encode a special character\n        else {\n            // Shift\n            if ((set === _constants.SET_A || set === _constants.SET_B) && index === _constants.SHIFT) {\n              // Convert the next character so that is encoded correctly\n              bytes[0] = set === _constants.SET_A ? bytes[0] > 95 ? bytes[0] - 96 : bytes[0] : bytes[0] < 32 ? bytes[0] + 96 : bytes[0];\n            }\n            nextCode = CODE128.next(bytes, pos + 1, set);\n          }\n      }\n      // Continue encoding\n      else {\n          index = CODE128.correctIndex(bytes, set);\n          nextCode = CODE128.next(bytes, pos + 1, set);\n        }\n\n      // Get the correct binary encoding and calculate the weight\n      var enc = CODE128.getBar(index);\n      var weight = index * pos;\n\n      return {\n        result: enc + nextCode.result,\n        checksum: weight + nextCode.checksum };\n\n    } }]);\n\n\n  return CODE128;\n}(_Barcode3.default);\n\nexports.default = CODE128;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///464\n");

/***/ }),

/***/ 465:
/*!*************************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/CODE128/constants.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _SET_BY_CODE;\n\nfunction _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n\n// constants for internal usage\nvar SET_A = exports.SET_A = 0;\nvar SET_B = exports.SET_B = 1;\nvar SET_C = exports.SET_C = 2;\n\n// Special characters\nvar SHIFT = exports.SHIFT = 98;\nvar START_A = exports.START_A = 103;\nvar START_B = exports.START_B = 104;\nvar START_C = exports.START_C = 105;\nvar MODULO = exports.MODULO = 103;\nvar STOP = exports.STOP = 106;\nvar FNC1 = exports.FNC1 = 207;\n\n// Get set by start code\nvar SET_BY_CODE = exports.SET_BY_CODE = (_SET_BY_CODE = {}, _defineProperty(_SET_BY_CODE, START_A, SET_A), _defineProperty(_SET_BY_CODE, START_B, SET_B), _defineProperty(_SET_BY_CODE, START_C, SET_C), _SET_BY_CODE);\n\n// Get next set by code\nvar SWAP = exports.SWAP = {\n  101: SET_A,\n  100: SET_B,\n  99: SET_C };\n\n\nvar A_START_CHAR = exports.A_START_CHAR = String.fromCharCode(208); // START_A + 105\nvar B_START_CHAR = exports.B_START_CHAR = String.fromCharCode(209); // START_B + 105\nvar C_START_CHAR = exports.C_START_CHAR = String.fromCharCode(210); // START_C + 105\n\n// 128A (Code Set A)\n// ASCII characters 00 to 95 (0–9, A–Z and control codes), special characters, and FNC 1–4\nvar A_CHARS = exports.A_CHARS = \"[\\x00-\\x5F\\xC8-\\xCF]\";\n\n// 128B (Code Set B)\n// ASCII characters 32 to 127 (0–9, A–Z, a–z), special characters, and FNC 1–4\nvar B_CHARS = exports.B_CHARS = \"[\\x20-\\x7F\\xC8-\\xCF]\";\n\n// 128C (Code Set C)\n// 00–99 (encodes two digits with a single code point) and FNC1\nvar C_CHARS = exports.C_CHARS = \"(\\xCF*[0-9]{2}\\xCF*)\";\n\n// CODE128 includes 107 symbols:\n// 103 data symbols, 3 start symbols (A, B and C), and 1 stop symbol (the last one)\n// Each symbol consist of three black bars (1) and three white spaces (0).\nvar BARS = exports.BARS = [11011001100, 11001101100, 11001100110, 10010011000, 10010001100, 10001001100, 10011001000, 10011000100, 10001100100, 11001001000, 11001000100, 11000100100, 10110011100, 10011011100, 10011001110, 10111001100, 10011101100, 10011100110, 11001110010, 11001011100, 11001001110, 11011100100, 11001110100, 11101101110, 11101001100, 11100101100, 11100100110, 11101100100, 11100110100, 11100110010, 11011011000, 11011000110, 11000110110, 10100011000, 10001011000, 10001000110, 10110001000, 10001101000, 10001100010, 11010001000, 11000101000, 11000100010, 10110111000, 10110001110, 10001101110, 10111011000, 10111000110, 10001110110, 11101110110, 11010001110, 11000101110, 11011101000, 11011100010, 11011101110, 11101011000, 11101000110, 11100010110, 11101101000, 11101100010, 11100011010, 11101111010, 11001000010, 11110001010, 10100110000, 10100001100, 10010110000, 10010000110, 10000101100, 10000100110, 10110010000, 10110000100, 10011010000, 10011000010, 10000110100, 10000110010, 11000010010, 11001010000, 11110111010, 11000010100, 10001111010, 10100111100, 10010111100, 10010011110, 10111100100, 10011110100, 10011110010, 11110100100, 11110010100, 11110010010, 11011011110, 11011110110, 11110110110, 10101111000, 10100011110, 10001011110, 10111101000, 10111100010, 11110101000, 11110100010, 10111011110, 10111101110, 11101011110, 11110101110, 11010000100, 11010010000, 11010011100, 1100011101011];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9DT0RFMTI4L2NvbnN0YW50cy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9TRVRfQllfQ09ERSIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIlNFVF9BIiwiU0VUX0IiLCJTRVRfQyIsIlNISUZUIiwiU1RBUlRfQSIsIlNUQVJUX0IiLCJTVEFSVF9DIiwiTU9EVUxPIiwiU1RPUCIsIkZOQzEiLCJTRVRfQllfQ09ERSIsIlNXQVAiLCJBX1NUQVJUX0NIQVIiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJCX1NUQVJUX0NIQVIiLCJDX1NUQVJUX0NIQVIiLCJBX0NIQVJTIiwiQl9DSEFSUyIsIkNfQ0hBUlMiLCJCQVJTIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUM1Q0MsT0FBSyxFQUFFLElBRHFDLEVBQTdDOzs7QUFJQSxJQUFJQyxZQUFKOztBQUVBLFNBQVNDLGVBQVQsQ0FBeUJDLEdBQXpCLEVBQThCQyxHQUE5QixFQUFtQ0osS0FBbkMsRUFBMEMsQ0FBRSxJQUFJSSxHQUFHLElBQUlELEdBQVgsRUFBZ0IsQ0FBRU4sTUFBTSxDQUFDQyxjQUFQLENBQXNCSyxHQUF0QixFQUEyQkMsR0FBM0IsRUFBZ0MsRUFBRUosS0FBSyxFQUFFQSxLQUFULEVBQWdCSyxVQUFVLEVBQUUsSUFBNUIsRUFBa0NDLFlBQVksRUFBRSxJQUFoRCxFQUFzREMsUUFBUSxFQUFFLElBQWhFLEVBQWhDLEVBQTBHLENBQTVILE1BQWtJLENBQUVKLEdBQUcsQ0FBQ0MsR0FBRCxDQUFILEdBQVdKLEtBQVgsQ0FBbUIsQ0FBQyxPQUFPRyxHQUFQLENBQWE7O0FBRWpOO0FBQ0EsSUFBSUssS0FBSyxHQUFHVCxPQUFPLENBQUNTLEtBQVIsR0FBZ0IsQ0FBNUI7QUFDQSxJQUFJQyxLQUFLLEdBQUdWLE9BQU8sQ0FBQ1UsS0FBUixHQUFnQixDQUE1QjtBQUNBLElBQUlDLEtBQUssR0FBR1gsT0FBTyxDQUFDVyxLQUFSLEdBQWdCLENBQTVCOztBQUVBO0FBQ0EsSUFBSUMsS0FBSyxHQUFHWixPQUFPLENBQUNZLEtBQVIsR0FBZ0IsRUFBNUI7QUFDQSxJQUFJQyxPQUFPLEdBQUdiLE9BQU8sQ0FBQ2EsT0FBUixHQUFrQixHQUFoQztBQUNBLElBQUlDLE9BQU8sR0FBR2QsT0FBTyxDQUFDYyxPQUFSLEdBQWtCLEdBQWhDO0FBQ0EsSUFBSUMsT0FBTyxHQUFHZixPQUFPLENBQUNlLE9BQVIsR0FBa0IsR0FBaEM7QUFDQSxJQUFJQyxNQUFNLEdBQUdoQixPQUFPLENBQUNnQixNQUFSLEdBQWlCLEdBQTlCO0FBQ0EsSUFBSUMsSUFBSSxHQUFHakIsT0FBTyxDQUFDaUIsSUFBUixHQUFlLEdBQTFCO0FBQ0EsSUFBSUMsSUFBSSxHQUFHbEIsT0FBTyxDQUFDa0IsSUFBUixHQUFlLEdBQTFCOztBQUVBO0FBQ0EsSUFBSUMsV0FBVyxHQUFHbkIsT0FBTyxDQUFDbUIsV0FBUixJQUF1QmpCLFlBQVksR0FBRyxFQUFmLEVBQW1CQyxlQUFlLENBQUNELFlBQUQsRUFBZVcsT0FBZixFQUF3QkosS0FBeEIsQ0FBbEMsRUFBa0VOLGVBQWUsQ0FBQ0QsWUFBRCxFQUFlWSxPQUFmLEVBQXdCSixLQUF4QixDQUFqRixFQUFpSFAsZUFBZSxDQUFDRCxZQUFELEVBQWVhLE9BQWYsRUFBd0JKLEtBQXhCLENBQWhJLEVBQWdLVCxZQUF2TCxDQUFsQjs7QUFFQTtBQUNBLElBQUlrQixJQUFJLEdBQUdwQixPQUFPLENBQUNvQixJQUFSLEdBQWU7QUFDekIsT0FBS1gsS0FEb0I7QUFFekIsT0FBS0MsS0FGb0I7QUFHekIsTUFBSUMsS0FIcUIsRUFBMUI7OztBQU1BLElBQUlVLFlBQVksR0FBR3JCLE9BQU8sQ0FBQ3FCLFlBQVIsR0FBdUJDLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQixHQUFwQixDQUExQyxDLENBQW9FO0FBQ3BFLElBQUlDLFlBQVksR0FBR3hCLE9BQU8sQ0FBQ3dCLFlBQVIsR0FBdUJGLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQixHQUFwQixDQUExQyxDLENBQW9FO0FBQ3BFLElBQUlFLFlBQVksR0FBR3pCLE9BQU8sQ0FBQ3lCLFlBQVIsR0FBdUJILE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQixHQUFwQixDQUExQyxDLENBQW9FOztBQUVwRTtBQUNBO0FBQ0EsSUFBSUcsT0FBTyxHQUFHMUIsT0FBTyxDQUFDMEIsT0FBUixHQUFrQixzQkFBaEM7O0FBRUE7QUFDQTtBQUNBLElBQUlDLE9BQU8sR0FBRzNCLE9BQU8sQ0FBQzJCLE9BQVIsR0FBa0Isc0JBQWhDOztBQUVBO0FBQ0E7QUFDQSxJQUFJQyxPQUFPLEdBQUc1QixPQUFPLENBQUM0QixPQUFSLEdBQWtCLHNCQUFoQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQyxJQUFJLEdBQUc3QixPQUFPLENBQUM2QixJQUFSLEdBQWUsQ0FBQyxXQUFELEVBQWMsV0FBZCxFQUEyQixXQUEzQixFQUF3QyxXQUF4QyxFQUFxRCxXQUFyRCxFQUFrRSxXQUFsRSxFQUErRSxXQUEvRSxFQUE0RixXQUE1RixFQUF5RyxXQUF6RyxFQUFzSCxXQUF0SCxFQUFtSSxXQUFuSSxFQUFnSixXQUFoSixFQUE2SixXQUE3SixFQUEwSyxXQUExSyxFQUF1TCxXQUF2TCxFQUFvTSxXQUFwTSxFQUFpTixXQUFqTixFQUE4TixXQUE5TixFQUEyTyxXQUEzTyxFQUF3UCxXQUF4UCxFQUFxUSxXQUFyUSxFQUFrUixXQUFsUixFQUErUixXQUEvUixFQUE0UyxXQUE1UyxFQUF5VCxXQUF6VCxFQUFzVSxXQUF0VSxFQUFtVixXQUFuVixFQUFnVyxXQUFoVyxFQUE2VyxXQUE3VyxFQUEwWCxXQUExWCxFQUF1WSxXQUF2WSxFQUFvWixXQUFwWixFQUFpYSxXQUFqYSxFQUE4YSxXQUE5YSxFQUEyYixXQUEzYixFQUF3YyxXQUF4YyxFQUFxZCxXQUFyZCxFQUFrZSxXQUFsZSxFQUErZSxXQUEvZSxFQUE0ZixXQUE1ZixFQUF5Z0IsV0FBemdCLEVBQXNoQixXQUF0aEIsRUFBbWlCLFdBQW5pQixFQUFnakIsV0FBaGpCLEVBQTZqQixXQUE3akIsRUFBMGtCLFdBQTFrQixFQUF1bEIsV0FBdmxCLEVBQW9tQixXQUFwbUIsRUFBaW5CLFdBQWpuQixFQUE4bkIsV0FBOW5CLEVBQTJvQixXQUEzb0IsRUFBd3BCLFdBQXhwQixFQUFxcUIsV0FBcnFCLEVBQWtyQixXQUFsckIsRUFBK3JCLFdBQS9yQixFQUE0c0IsV0FBNXNCLEVBQXl0QixXQUF6dEIsRUFBc3VCLFdBQXR1QixFQUFtdkIsV0FBbnZCLEVBQWd3QixXQUFod0IsRUFBNndCLFdBQTd3QixFQUEweEIsV0FBMXhCLEVBQXV5QixXQUF2eUIsRUFBb3pCLFdBQXB6QixFQUFpMEIsV0FBajBCLEVBQTgwQixXQUE5MEIsRUFBMjFCLFdBQTMxQixFQUF3MkIsV0FBeDJCLEVBQXEzQixXQUFyM0IsRUFBazRCLFdBQWw0QixFQUErNEIsV0FBLzRCLEVBQTQ1QixXQUE1NUIsRUFBeTZCLFdBQXo2QixFQUFzN0IsV0FBdDdCLEVBQW04QixXQUFuOEIsRUFBZzlCLFdBQWg5QixFQUE2OUIsV0FBNzlCLEVBQTArQixXQUExK0IsRUFBdS9CLFdBQXYvQixFQUFvZ0MsV0FBcGdDLEVBQWloQyxXQUFqaEMsRUFBOGhDLFdBQTloQyxFQUEyaUMsV0FBM2lDLEVBQXdqQyxXQUF4akMsRUFBcWtDLFdBQXJrQyxFQUFrbEMsV0FBbGxDLEVBQStsQyxXQUEvbEMsRUFBNG1DLFdBQTVtQyxFQUF5bkMsV0FBem5DLEVBQXNvQyxXQUF0b0MsRUFBbXBDLFdBQW5wQyxFQUFncUMsV0FBaHFDLEVBQTZxQyxXQUE3cUMsRUFBMHJDLFdBQTFyQyxFQUF1c0MsV0FBdnNDLEVBQW90QyxXQUFwdEMsRUFBaXVDLFdBQWp1QyxFQUE4dUMsV0FBOXVDLEVBQTJ2QyxXQUEzdkMsRUFBd3dDLFdBQXh3QyxFQUFxeEMsV0FBcnhDLEVBQWt5QyxXQUFseUMsRUFBK3lDLFdBQS95QyxFQUE0ekMsV0FBNXpDLEVBQXkwQyxXQUF6MEMsRUFBczFDLFdBQXQxQyxFQUFtMkMsYUFBbjJDLENBQTFCIiwiZmlsZSI6IjQ2NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1NFVF9CWV9DT0RFO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG4vLyBjb25zdGFudHMgZm9yIGludGVybmFsIHVzYWdlXG52YXIgU0VUX0EgPSBleHBvcnRzLlNFVF9BID0gMDtcbnZhciBTRVRfQiA9IGV4cG9ydHMuU0VUX0IgPSAxO1xudmFyIFNFVF9DID0gZXhwb3J0cy5TRVRfQyA9IDI7XG5cbi8vIFNwZWNpYWwgY2hhcmFjdGVyc1xudmFyIFNISUZUID0gZXhwb3J0cy5TSElGVCA9IDk4O1xudmFyIFNUQVJUX0EgPSBleHBvcnRzLlNUQVJUX0EgPSAxMDM7XG52YXIgU1RBUlRfQiA9IGV4cG9ydHMuU1RBUlRfQiA9IDEwNDtcbnZhciBTVEFSVF9DID0gZXhwb3J0cy5TVEFSVF9DID0gMTA1O1xudmFyIE1PRFVMTyA9IGV4cG9ydHMuTU9EVUxPID0gMTAzO1xudmFyIFNUT1AgPSBleHBvcnRzLlNUT1AgPSAxMDY7XG52YXIgRk5DMSA9IGV4cG9ydHMuRk5DMSA9IDIwNztcblxuLy8gR2V0IHNldCBieSBzdGFydCBjb2RlXG52YXIgU0VUX0JZX0NPREUgPSBleHBvcnRzLlNFVF9CWV9DT0RFID0gKF9TRVRfQllfQ09ERSA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX1NFVF9CWV9DT0RFLCBTVEFSVF9BLCBTRVRfQSksIF9kZWZpbmVQcm9wZXJ0eShfU0VUX0JZX0NPREUsIFNUQVJUX0IsIFNFVF9CKSwgX2RlZmluZVByb3BlcnR5KF9TRVRfQllfQ09ERSwgU1RBUlRfQywgU0VUX0MpLCBfU0VUX0JZX0NPREUpO1xuXG4vLyBHZXQgbmV4dCBzZXQgYnkgY29kZVxudmFyIFNXQVAgPSBleHBvcnRzLlNXQVAgPSB7XG5cdDEwMTogU0VUX0EsXG5cdDEwMDogU0VUX0IsXG5cdDk5OiBTRVRfQ1xufTtcblxudmFyIEFfU1RBUlRfQ0hBUiA9IGV4cG9ydHMuQV9TVEFSVF9DSEFSID0gU3RyaW5nLmZyb21DaGFyQ29kZSgyMDgpOyAvLyBTVEFSVF9BICsgMTA1XG52YXIgQl9TVEFSVF9DSEFSID0gZXhwb3J0cy5CX1NUQVJUX0NIQVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDIwOSk7IC8vIFNUQVJUX0IgKyAxMDVcbnZhciBDX1NUQVJUX0NIQVIgPSBleHBvcnRzLkNfU1RBUlRfQ0hBUiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMjEwKTsgLy8gU1RBUlRfQyArIDEwNVxuXG4vLyAxMjhBIChDb2RlIFNldCBBKVxuLy8gQVNDSUkgY2hhcmFjdGVycyAwMCB0byA5NSAoMOKAkzksIEHigJNaIGFuZCBjb250cm9sIGNvZGVzKSwgc3BlY2lhbCBjaGFyYWN0ZXJzLCBhbmQgRk5DIDHigJM0XG52YXIgQV9DSEFSUyA9IGV4cG9ydHMuQV9DSEFSUyA9IFwiW1xceDAwLVxceDVGXFx4QzgtXFx4Q0ZdXCI7XG5cbi8vIDEyOEIgKENvZGUgU2V0IEIpXG4vLyBBU0NJSSBjaGFyYWN0ZXJzIDMyIHRvIDEyNyAoMOKAkzksIEHigJNaLCBh4oCTeiksIHNwZWNpYWwgY2hhcmFjdGVycywgYW5kIEZOQyAx4oCTNFxudmFyIEJfQ0hBUlMgPSBleHBvcnRzLkJfQ0hBUlMgPSBcIltcXHgyMC1cXHg3RlxceEM4LVxceENGXVwiO1xuXG4vLyAxMjhDIChDb2RlIFNldCBDKVxuLy8gMDDigJM5OSAoZW5jb2RlcyB0d28gZGlnaXRzIHdpdGggYSBzaW5nbGUgY29kZSBwb2ludCkgYW5kIEZOQzFcbnZhciBDX0NIQVJTID0gZXhwb3J0cy5DX0NIQVJTID0gXCIoXFx4Q0YqWzAtOV17Mn1cXHhDRiopXCI7XG5cbi8vIENPREUxMjggaW5jbHVkZXMgMTA3IHN5bWJvbHM6XG4vLyAxMDMgZGF0YSBzeW1ib2xzLCAzIHN0YXJ0IHN5bWJvbHMgKEEsIEIgYW5kIEMpLCBhbmQgMSBzdG9wIHN5bWJvbCAodGhlIGxhc3Qgb25lKVxuLy8gRWFjaCBzeW1ib2wgY29uc2lzdCBvZiB0aHJlZSBibGFjayBiYXJzICgxKSBhbmQgdGhyZWUgd2hpdGUgc3BhY2VzICgwKS5cbnZhciBCQVJTID0gZXhwb3J0cy5CQVJTID0gWzExMDExMDAxMTAwLCAxMTAwMTEwMTEwMCwgMTEwMDExMDAxMTAsIDEwMDEwMDExMDAwLCAxMDAxMDAwMTEwMCwgMTAwMDEwMDExMDAsIDEwMDExMDAxMDAwLCAxMDAxMTAwMDEwMCwgMTAwMDExMDAxMDAsIDExMDAxMDAxMDAwLCAxMTAwMTAwMDEwMCwgMTEwMDAxMDAxMDAsIDEwMTEwMDExMTAwLCAxMDAxMTAxMTEwMCwgMTAwMTEwMDExMTAsIDEwMTExMDAxMTAwLCAxMDAxMTEwMTEwMCwgMTAwMTExMDAxMTAsIDExMDAxMTEwMDEwLCAxMTAwMTAxMTEwMCwgMTEwMDEwMDExMTAsIDExMDExMTAwMTAwLCAxMTAwMTExMDEwMCwgMTExMDExMDExMTAsIDExMTAxMDAxMTAwLCAxMTEwMDEwMTEwMCwgMTExMDAxMDAxMTAsIDExMTAxMTAwMTAwLCAxMTEwMDExMDEwMCwgMTExMDAxMTAwMTAsIDExMDExMDExMDAwLCAxMTAxMTAwMDExMCwgMTEwMDAxMTAxMTAsIDEwMTAwMDExMDAwLCAxMDAwMTAxMTAwMCwgMTAwMDEwMDAxMTAsIDEwMTEwMDAxMDAwLCAxMDAwMTEwMTAwMCwgMTAwMDExMDAwMTAsIDExMDEwMDAxMDAwLCAxMTAwMDEwMTAwMCwgMTEwMDAxMDAwMTAsIDEwMTEwMTExMDAwLCAxMDExMDAwMTExMCwgMTAwMDExMDExMTAsIDEwMTExMDExMDAwLCAxMDExMTAwMDExMCwgMTAwMDExMTAxMTAsIDExMTAxMTEwMTEwLCAxMTAxMDAwMTExMCwgMTEwMDAxMDExMTAsIDExMDExMTAxMDAwLCAxMTAxMTEwMDAxMCwgMTEwMTExMDExMTAsIDExMTAxMDExMDAwLCAxMTEwMTAwMDExMCwgMTExMDAwMTAxMTAsIDExMTAxMTAxMDAwLCAxMTEwMTEwMDAxMCwgMTExMDAwMTEwMTAsIDExMTAxMTExMDEwLCAxMTAwMTAwMDAxMCwgMTExMTAwMDEwMTAsIDEwMTAwMTEwMDAwLCAxMDEwMDAwMTEwMCwgMTAwMTAxMTAwMDAsIDEwMDEwMDAwMTEwLCAxMDAwMDEwMTEwMCwgMTAwMDAxMDAxMTAsIDEwMTEwMDEwMDAwLCAxMDExMDAwMDEwMCwgMTAwMTEwMTAwMDAsIDEwMDExMDAwMDEwLCAxMDAwMDExMDEwMCwgMTAwMDAxMTAwMTAsIDExMDAwMDEwMDEwLCAxMTAwMTAxMDAwMCwgMTExMTAxMTEwMTAsIDExMDAwMDEwMTAwLCAxMDAwMTExMTAxMCwgMTAxMDAxMTExMDAsIDEwMDEwMTExMTAwLCAxMDAxMDAxMTExMCwgMTAxMTExMDAxMDAsIDEwMDExMTEwMTAwLCAxMDAxMTExMDAxMCwgMTExMTAxMDAxMDAsIDExMTEwMDEwMTAwLCAxMTExMDAxMDAxMCwgMTEwMTEwMTExMTAsIDExMDExMTEwMTEwLCAxMTExMDExMDExMCwgMTAxMDExMTEwMDAsIDEwMTAwMDExMTEwLCAxMDAwMTAxMTExMCwgMTAxMTExMDEwMDAsIDEwMTExMTAwMDEwLCAxMTExMDEwMTAwMCwgMTExMTAxMDAwMTAsIDEwMTExMDExMTEwLCAxMDExMTEwMTExMCwgMTExMDEwMTExMTAsIDExMTEwMTAxMTEwLCAxMTAxMDAwMDEwMCwgMTEwMTAwMTAwMDAsIDExMDEwMDExMTAwLCAxMTAwMDExMTAxMDExXTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///465\n");

/***/ }),

/***/ 466:
/*!********************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/CODE128/auto.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _constants = __webpack_require__(/*! ./constants */ 465);\n\n// Match Set functions\nvar matchSetALength = function matchSetALength(string) {\n  return string.match(new RegExp('^' + _constants.A_CHARS + '*'))[0].length;\n};\nvar matchSetBLength = function matchSetBLength(string) {\n  return string.match(new RegExp('^' + _constants.B_CHARS + '*'))[0].length;\n};\nvar matchSetC = function matchSetC(string) {\n  return string.match(new RegExp('^' + _constants.C_CHARS + '*'))[0];\n};\n\n// CODE128A or CODE128B\nfunction autoSelectFromAB(string, isA) {\n  var ranges = isA ? _constants.A_CHARS : _constants.B_CHARS;\n  var untilC = string.match(new RegExp('^(' + ranges + '+?)(([0-9]{2}){2,})([^0-9]|$)'));\n\n  if (untilC) {\n    return untilC[1] + String.fromCharCode(204) + autoSelectFromC(string.substring(untilC[1].length));\n  }\n\n  var chars = string.match(new RegExp('^' + ranges + '+'))[0];\n\n  if (chars.length === string.length) {\n    return string;\n  }\n\n  return chars + String.fromCharCode(isA ? 205 : 206) + autoSelectFromAB(string.substring(chars.length), !isA);\n}\n\n// CODE128C\nfunction autoSelectFromC(string) {\n  var cMatch = matchSetC(string);\n  var length = cMatch.length;\n\n  if (length === string.length) {\n    return string;\n  }\n\n  string = string.substring(length);\n\n  // Select A/B depending on the longest match\n  var isA = matchSetALength(string) >= matchSetBLength(string);\n  return cMatch + String.fromCharCode(isA ? 206 : 205) + autoSelectFromAB(string, isA);\n}\n\n// Detect Code Set (A, B or C) and format the string\n\nexports.default = function (string) {\n  var newString = void 0;\n  var cLength = matchSetC(string).length;\n\n  // Select 128C if the string start with enough digits\n  if (cLength >= 2) {\n    newString = _constants.C_START_CHAR + autoSelectFromC(string);\n  } else {\n    // Select A/B depending on the longest match\n    var isA = matchSetALength(string) > matchSetBLength(string);\n    newString = (isA ? _constants.A_START_CHAR : _constants.B_START_CHAR) + autoSelectFromAB(string, isA);\n  }\n\n  return newString.replace(/[\\xCD\\xCE]([^])[\\xCD\\xCE]/, // Any sequence between 205 and 206 characters\n  function (match, char) {\n    return String.fromCharCode(203) + char;\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9DT0RFMTI4L2F1dG8uanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfY29uc3RhbnRzIiwicmVxdWlyZSIsIm1hdGNoU2V0QUxlbmd0aCIsInN0cmluZyIsIm1hdGNoIiwiUmVnRXhwIiwiQV9DSEFSUyIsImxlbmd0aCIsIm1hdGNoU2V0Qkxlbmd0aCIsIkJfQ0hBUlMiLCJtYXRjaFNldEMiLCJDX0NIQVJTIiwiYXV0b1NlbGVjdEZyb21BQiIsImlzQSIsInJhbmdlcyIsInVudGlsQyIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImF1dG9TZWxlY3RGcm9tQyIsInN1YnN0cmluZyIsImNoYXJzIiwiY01hdGNoIiwiZGVmYXVsdCIsIm5ld1N0cmluZyIsImNMZW5ndGgiLCJDX1NUQVJUX0NIQVIiLCJBX1NUQVJUX0NIQVIiLCJCX1NUQVJUX0NIQVIiLCJyZXBsYWNlIiwiY2hhciJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDNUNDLE9BQUssRUFBRSxJQURxQyxFQUE3Qzs7O0FBSUEsSUFBSUMsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLHNCQUFELENBQXhCOztBQUVBO0FBQ0EsSUFBSUMsZUFBZSxHQUFHLFNBQVNBLGVBQVQsQ0FBeUJDLE1BQXpCLEVBQWlDO0FBQ3RELFNBQU9BLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhLElBQUlDLE1BQUosQ0FBVyxNQUFNTCxVQUFVLENBQUNNLE9BQWpCLEdBQTJCLEdBQXRDLENBQWIsRUFBeUQsQ0FBekQsRUFBNERDLE1BQW5FO0FBQ0EsQ0FGRDtBQUdBLElBQUlDLGVBQWUsR0FBRyxTQUFTQSxlQUFULENBQXlCTCxNQUF6QixFQUFpQztBQUN0RCxTQUFPQSxNQUFNLENBQUNDLEtBQVAsQ0FBYSxJQUFJQyxNQUFKLENBQVcsTUFBTUwsVUFBVSxDQUFDUyxPQUFqQixHQUEyQixHQUF0QyxDQUFiLEVBQXlELENBQXpELEVBQTRERixNQUFuRTtBQUNBLENBRkQ7QUFHQSxJQUFJRyxTQUFTLEdBQUcsU0FBU0EsU0FBVCxDQUFtQlAsTUFBbkIsRUFBMkI7QUFDMUMsU0FBT0EsTUFBTSxDQUFDQyxLQUFQLENBQWEsSUFBSUMsTUFBSixDQUFXLE1BQU1MLFVBQVUsQ0FBQ1csT0FBakIsR0FBMkIsR0FBdEMsQ0FBYixFQUF5RCxDQUF6RCxDQUFQO0FBQ0EsQ0FGRDs7QUFJQTtBQUNBLFNBQVNDLGdCQUFULENBQTBCVCxNQUExQixFQUFrQ1UsR0FBbEMsRUFBdUM7QUFDdEMsTUFBSUMsTUFBTSxHQUFHRCxHQUFHLEdBQUdiLFVBQVUsQ0FBQ00sT0FBZCxHQUF3Qk4sVUFBVSxDQUFDUyxPQUFuRDtBQUNBLE1BQUlNLE1BQU0sR0FBR1osTUFBTSxDQUFDQyxLQUFQLENBQWEsSUFBSUMsTUFBSixDQUFXLE9BQU9TLE1BQVAsR0FBZ0IsK0JBQTNCLENBQWIsQ0FBYjs7QUFFQSxNQUFJQyxNQUFKLEVBQVk7QUFDWCxXQUFPQSxNQUFNLENBQUMsQ0FBRCxDQUFOLEdBQVlDLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQixHQUFwQixDQUFaLEdBQXVDQyxlQUFlLENBQUNmLE1BQU0sQ0FBQ2dCLFNBQVAsQ0FBaUJKLE1BQU0sQ0FBQyxDQUFELENBQU4sQ0FBVVIsTUFBM0IsQ0FBRCxDQUE3RDtBQUNBOztBQUVELE1BQUlhLEtBQUssR0FBR2pCLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhLElBQUlDLE1BQUosQ0FBVyxNQUFNUyxNQUFOLEdBQWUsR0FBMUIsQ0FBYixFQUE2QyxDQUE3QyxDQUFaOztBQUVBLE1BQUlNLEtBQUssQ0FBQ2IsTUFBTixLQUFpQkosTUFBTSxDQUFDSSxNQUE1QixFQUFvQztBQUNuQyxXQUFPSixNQUFQO0FBQ0E7O0FBRUQsU0FBT2lCLEtBQUssR0FBR0osTUFBTSxDQUFDQyxZQUFQLENBQW9CSixHQUFHLEdBQUcsR0FBSCxHQUFTLEdBQWhDLENBQVIsR0FBK0NELGdCQUFnQixDQUFDVCxNQUFNLENBQUNnQixTQUFQLENBQWlCQyxLQUFLLENBQUNiLE1BQXZCLENBQUQsRUFBaUMsQ0FBQ00sR0FBbEMsQ0FBdEU7QUFDQTs7QUFFRDtBQUNBLFNBQVNLLGVBQVQsQ0FBeUJmLE1BQXpCLEVBQWlDO0FBQ2hDLE1BQUlrQixNQUFNLEdBQUdYLFNBQVMsQ0FBQ1AsTUFBRCxDQUF0QjtBQUNBLE1BQUlJLE1BQU0sR0FBR2MsTUFBTSxDQUFDZCxNQUFwQjs7QUFFQSxNQUFJQSxNQUFNLEtBQUtKLE1BQU0sQ0FBQ0ksTUFBdEIsRUFBOEI7QUFDN0IsV0FBT0osTUFBUDtBQUNBOztBQUVEQSxRQUFNLEdBQUdBLE1BQU0sQ0FBQ2dCLFNBQVAsQ0FBaUJaLE1BQWpCLENBQVQ7O0FBRUE7QUFDQSxNQUFJTSxHQUFHLEdBQUdYLGVBQWUsQ0FBQ0MsTUFBRCxDQUFmLElBQTJCSyxlQUFlLENBQUNMLE1BQUQsQ0FBcEQ7QUFDQSxTQUFPa0IsTUFBTSxHQUFHTCxNQUFNLENBQUNDLFlBQVAsQ0FBb0JKLEdBQUcsR0FBRyxHQUFILEdBQVMsR0FBaEMsQ0FBVCxHQUFnREQsZ0JBQWdCLENBQUNULE1BQUQsRUFBU1UsR0FBVCxDQUF2RTtBQUNBOztBQUVEOztBQUVBZixPQUFPLENBQUN3QixPQUFSLEdBQWtCLFVBQVVuQixNQUFWLEVBQWtCO0FBQ25DLE1BQUlvQixTQUFTLEdBQUcsS0FBSyxDQUFyQjtBQUNBLE1BQUlDLE9BQU8sR0FBR2QsU0FBUyxDQUFDUCxNQUFELENBQVQsQ0FBa0JJLE1BQWhDOztBQUVBO0FBQ0EsTUFBSWlCLE9BQU8sSUFBSSxDQUFmLEVBQWtCO0FBQ2pCRCxhQUFTLEdBQUd2QixVQUFVLENBQUN5QixZQUFYLEdBQTBCUCxlQUFlLENBQUNmLE1BQUQsQ0FBckQ7QUFDQSxHQUZELE1BRU87QUFDTjtBQUNBLFFBQUlVLEdBQUcsR0FBR1gsZUFBZSxDQUFDQyxNQUFELENBQWYsR0FBMEJLLGVBQWUsQ0FBQ0wsTUFBRCxDQUFuRDtBQUNBb0IsYUFBUyxHQUFHLENBQUNWLEdBQUcsR0FBR2IsVUFBVSxDQUFDMEIsWUFBZCxHQUE2QjFCLFVBQVUsQ0FBQzJCLFlBQTVDLElBQTREZixnQkFBZ0IsQ0FBQ1QsTUFBRCxFQUFTVSxHQUFULENBQXhGO0FBQ0E7O0FBRUQsU0FBT1UsU0FBUyxDQUFDSyxPQUFWLENBQWtCLDJCQUFsQixFQUErQztBQUN0RCxZQUFVeEIsS0FBVixFQUFpQnlCLElBQWpCLEVBQXVCO0FBQ3RCLFdBQU9iLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQixHQUFwQixJQUEyQlksSUFBbEM7QUFDQSxHQUhNLENBQVA7QUFJQSxDQWpCRCIsImZpbGUiOiI0NjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcblxuLy8gTWF0Y2ggU2V0IGZ1bmN0aW9uc1xudmFyIG1hdGNoU2V0QUxlbmd0aCA9IGZ1bmN0aW9uIG1hdGNoU2V0QUxlbmd0aChzdHJpbmcpIHtcblx0cmV0dXJuIHN0cmluZy5tYXRjaChuZXcgUmVnRXhwKCdeJyArIF9jb25zdGFudHMuQV9DSEFSUyArICcqJykpWzBdLmxlbmd0aDtcbn07XG52YXIgbWF0Y2hTZXRCTGVuZ3RoID0gZnVuY3Rpb24gbWF0Y2hTZXRCTGVuZ3RoKHN0cmluZykge1xuXHRyZXR1cm4gc3RyaW5nLm1hdGNoKG5ldyBSZWdFeHAoJ14nICsgX2NvbnN0YW50cy5CX0NIQVJTICsgJyonKSlbMF0ubGVuZ3RoO1xufTtcbnZhciBtYXRjaFNldEMgPSBmdW5jdGlvbiBtYXRjaFNldEMoc3RyaW5nKSB7XG5cdHJldHVybiBzdHJpbmcubWF0Y2gobmV3IFJlZ0V4cCgnXicgKyBfY29uc3RhbnRzLkNfQ0hBUlMgKyAnKicpKVswXTtcbn07XG5cbi8vIENPREUxMjhBIG9yIENPREUxMjhCXG5mdW5jdGlvbiBhdXRvU2VsZWN0RnJvbUFCKHN0cmluZywgaXNBKSB7XG5cdHZhciByYW5nZXMgPSBpc0EgPyBfY29uc3RhbnRzLkFfQ0hBUlMgOiBfY29uc3RhbnRzLkJfQ0hBUlM7XG5cdHZhciB1bnRpbEMgPSBzdHJpbmcubWF0Y2gobmV3IFJlZ0V4cCgnXignICsgcmFuZ2VzICsgJys/KSgoWzAtOV17Mn0pezIsfSkoW14wLTldfCQpJykpO1xuXG5cdGlmICh1bnRpbEMpIHtcblx0XHRyZXR1cm4gdW50aWxDWzFdICsgU3RyaW5nLmZyb21DaGFyQ29kZSgyMDQpICsgYXV0b1NlbGVjdEZyb21DKHN0cmluZy5zdWJzdHJpbmcodW50aWxDWzFdLmxlbmd0aCkpO1xuXHR9XG5cblx0dmFyIGNoYXJzID0gc3RyaW5nLm1hdGNoKG5ldyBSZWdFeHAoJ14nICsgcmFuZ2VzICsgJysnKSlbMF07XG5cblx0aWYgKGNoYXJzLmxlbmd0aCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuXHRcdHJldHVybiBzdHJpbmc7XG5cdH1cblxuXHRyZXR1cm4gY2hhcnMgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGlzQSA/IDIwNSA6IDIwNikgKyBhdXRvU2VsZWN0RnJvbUFCKHN0cmluZy5zdWJzdHJpbmcoY2hhcnMubGVuZ3RoKSwgIWlzQSk7XG59XG5cbi8vIENPREUxMjhDXG5mdW5jdGlvbiBhdXRvU2VsZWN0RnJvbUMoc3RyaW5nKSB7XG5cdHZhciBjTWF0Y2ggPSBtYXRjaFNldEMoc3RyaW5nKTtcblx0dmFyIGxlbmd0aCA9IGNNYXRjaC5sZW5ndGg7XG5cblx0aWYgKGxlbmd0aCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuXHRcdHJldHVybiBzdHJpbmc7XG5cdH1cblxuXHRzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKGxlbmd0aCk7XG5cblx0Ly8gU2VsZWN0IEEvQiBkZXBlbmRpbmcgb24gdGhlIGxvbmdlc3QgbWF0Y2hcblx0dmFyIGlzQSA9IG1hdGNoU2V0QUxlbmd0aChzdHJpbmcpID49IG1hdGNoU2V0Qkxlbmd0aChzdHJpbmcpO1xuXHRyZXR1cm4gY01hdGNoICsgU3RyaW5nLmZyb21DaGFyQ29kZShpc0EgPyAyMDYgOiAyMDUpICsgYXV0b1NlbGVjdEZyb21BQihzdHJpbmcsIGlzQSk7XG59XG5cbi8vIERldGVjdCBDb2RlIFNldCAoQSwgQiBvciBDKSBhbmQgZm9ybWF0IHRoZSBzdHJpbmdcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHN0cmluZykge1xuXHR2YXIgbmV3U3RyaW5nID0gdm9pZCAwO1xuXHR2YXIgY0xlbmd0aCA9IG1hdGNoU2V0QyhzdHJpbmcpLmxlbmd0aDtcblxuXHQvLyBTZWxlY3QgMTI4QyBpZiB0aGUgc3RyaW5nIHN0YXJ0IHdpdGggZW5vdWdoIGRpZ2l0c1xuXHRpZiAoY0xlbmd0aCA+PSAyKSB7XG5cdFx0bmV3U3RyaW5nID0gX2NvbnN0YW50cy5DX1NUQVJUX0NIQVIgKyBhdXRvU2VsZWN0RnJvbUMoc3RyaW5nKTtcblx0fSBlbHNlIHtcblx0XHQvLyBTZWxlY3QgQS9CIGRlcGVuZGluZyBvbiB0aGUgbG9uZ2VzdCBtYXRjaFxuXHRcdHZhciBpc0EgPSBtYXRjaFNldEFMZW5ndGgoc3RyaW5nKSA+IG1hdGNoU2V0Qkxlbmd0aChzdHJpbmcpO1xuXHRcdG5ld1N0cmluZyA9IChpc0EgPyBfY29uc3RhbnRzLkFfU1RBUlRfQ0hBUiA6IF9jb25zdGFudHMuQl9TVEFSVF9DSEFSKSArIGF1dG9TZWxlY3RGcm9tQUIoc3RyaW5nLCBpc0EpO1xuXHR9XG5cblx0cmV0dXJuIG5ld1N0cmluZy5yZXBsYWNlKC9bXFx4Q0RcXHhDRV0oW15dKVtcXHhDRFxceENFXS8sIC8vIEFueSBzZXF1ZW5jZSBiZXR3ZWVuIDIwNSBhbmQgMjA2IGNoYXJhY3RlcnNcblx0ZnVuY3Rpb24gKG1hdGNoLCBjaGFyKSB7XG5cdFx0cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoMjAzKSArIGNoYXI7XG5cdH0pO1xufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///466\n");

/***/ }),

/***/ 467:
/*!************************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/CODE128/CODE128A.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _CODE2 = __webpack_require__(/*! ./CODE128.js */ 464);\n\nvar _CODE3 = _interopRequireDefault(_CODE2);\n\nvar _constants = __webpack_require__(/*! ./constants */ 465);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar CODE128A = function (_CODE) {\n  _inherits(CODE128A, _CODE);\n\n  function CODE128A(string, options) {\n    _classCallCheck(this, CODE128A);\n\n    return _possibleConstructorReturn(this, (CODE128A.__proto__ || Object.getPrototypeOf(CODE128A)).call(this, _constants.A_START_CHAR + string, options));\n  }\n\n  _createClass(CODE128A, [{\n    key: 'valid',\n    value: function valid() {\n      return new RegExp('^' + _constants.A_CHARS + '+$').test(this.data);\n    } }]);\n\n\n  return CODE128A;\n}(_CODE3.default);\n\nexports.default = CODE128A;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9DT0RFMTI4L0NPREUxMjhBLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJrZXkiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIl9DT0RFMiIsInJlcXVpcmUiLCJfQ09ERTMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NvbnN0YW50cyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQ09ERTEyOEEiLCJfQ09ERSIsInN0cmluZyIsIm9wdGlvbnMiLCJnZXRQcm90b3R5cGVPZiIsIkFfU1RBUlRfQ0hBUiIsInZhbGlkIiwiUmVnRXhwIiwiQV9DSEFSUyIsInRlc3QiLCJkYXRhIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUM1Q0MsT0FBSyxFQUFFLElBRHFDLEVBQTdDOzs7QUFJQSxJQUFJQyxZQUFZLEdBQUcsWUFBWSxDQUFFLFNBQVNDLGdCQUFULENBQTBCQyxNQUExQixFQUFrQ0MsS0FBbEMsRUFBeUMsQ0FBRSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELEtBQUssQ0FBQ0UsTUFBMUIsRUFBa0NELENBQUMsRUFBbkMsRUFBdUMsQ0FBRSxJQUFJRSxVQUFVLEdBQUdILEtBQUssQ0FBQ0MsQ0FBRCxDQUF0QixDQUEyQkUsVUFBVSxDQUFDQyxVQUFYLEdBQXdCRCxVQUFVLENBQUNDLFVBQVgsSUFBeUIsS0FBakQsQ0FBd0RELFVBQVUsQ0FBQ0UsWUFBWCxHQUEwQixJQUExQixDQUFnQyxJQUFJLFdBQVdGLFVBQWYsRUFBMkJBLFVBQVUsQ0FBQ0csUUFBWCxHQUFzQixJQUF0QixDQUE0QmIsTUFBTSxDQUFDQyxjQUFQLENBQXNCSyxNQUF0QixFQUE4QkksVUFBVSxDQUFDSSxHQUF6QyxFQUE4Q0osVUFBOUMsRUFBNEQsQ0FBRSxDQUFDLE9BQU8sVUFBVUssV0FBVixFQUF1QkMsVUFBdkIsRUFBbUNDLFdBQW5DLEVBQWdELENBQUUsSUFBSUQsVUFBSixFQUFnQlgsZ0JBQWdCLENBQUNVLFdBQVcsQ0FBQ0csU0FBYixFQUF3QkYsVUFBeEIsQ0FBaEIsQ0FBcUQsSUFBSUMsV0FBSixFQUFpQlosZ0JBQWdCLENBQUNVLFdBQUQsRUFBY0UsV0FBZCxDQUFoQixDQUE0QyxPQUFPRixXQUFQLENBQXFCLENBQWhOLENBQW1OLENBQTloQixFQUFuQjs7QUFFQSxJQUFJSSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsdUJBQUQsQ0FBcEI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHQyxzQkFBc0IsQ0FBQ0gsTUFBRCxDQUFuQzs7QUFFQSxJQUFJSSxVQUFVLEdBQUdILG1CQUFPLENBQUMsc0JBQUQsQ0FBeEI7O0FBRUEsU0FBU0Usc0JBQVQsQ0FBZ0NFLEdBQWhDLEVBQXFDLENBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVFLE9BQU8sRUFBRUYsR0FBWCxFQUFyQyxDQUF3RDs7QUFFL0YsU0FBU0csZUFBVCxDQUF5QkMsUUFBekIsRUFBbUNiLFdBQW5DLEVBQWdELENBQUUsSUFBSSxFQUFFYSxRQUFRLFlBQVliLFdBQXRCLENBQUosRUFBd0MsQ0FBRSxNQUFNLElBQUljLFNBQUosQ0FBYyxtQ0FBZCxDQUFOLENBQTJELENBQUU7O0FBRXpKLFNBQVNDLDBCQUFULENBQW9DQyxJQUFwQyxFQUEwQ0MsSUFBMUMsRUFBZ0QsQ0FBRSxJQUFJLENBQUNELElBQUwsRUFBVyxDQUFFLE1BQU0sSUFBSUUsY0FBSixDQUFtQiwyREFBbkIsQ0FBTixDQUF3RixDQUFDLE9BQU9ELElBQUksS0FBSyxPQUFPQSxJQUFQLEtBQWdCLFFBQWhCLElBQTRCLE9BQU9BLElBQVAsS0FBZ0IsVUFBakQsQ0FBSixHQUFtRUEsSUFBbkUsR0FBMEVELElBQWpGLENBQXdGOztBQUVoUCxTQUFTRyxTQUFULENBQW1CQyxRQUFuQixFQUE2QkMsVUFBN0IsRUFBeUMsQ0FBRSxJQUFJLE9BQU9BLFVBQVAsS0FBc0IsVUFBdEIsSUFBb0NBLFVBQVUsS0FBSyxJQUF2RCxFQUE2RCxDQUFFLE1BQU0sSUFBSVAsU0FBSixDQUFjLDZEQUE2RCxPQUFPTyxVQUFsRixDQUFOLENBQXNHLENBQUNELFFBQVEsQ0FBQ2pCLFNBQVQsR0FBcUJsQixNQUFNLENBQUNxQyxNQUFQLENBQWNELFVBQVUsSUFBSUEsVUFBVSxDQUFDbEIsU0FBdkMsRUFBa0QsRUFBRW9CLFdBQVcsRUFBRSxFQUFFbkMsS0FBSyxFQUFFZ0MsUUFBVCxFQUFtQnhCLFVBQVUsRUFBRSxLQUEvQixFQUFzQ0UsUUFBUSxFQUFFLElBQWhELEVBQXNERCxZQUFZLEVBQUUsSUFBcEUsRUFBZixFQUFsRCxDQUFyQixDQUFxSyxJQUFJd0IsVUFBSixFQUFnQnBDLE1BQU0sQ0FBQ3VDLGNBQVAsR0FBd0J2QyxNQUFNLENBQUN1QyxjQUFQLENBQXNCSixRQUF0QixFQUFnQ0MsVUFBaEMsQ0FBeEIsR0FBc0VELFFBQVEsQ0FBQ0ssU0FBVCxHQUFxQkosVUFBM0YsQ0FBd0c7O0FBRTllLElBQUlLLFFBQVEsR0FBRyxVQUFVQyxLQUFWLEVBQWlCO0FBQy9CUixXQUFTLENBQUNPLFFBQUQsRUFBV0MsS0FBWCxDQUFUOztBQUVBLFdBQVNELFFBQVQsQ0FBa0JFLE1BQWxCLEVBQTBCQyxPQUExQixFQUFtQztBQUNsQ2pCLG1CQUFlLENBQUMsSUFBRCxFQUFPYyxRQUFQLENBQWY7O0FBRUEsV0FBT1gsMEJBQTBCLENBQUMsSUFBRCxFQUFPLENBQUNXLFFBQVEsQ0FBQ0QsU0FBVCxJQUFzQnhDLE1BQU0sQ0FBQzZDLGNBQVAsQ0FBc0JKLFFBQXRCLENBQXZCLEVBQXdEVCxJQUF4RCxDQUE2RCxJQUE3RCxFQUFtRVQsVUFBVSxDQUFDdUIsWUFBWCxHQUEwQkgsTUFBN0YsRUFBcUdDLE9BQXJHLENBQVAsQ0FBakM7QUFDQTs7QUFFRHhDLGNBQVksQ0FBQ3FDLFFBQUQsRUFBVyxDQUFDO0FBQ3ZCM0IsT0FBRyxFQUFFLE9BRGtCO0FBRXZCWCxTQUFLLEVBQUUsU0FBUzRDLEtBQVQsR0FBaUI7QUFDdkIsYUFBTyxJQUFJQyxNQUFKLENBQVcsTUFBTXpCLFVBQVUsQ0FBQzBCLE9BQWpCLEdBQTJCLElBQXRDLEVBQTRDQyxJQUE1QyxDQUFpRCxLQUFLQyxJQUF0RCxDQUFQO0FBQ0EsS0FKc0IsRUFBRCxDQUFYLENBQVo7OztBQU9BLFNBQU9WLFFBQVA7QUFDQSxDQWpCYyxDQWlCYnBCLE1BQU0sQ0FBQ0ssT0FqQk0sQ0FBZjs7QUFtQkF4QixPQUFPLENBQUN3QixPQUFSLEdBQWtCZSxRQUFsQiIsImZpbGUiOiI0NjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfQ09ERTIgPSByZXF1aXJlKCcuL0NPREUxMjguanMnKTtcblxudmFyIF9DT0RFMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NPREUyKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBDT0RFMTI4QSA9IGZ1bmN0aW9uIChfQ09ERSkge1xuXHRfaW5oZXJpdHMoQ09ERTEyOEEsIF9DT0RFKTtcblxuXHRmdW5jdGlvbiBDT0RFMTI4QShzdHJpbmcsIG9wdGlvbnMpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ09ERTEyOEEpO1xuXG5cdFx0cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDT0RFMTI4QS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENPREUxMjhBKSkuY2FsbCh0aGlzLCBfY29uc3RhbnRzLkFfU1RBUlRfQ0hBUiArIHN0cmluZywgb3B0aW9ucykpO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKENPREUxMjhBLCBbe1xuXHRcdGtleTogJ3ZhbGlkJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gdmFsaWQoKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBfY29uc3RhbnRzLkFfQ0hBUlMgKyAnKyQnKS50ZXN0KHRoaXMuZGF0YSk7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIENPREUxMjhBO1xufShfQ09ERTMuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENPREUxMjhBOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///467\n");

/***/ }),

/***/ 468:
/*!************************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/CODE128/CODE128B.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _CODE2 = __webpack_require__(/*! ./CODE128.js */ 464);\n\nvar _CODE3 = _interopRequireDefault(_CODE2);\n\nvar _constants = __webpack_require__(/*! ./constants */ 465);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar CODE128B = function (_CODE) {\n  _inherits(CODE128B, _CODE);\n\n  function CODE128B(string, options) {\n    _classCallCheck(this, CODE128B);\n\n    return _possibleConstructorReturn(this, (CODE128B.__proto__ || Object.getPrototypeOf(CODE128B)).call(this, _constants.B_START_CHAR + string, options));\n  }\n\n  _createClass(CODE128B, [{\n    key: 'valid',\n    value: function valid() {\n      return new RegExp('^' + _constants.B_CHARS + '+$').test(this.data);\n    } }]);\n\n\n  return CODE128B;\n}(_CODE3.default);\n\nexports.default = CODE128B;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9DT0RFMTI4L0NPREUxMjhCLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJrZXkiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIl9DT0RFMiIsInJlcXVpcmUiLCJfQ09ERTMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NvbnN0YW50cyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQ09ERTEyOEIiLCJfQ09ERSIsInN0cmluZyIsIm9wdGlvbnMiLCJnZXRQcm90b3R5cGVPZiIsIkJfU1RBUlRfQ0hBUiIsInZhbGlkIiwiUmVnRXhwIiwiQl9DSEFSUyIsInRlc3QiLCJkYXRhIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUM1Q0MsT0FBSyxFQUFFLElBRHFDLEVBQTdDOzs7QUFJQSxJQUFJQyxZQUFZLEdBQUcsWUFBWSxDQUFFLFNBQVNDLGdCQUFULENBQTBCQyxNQUExQixFQUFrQ0MsS0FBbEMsRUFBeUMsQ0FBRSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELEtBQUssQ0FBQ0UsTUFBMUIsRUFBa0NELENBQUMsRUFBbkMsRUFBdUMsQ0FBRSxJQUFJRSxVQUFVLEdBQUdILEtBQUssQ0FBQ0MsQ0FBRCxDQUF0QixDQUEyQkUsVUFBVSxDQUFDQyxVQUFYLEdBQXdCRCxVQUFVLENBQUNDLFVBQVgsSUFBeUIsS0FBakQsQ0FBd0RELFVBQVUsQ0FBQ0UsWUFBWCxHQUEwQixJQUExQixDQUFnQyxJQUFJLFdBQVdGLFVBQWYsRUFBMkJBLFVBQVUsQ0FBQ0csUUFBWCxHQUFzQixJQUF0QixDQUE0QmIsTUFBTSxDQUFDQyxjQUFQLENBQXNCSyxNQUF0QixFQUE4QkksVUFBVSxDQUFDSSxHQUF6QyxFQUE4Q0osVUFBOUMsRUFBNEQsQ0FBRSxDQUFDLE9BQU8sVUFBVUssV0FBVixFQUF1QkMsVUFBdkIsRUFBbUNDLFdBQW5DLEVBQWdELENBQUUsSUFBSUQsVUFBSixFQUFnQlgsZ0JBQWdCLENBQUNVLFdBQVcsQ0FBQ0csU0FBYixFQUF3QkYsVUFBeEIsQ0FBaEIsQ0FBcUQsSUFBSUMsV0FBSixFQUFpQlosZ0JBQWdCLENBQUNVLFdBQUQsRUFBY0UsV0FBZCxDQUFoQixDQUE0QyxPQUFPRixXQUFQLENBQXFCLENBQWhOLENBQW1OLENBQTloQixFQUFuQjs7QUFFQSxJQUFJSSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsdUJBQUQsQ0FBcEI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHQyxzQkFBc0IsQ0FBQ0gsTUFBRCxDQUFuQzs7QUFFQSxJQUFJSSxVQUFVLEdBQUdILG1CQUFPLENBQUMsc0JBQUQsQ0FBeEI7O0FBRUEsU0FBU0Usc0JBQVQsQ0FBZ0NFLEdBQWhDLEVBQXFDLENBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVFLE9BQU8sRUFBRUYsR0FBWCxFQUFyQyxDQUF3RDs7QUFFL0YsU0FBU0csZUFBVCxDQUF5QkMsUUFBekIsRUFBbUNiLFdBQW5DLEVBQWdELENBQUUsSUFBSSxFQUFFYSxRQUFRLFlBQVliLFdBQXRCLENBQUosRUFBd0MsQ0FBRSxNQUFNLElBQUljLFNBQUosQ0FBYyxtQ0FBZCxDQUFOLENBQTJELENBQUU7O0FBRXpKLFNBQVNDLDBCQUFULENBQW9DQyxJQUFwQyxFQUEwQ0MsSUFBMUMsRUFBZ0QsQ0FBRSxJQUFJLENBQUNELElBQUwsRUFBVyxDQUFFLE1BQU0sSUFBSUUsY0FBSixDQUFtQiwyREFBbkIsQ0FBTixDQUF3RixDQUFDLE9BQU9ELElBQUksS0FBSyxPQUFPQSxJQUFQLEtBQWdCLFFBQWhCLElBQTRCLE9BQU9BLElBQVAsS0FBZ0IsVUFBakQsQ0FBSixHQUFtRUEsSUFBbkUsR0FBMEVELElBQWpGLENBQXdGOztBQUVoUCxTQUFTRyxTQUFULENBQW1CQyxRQUFuQixFQUE2QkMsVUFBN0IsRUFBeUMsQ0FBRSxJQUFJLE9BQU9BLFVBQVAsS0FBc0IsVUFBdEIsSUFBb0NBLFVBQVUsS0FBSyxJQUF2RCxFQUE2RCxDQUFFLE1BQU0sSUFBSVAsU0FBSixDQUFjLDZEQUE2RCxPQUFPTyxVQUFsRixDQUFOLENBQXNHLENBQUNELFFBQVEsQ0FBQ2pCLFNBQVQsR0FBcUJsQixNQUFNLENBQUNxQyxNQUFQLENBQWNELFVBQVUsSUFBSUEsVUFBVSxDQUFDbEIsU0FBdkMsRUFBa0QsRUFBRW9CLFdBQVcsRUFBRSxFQUFFbkMsS0FBSyxFQUFFZ0MsUUFBVCxFQUFtQnhCLFVBQVUsRUFBRSxLQUEvQixFQUFzQ0UsUUFBUSxFQUFFLElBQWhELEVBQXNERCxZQUFZLEVBQUUsSUFBcEUsRUFBZixFQUFsRCxDQUFyQixDQUFxSyxJQUFJd0IsVUFBSixFQUFnQnBDLE1BQU0sQ0FBQ3VDLGNBQVAsR0FBd0J2QyxNQUFNLENBQUN1QyxjQUFQLENBQXNCSixRQUF0QixFQUFnQ0MsVUFBaEMsQ0FBeEIsR0FBc0VELFFBQVEsQ0FBQ0ssU0FBVCxHQUFxQkosVUFBM0YsQ0FBd0c7O0FBRTllLElBQUlLLFFBQVEsR0FBRyxVQUFVQyxLQUFWLEVBQWlCO0FBQy9CUixXQUFTLENBQUNPLFFBQUQsRUFBV0MsS0FBWCxDQUFUOztBQUVBLFdBQVNELFFBQVQsQ0FBa0JFLE1BQWxCLEVBQTBCQyxPQUExQixFQUFtQztBQUNsQ2pCLG1CQUFlLENBQUMsSUFBRCxFQUFPYyxRQUFQLENBQWY7O0FBRUEsV0FBT1gsMEJBQTBCLENBQUMsSUFBRCxFQUFPLENBQUNXLFFBQVEsQ0FBQ0QsU0FBVCxJQUFzQnhDLE1BQU0sQ0FBQzZDLGNBQVAsQ0FBc0JKLFFBQXRCLENBQXZCLEVBQXdEVCxJQUF4RCxDQUE2RCxJQUE3RCxFQUFtRVQsVUFBVSxDQUFDdUIsWUFBWCxHQUEwQkgsTUFBN0YsRUFBcUdDLE9BQXJHLENBQVAsQ0FBakM7QUFDQTs7QUFFRHhDLGNBQVksQ0FBQ3FDLFFBQUQsRUFBVyxDQUFDO0FBQ3ZCM0IsT0FBRyxFQUFFLE9BRGtCO0FBRXZCWCxTQUFLLEVBQUUsU0FBUzRDLEtBQVQsR0FBaUI7QUFDdkIsYUFBTyxJQUFJQyxNQUFKLENBQVcsTUFBTXpCLFVBQVUsQ0FBQzBCLE9BQWpCLEdBQTJCLElBQXRDLEVBQTRDQyxJQUE1QyxDQUFpRCxLQUFLQyxJQUF0RCxDQUFQO0FBQ0EsS0FKc0IsRUFBRCxDQUFYLENBQVo7OztBQU9BLFNBQU9WLFFBQVA7QUFDQSxDQWpCYyxDQWlCYnBCLE1BQU0sQ0FBQ0ssT0FqQk0sQ0FBZjs7QUFtQkF4QixPQUFPLENBQUN3QixPQUFSLEdBQWtCZSxRQUFsQiIsImZpbGUiOiI0NjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfQ09ERTIgPSByZXF1aXJlKCcuL0NPREUxMjguanMnKTtcblxudmFyIF9DT0RFMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NPREUyKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBDT0RFMTI4QiA9IGZ1bmN0aW9uIChfQ09ERSkge1xuXHRfaW5oZXJpdHMoQ09ERTEyOEIsIF9DT0RFKTtcblxuXHRmdW5jdGlvbiBDT0RFMTI4QihzdHJpbmcsIG9wdGlvbnMpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ09ERTEyOEIpO1xuXG5cdFx0cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDT0RFMTI4Qi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENPREUxMjhCKSkuY2FsbCh0aGlzLCBfY29uc3RhbnRzLkJfU1RBUlRfQ0hBUiArIHN0cmluZywgb3B0aW9ucykpO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKENPREUxMjhCLCBbe1xuXHRcdGtleTogJ3ZhbGlkJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gdmFsaWQoKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBfY29uc3RhbnRzLkJfQ0hBUlMgKyAnKyQnKS50ZXN0KHRoaXMuZGF0YSk7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIENPREUxMjhCO1xufShfQ09ERTMuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENPREUxMjhCOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///468\n");

/***/ }),

/***/ 469:
/*!************************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/CODE128/CODE128C.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _CODE2 = __webpack_require__(/*! ./CODE128.js */ 464);\n\nvar _CODE3 = _interopRequireDefault(_CODE2);\n\nvar _constants = __webpack_require__(/*! ./constants */ 465);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar CODE128C = function (_CODE) {\n  _inherits(CODE128C, _CODE);\n\n  function CODE128C(string, options) {\n    _classCallCheck(this, CODE128C);\n\n    return _possibleConstructorReturn(this, (CODE128C.__proto__ || Object.getPrototypeOf(CODE128C)).call(this, _constants.C_START_CHAR + string, options));\n  }\n\n  _createClass(CODE128C, [{\n    key: 'valid',\n    value: function valid() {\n      return new RegExp('^' + _constants.C_CHARS + '+$').test(this.data);\n    } }]);\n\n\n  return CODE128C;\n}(_CODE3.default);\n\nexports.default = CODE128C;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9DT0RFMTI4L0NPREUxMjhDLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJrZXkiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIl9DT0RFMiIsInJlcXVpcmUiLCJfQ09ERTMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NvbnN0YW50cyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQ09ERTEyOEMiLCJfQ09ERSIsInN0cmluZyIsIm9wdGlvbnMiLCJnZXRQcm90b3R5cGVPZiIsIkNfU1RBUlRfQ0hBUiIsInZhbGlkIiwiUmVnRXhwIiwiQ19DSEFSUyIsInRlc3QiLCJkYXRhIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUM1Q0MsT0FBSyxFQUFFLElBRHFDLEVBQTdDOzs7QUFJQSxJQUFJQyxZQUFZLEdBQUcsWUFBWSxDQUFFLFNBQVNDLGdCQUFULENBQTBCQyxNQUExQixFQUFrQ0MsS0FBbEMsRUFBeUMsQ0FBRSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELEtBQUssQ0FBQ0UsTUFBMUIsRUFBa0NELENBQUMsRUFBbkMsRUFBdUMsQ0FBRSxJQUFJRSxVQUFVLEdBQUdILEtBQUssQ0FBQ0MsQ0FBRCxDQUF0QixDQUEyQkUsVUFBVSxDQUFDQyxVQUFYLEdBQXdCRCxVQUFVLENBQUNDLFVBQVgsSUFBeUIsS0FBakQsQ0FBd0RELFVBQVUsQ0FBQ0UsWUFBWCxHQUEwQixJQUExQixDQUFnQyxJQUFJLFdBQVdGLFVBQWYsRUFBMkJBLFVBQVUsQ0FBQ0csUUFBWCxHQUFzQixJQUF0QixDQUE0QmIsTUFBTSxDQUFDQyxjQUFQLENBQXNCSyxNQUF0QixFQUE4QkksVUFBVSxDQUFDSSxHQUF6QyxFQUE4Q0osVUFBOUMsRUFBNEQsQ0FBRSxDQUFDLE9BQU8sVUFBVUssV0FBVixFQUF1QkMsVUFBdkIsRUFBbUNDLFdBQW5DLEVBQWdELENBQUUsSUFBSUQsVUFBSixFQUFnQlgsZ0JBQWdCLENBQUNVLFdBQVcsQ0FBQ0csU0FBYixFQUF3QkYsVUFBeEIsQ0FBaEIsQ0FBcUQsSUFBSUMsV0FBSixFQUFpQlosZ0JBQWdCLENBQUNVLFdBQUQsRUFBY0UsV0FBZCxDQUFoQixDQUE0QyxPQUFPRixXQUFQLENBQXFCLENBQWhOLENBQW1OLENBQTloQixFQUFuQjs7QUFFQSxJQUFJSSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsdUJBQUQsQ0FBcEI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHQyxzQkFBc0IsQ0FBQ0gsTUFBRCxDQUFuQzs7QUFFQSxJQUFJSSxVQUFVLEdBQUdILG1CQUFPLENBQUMsc0JBQUQsQ0FBeEI7O0FBRUEsU0FBU0Usc0JBQVQsQ0FBZ0NFLEdBQWhDLEVBQXFDLENBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVFLE9BQU8sRUFBRUYsR0FBWCxFQUFyQyxDQUF3RDs7QUFFL0YsU0FBU0csZUFBVCxDQUF5QkMsUUFBekIsRUFBbUNiLFdBQW5DLEVBQWdELENBQUUsSUFBSSxFQUFFYSxRQUFRLFlBQVliLFdBQXRCLENBQUosRUFBd0MsQ0FBRSxNQUFNLElBQUljLFNBQUosQ0FBYyxtQ0FBZCxDQUFOLENBQTJELENBQUU7O0FBRXpKLFNBQVNDLDBCQUFULENBQW9DQyxJQUFwQyxFQUEwQ0MsSUFBMUMsRUFBZ0QsQ0FBRSxJQUFJLENBQUNELElBQUwsRUFBVyxDQUFFLE1BQU0sSUFBSUUsY0FBSixDQUFtQiwyREFBbkIsQ0FBTixDQUF3RixDQUFDLE9BQU9ELElBQUksS0FBSyxPQUFPQSxJQUFQLEtBQWdCLFFBQWhCLElBQTRCLE9BQU9BLElBQVAsS0FBZ0IsVUFBakQsQ0FBSixHQUFtRUEsSUFBbkUsR0FBMEVELElBQWpGLENBQXdGOztBQUVoUCxTQUFTRyxTQUFULENBQW1CQyxRQUFuQixFQUE2QkMsVUFBN0IsRUFBeUMsQ0FBRSxJQUFJLE9BQU9BLFVBQVAsS0FBc0IsVUFBdEIsSUFBb0NBLFVBQVUsS0FBSyxJQUF2RCxFQUE2RCxDQUFFLE1BQU0sSUFBSVAsU0FBSixDQUFjLDZEQUE2RCxPQUFPTyxVQUFsRixDQUFOLENBQXNHLENBQUNELFFBQVEsQ0FBQ2pCLFNBQVQsR0FBcUJsQixNQUFNLENBQUNxQyxNQUFQLENBQWNELFVBQVUsSUFBSUEsVUFBVSxDQUFDbEIsU0FBdkMsRUFBa0QsRUFBRW9CLFdBQVcsRUFBRSxFQUFFbkMsS0FBSyxFQUFFZ0MsUUFBVCxFQUFtQnhCLFVBQVUsRUFBRSxLQUEvQixFQUFzQ0UsUUFBUSxFQUFFLElBQWhELEVBQXNERCxZQUFZLEVBQUUsSUFBcEUsRUFBZixFQUFsRCxDQUFyQixDQUFxSyxJQUFJd0IsVUFBSixFQUFnQnBDLE1BQU0sQ0FBQ3VDLGNBQVAsR0FBd0J2QyxNQUFNLENBQUN1QyxjQUFQLENBQXNCSixRQUF0QixFQUFnQ0MsVUFBaEMsQ0FBeEIsR0FBc0VELFFBQVEsQ0FBQ0ssU0FBVCxHQUFxQkosVUFBM0YsQ0FBd0c7O0FBRTllLElBQUlLLFFBQVEsR0FBRyxVQUFVQyxLQUFWLEVBQWlCO0FBQy9CUixXQUFTLENBQUNPLFFBQUQsRUFBV0MsS0FBWCxDQUFUOztBQUVBLFdBQVNELFFBQVQsQ0FBa0JFLE1BQWxCLEVBQTBCQyxPQUExQixFQUFtQztBQUNsQ2pCLG1CQUFlLENBQUMsSUFBRCxFQUFPYyxRQUFQLENBQWY7O0FBRUEsV0FBT1gsMEJBQTBCLENBQUMsSUFBRCxFQUFPLENBQUNXLFFBQVEsQ0FBQ0QsU0FBVCxJQUFzQnhDLE1BQU0sQ0FBQzZDLGNBQVAsQ0FBc0JKLFFBQXRCLENBQXZCLEVBQXdEVCxJQUF4RCxDQUE2RCxJQUE3RCxFQUFtRVQsVUFBVSxDQUFDdUIsWUFBWCxHQUEwQkgsTUFBN0YsRUFBcUdDLE9BQXJHLENBQVAsQ0FBakM7QUFDQTs7QUFFRHhDLGNBQVksQ0FBQ3FDLFFBQUQsRUFBVyxDQUFDO0FBQ3ZCM0IsT0FBRyxFQUFFLE9BRGtCO0FBRXZCWCxTQUFLLEVBQUUsU0FBUzRDLEtBQVQsR0FBaUI7QUFDdkIsYUFBTyxJQUFJQyxNQUFKLENBQVcsTUFBTXpCLFVBQVUsQ0FBQzBCLE9BQWpCLEdBQTJCLElBQXRDLEVBQTRDQyxJQUE1QyxDQUFpRCxLQUFLQyxJQUF0RCxDQUFQO0FBQ0EsS0FKc0IsRUFBRCxDQUFYLENBQVo7OztBQU9BLFNBQU9WLFFBQVA7QUFDQSxDQWpCYyxDQWlCYnBCLE1BQU0sQ0FBQ0ssT0FqQk0sQ0FBZjs7QUFtQkF4QixPQUFPLENBQUN3QixPQUFSLEdBQWtCZSxRQUFsQiIsImZpbGUiOiI0NjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfQ09ERTIgPSByZXF1aXJlKCcuL0NPREUxMjguanMnKTtcblxudmFyIF9DT0RFMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NPREUyKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBDT0RFMTI4QyA9IGZ1bmN0aW9uIChfQ09ERSkge1xuXHRfaW5oZXJpdHMoQ09ERTEyOEMsIF9DT0RFKTtcblxuXHRmdW5jdGlvbiBDT0RFMTI4QyhzdHJpbmcsIG9wdGlvbnMpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ09ERTEyOEMpO1xuXG5cdFx0cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDT0RFMTI4Qy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENPREUxMjhDKSkuY2FsbCh0aGlzLCBfY29uc3RhbnRzLkNfU1RBUlRfQ0hBUiArIHN0cmluZywgb3B0aW9ucykpO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKENPREUxMjhDLCBbe1xuXHRcdGtleTogJ3ZhbGlkJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gdmFsaWQoKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBfY29uc3RhbnRzLkNfQ0hBUlMgKyAnKyQnKS50ZXN0KHRoaXMuZGF0YSk7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIENPREUxMjhDO1xufShfQ09ERTMuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENPREUxMjhDOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///469\n");

/***/ }),

/***/ 470:
/*!*********************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/EAN_UPC/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.UPCE = exports.UPC = exports.EAN2 = exports.EAN5 = exports.EAN8 = exports.EAN13 = undefined;\n\nvar _EAN = __webpack_require__(/*! ./EAN13.js */ 471);\n\nvar _EAN2 = _interopRequireDefault(_EAN);\n\nvar _EAN3 = __webpack_require__(/*! ./EAN8.js */ 475);\n\nvar _EAN4 = _interopRequireDefault(_EAN3);\n\nvar _EAN5 = __webpack_require__(/*! ./EAN5.js */ 476);\n\nvar _EAN6 = _interopRequireDefault(_EAN5);\n\nvar _EAN7 = __webpack_require__(/*! ./EAN2.js */ 477);\n\nvar _EAN8 = _interopRequireDefault(_EAN7);\n\nvar _UPC = __webpack_require__(/*! ./UPC.js */ 478);\n\nvar _UPC2 = _interopRequireDefault(_UPC);\n\nvar _UPCE = __webpack_require__(/*! ./UPCE.js */ 479);\n\nvar _UPCE2 = _interopRequireDefault(_UPCE);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nexports.EAN13 = _EAN2.default;\nexports.EAN8 = _EAN4.default;\nexports.EAN5 = _EAN6.default;\nexports.EAN2 = _EAN8.default;\nexports.UPC = _UPC2.default;\nexports.UPCE = _UPCE2.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9FQU5fVVBDL2luZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVVBDRSIsIlVQQyIsIkVBTjIiLCJFQU41IiwiRUFOOCIsIkVBTjEzIiwidW5kZWZpbmVkIiwiX0VBTiIsInJlcXVpcmUiLCJfRUFOMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfRUFOMyIsIl9FQU40IiwiX0VBTjUiLCJfRUFONiIsIl9FQU43IiwiX0VBTjgiLCJfVVBDIiwiX1VQQzIiLCJfVVBDRSIsIl9VUENFMiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsT0FBSyxFQUFFLElBRG9DLEVBQTdDOztBQUdBRCxPQUFPLENBQUNFLElBQVIsR0FBZUYsT0FBTyxDQUFDRyxHQUFSLEdBQWNILE9BQU8sQ0FBQ0ksSUFBUixHQUFlSixPQUFPLENBQUNLLElBQVIsR0FBZUwsT0FBTyxDQUFDTSxJQUFSLEdBQWVOLE9BQU8sQ0FBQ08sS0FBUixHQUFnQkMsU0FBMUY7O0FBRUEsSUFBSUMsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLHFCQUFELENBQWxCOztBQUVBLElBQUlDLEtBQUssR0FBR0Msc0JBQXNCLENBQUNILElBQUQsQ0FBbEM7O0FBRUEsSUFBSUksS0FBSyxHQUFHSCxtQkFBTyxDQUFDLG9CQUFELENBQW5COztBQUVBLElBQUlJLEtBQUssR0FBR0Ysc0JBQXNCLENBQUNDLEtBQUQsQ0FBbEM7O0FBRUEsSUFBSUUsS0FBSyxHQUFHTCxtQkFBTyxDQUFDLG9CQUFELENBQW5COztBQUVBLElBQUlNLEtBQUssR0FBR0osc0JBQXNCLENBQUNHLEtBQUQsQ0FBbEM7O0FBRUEsSUFBSUUsS0FBSyxHQUFHUCxtQkFBTyxDQUFDLG9CQUFELENBQW5COztBQUVBLElBQUlRLEtBQUssR0FBR04sc0JBQXNCLENBQUNLLEtBQUQsQ0FBbEM7O0FBRUEsSUFBSUUsSUFBSSxHQUFHVCxtQkFBTyxDQUFDLG1CQUFELENBQWxCOztBQUVBLElBQUlVLEtBQUssR0FBR1Isc0JBQXNCLENBQUNPLElBQUQsQ0FBbEM7O0FBRUEsSUFBSUUsS0FBSyxHQUFHWCxtQkFBTyxDQUFDLG9CQUFELENBQW5COztBQUVBLElBQUlZLE1BQU0sR0FBR1Ysc0JBQXNCLENBQUNTLEtBQUQsQ0FBbkM7O0FBRUEsU0FBU1Qsc0JBQVQsQ0FBZ0NXLEdBQWhDLEVBQXFDLENBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVFLE9BQU8sRUFBRUYsR0FBWCxFQUFyQyxDQUF3RDs7QUFFL0Z2QixPQUFPLENBQUNPLEtBQVIsR0FBZ0JJLEtBQUssQ0FBQ2MsT0FBdEI7QUFDQXpCLE9BQU8sQ0FBQ00sSUFBUixHQUFlUSxLQUFLLENBQUNXLE9BQXJCO0FBQ0F6QixPQUFPLENBQUNLLElBQVIsR0FBZVcsS0FBSyxDQUFDUyxPQUFyQjtBQUNBekIsT0FBTyxDQUFDSSxJQUFSLEdBQWVjLEtBQUssQ0FBQ08sT0FBckI7QUFDQXpCLE9BQU8sQ0FBQ0csR0FBUixHQUFjaUIsS0FBSyxDQUFDSyxPQUFwQjtBQUNBekIsT0FBTyxDQUFDRSxJQUFSLEdBQWVvQixNQUFNLENBQUNHLE9BQXRCIiwiZmlsZSI6IjQ3MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVVBDRSA9IGV4cG9ydHMuVVBDID0gZXhwb3J0cy5FQU4yID0gZXhwb3J0cy5FQU41ID0gZXhwb3J0cy5FQU44ID0gZXhwb3J0cy5FQU4xMyA9IHVuZGVmaW5lZDtcblxudmFyIF9FQU4gPSByZXF1aXJlKCcuL0VBTjEzLmpzJyk7XG5cbnZhciBfRUFOMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0VBTik7XG5cbnZhciBfRUFOMyA9IHJlcXVpcmUoJy4vRUFOOC5qcycpO1xuXG52YXIgX0VBTjQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FQU4zKTtcblxudmFyIF9FQU41ID0gcmVxdWlyZSgnLi9FQU41LmpzJyk7XG5cbnZhciBfRUFONiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0VBTjUpO1xuXG52YXIgX0VBTjcgPSByZXF1aXJlKCcuL0VBTjIuanMnKTtcblxudmFyIF9FQU44ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRUFONyk7XG5cbnZhciBfVVBDID0gcmVxdWlyZSgnLi9VUEMuanMnKTtcblxudmFyIF9VUEMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVVBDKTtcblxudmFyIF9VUENFID0gcmVxdWlyZSgnLi9VUENFLmpzJyk7XG5cbnZhciBfVVBDRTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9VUENFKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5FQU4xMyA9IF9FQU4yLmRlZmF1bHQ7XG5leHBvcnRzLkVBTjggPSBfRUFONC5kZWZhdWx0O1xuZXhwb3J0cy5FQU41ID0gX0VBTjYuZGVmYXVsdDtcbmV4cG9ydHMuRUFOMiA9IF9FQU44LmRlZmF1bHQ7XG5leHBvcnRzLlVQQyA9IF9VUEMyLmRlZmF1bHQ7XG5leHBvcnRzLlVQQ0UgPSBfVVBDRTIuZGVmYXVsdDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///470\n");

/***/ }),

/***/ 471:
/*!*********************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/EAN_UPC/EAN13.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _get = function get(object, property, receiver) {if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {return get(parent, property, receiver);}} else if (\"value\" in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}};\n\nvar _constants = __webpack_require__(/*! ./constants */ 472);\n\nvar _EAN2 = __webpack_require__(/*! ./EAN */ 473);\n\nvar _EAN3 = _interopRequireDefault(_EAN2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation:\n// https://en.wikipedia.org/wiki/International_Article_Number_(EAN)#Binary_encoding_of_data_digits_into_EAN-13_barcode\n\n// Calculate the checksum digit\n// https://en.wikipedia.org/wiki/International_Article_Number_(EAN)#Calculation_of_checksum_digit\nvar checksum = function checksum(number) {\n  var res = number.substr(0, 12).split('').map(function (n) {\n    return +n;\n  }).reduce(function (sum, a, idx) {\n    return idx % 2 ? sum + a * 3 : sum + a;\n  }, 0);\n\n  return (10 - res % 10) % 10;\n};\n\nvar EAN13 = function (_EAN) {\n  _inherits(EAN13, _EAN);\n\n  function EAN13(data, options) {\n    _classCallCheck(this, EAN13);\n\n    // Add checksum if it does not exist\n    if (data.search(/^[0-9]{12}$/) !== -1) {\n      data += checksum(data);\n    }\n\n    // Adds a last character to the end of the barcode\n    var _this = _possibleConstructorReturn(this, (EAN13.__proto__ || Object.getPrototypeOf(EAN13)).call(this, data, options));\n\n    _this.lastChar = options.lastChar;\n    return _this;\n  }\n\n  _createClass(EAN13, [{\n    key: 'valid',\n    value: function valid() {\n      return this.data.search(/^[0-9]{13}$/) !== -1 && +this.data[12] === checksum(this.data);\n    } },\n  {\n    key: 'leftText',\n    value: function leftText() {\n      return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'leftText', this).call(this, 1, 6);\n    } },\n  {\n    key: 'leftEncode',\n    value: function leftEncode() {\n      var data = this.data.substr(1, 6);\n      var structure = _constants.EAN13_STRUCTURE[this.data[0]];\n      return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'leftEncode', this).call(this, data, structure);\n    } },\n  {\n    key: 'rightText',\n    value: function rightText() {\n      return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'rightText', this).call(this, 7, 6);\n    } },\n  {\n    key: 'rightEncode',\n    value: function rightEncode() {\n      var data = this.data.substr(7, 6);\n      return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'rightEncode', this).call(this, data, 'RRRRRR');\n    }\n\n    // The \"standard\" way of printing EAN13 barcodes with guard bars\n  },\n  {\n    key: 'encodeGuarded',\n    value: function encodeGuarded() {\n      var data = _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'encodeGuarded', this).call(this);\n\n      // Extend data with left digit & last character\n      if (this.options.displayValue) {\n        data.unshift({\n          data: '000000000000',\n          text: this.text.substr(0, 1),\n          options: { textAlign: 'left', fontSize: this.fontSize } });\n\n\n        if (this.options.lastChar) {\n          data.push({\n            data: '00' });\n\n          data.push({\n            data: '00000',\n            text: this.options.lastChar,\n            options: { fontSize: this.fontSize } });\n\n        }\n      }\n\n      return data;\n    } }]);\n\n\n  return EAN13;\n}(_EAN3.default);\n\nexports.default = EAN13;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///471\n");

/***/ }),

/***/ 472:
/*!*************************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/EAN_UPC/constants.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n// Standard start end and middle bits\nvar SIDE_BIN = exports.SIDE_BIN = '101';\nvar MIDDLE_BIN = exports.MIDDLE_BIN = '01010';\n\nvar BINARIES = exports.BINARIES = {\n  'L': [// The L (left) type of encoding\n  '0001101', '0011001', '0010011', '0111101', '0100011', '0110001', '0101111', '0111011', '0110111', '0001011'],\n  'G': [// The G type of encoding\n  '0100111', '0110011', '0011011', '0100001', '0011101', '0111001', '0000101', '0010001', '0001001', '0010111'],\n  'R': [// The R (right) type of encoding\n  '1110010', '1100110', '1101100', '1000010', '1011100', '1001110', '1010000', '1000100', '1001000', '1110100'],\n  'O': [// The O (odd) encoding for UPC-E\n  '0001101', '0011001', '0010011', '0111101', '0100011', '0110001', '0101111', '0111011', '0110111', '0001011'],\n  'E': [// The E (even) encoding for UPC-E\n  '0100111', '0110011', '0011011', '0100001', '0011101', '0111001', '0000101', '0010001', '0001001', '0010111'] };\n\n\n// Define the EAN-2 structure\nvar EAN2_STRUCTURE = exports.EAN2_STRUCTURE = ['LL', 'LG', 'GL', 'GG'];\n\n// Define the EAN-5 structure\nvar EAN5_STRUCTURE = exports.EAN5_STRUCTURE = ['GGLLL', 'GLGLL', 'GLLGL', 'GLLLG', 'LGGLL', 'LLGGL', 'LLLGG', 'LGLGL', 'LGLLG', 'LLGLG'];\n\n// Define the EAN-13 structure\nvar EAN13_STRUCTURE = exports.EAN13_STRUCTURE = ['LLLLLL', 'LLGLGG', 'LLGGLG', 'LLGGGL', 'LGLLGG', 'LGGLLG', 'LGGGLL', 'LGLGLG', 'LGLGGL', 'LGGLGL'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9FQU5fVVBDL2NvbnN0YW50cy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlNJREVfQklOIiwiTUlERExFX0JJTiIsIkJJTkFSSUVTIiwiRUFOMl9TVFJVQ1RVUkUiLCJFQU41X1NUUlVDVFVSRSIsIkVBTjEzX1NUUlVDVFVSRSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDNUNDLE9BQUssRUFBRSxJQURxQyxFQUE3Qzs7QUFHQTtBQUNBLElBQUlDLFFBQVEsR0FBR0YsT0FBTyxDQUFDRSxRQUFSLEdBQW1CLEtBQWxDO0FBQ0EsSUFBSUMsVUFBVSxHQUFHSCxPQUFPLENBQUNHLFVBQVIsR0FBcUIsT0FBdEM7O0FBRUEsSUFBSUMsUUFBUSxHQUFHSixPQUFPLENBQUNJLFFBQVIsR0FBbUI7QUFDakMsT0FBSyxDQUFDO0FBQ04sV0FESyxFQUNNLFNBRE4sRUFDaUIsU0FEakIsRUFDNEIsU0FENUIsRUFDdUMsU0FEdkMsRUFDa0QsU0FEbEQsRUFDNkQsU0FEN0QsRUFDd0UsU0FEeEUsRUFDbUYsU0FEbkYsRUFDOEYsU0FEOUYsQ0FENEI7QUFHakMsT0FBSyxDQUFDO0FBQ04sV0FESyxFQUNNLFNBRE4sRUFDaUIsU0FEakIsRUFDNEIsU0FENUIsRUFDdUMsU0FEdkMsRUFDa0QsU0FEbEQsRUFDNkQsU0FEN0QsRUFDd0UsU0FEeEUsRUFDbUYsU0FEbkYsRUFDOEYsU0FEOUYsQ0FINEI7QUFLakMsT0FBSyxDQUFDO0FBQ04sV0FESyxFQUNNLFNBRE4sRUFDaUIsU0FEakIsRUFDNEIsU0FENUIsRUFDdUMsU0FEdkMsRUFDa0QsU0FEbEQsRUFDNkQsU0FEN0QsRUFDd0UsU0FEeEUsRUFDbUYsU0FEbkYsRUFDOEYsU0FEOUYsQ0FMNEI7QUFPakMsT0FBSyxDQUFDO0FBQ04sV0FESyxFQUNNLFNBRE4sRUFDaUIsU0FEakIsRUFDNEIsU0FENUIsRUFDdUMsU0FEdkMsRUFDa0QsU0FEbEQsRUFDNkQsU0FEN0QsRUFDd0UsU0FEeEUsRUFDbUYsU0FEbkYsRUFDOEYsU0FEOUYsQ0FQNEI7QUFTakMsT0FBSyxDQUFDO0FBQ04sV0FESyxFQUNNLFNBRE4sRUFDaUIsU0FEakIsRUFDNEIsU0FENUIsRUFDdUMsU0FEdkMsRUFDa0QsU0FEbEQsRUFDNkQsU0FEN0QsRUFDd0UsU0FEeEUsRUFDbUYsU0FEbkYsRUFDOEYsU0FEOUYsQ0FUNEIsRUFBbEM7OztBQWFBO0FBQ0EsSUFBSUMsY0FBYyxHQUFHTCxPQUFPLENBQUNLLGNBQVIsR0FBeUIsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsRUFBbUIsSUFBbkIsQ0FBOUM7O0FBRUE7QUFDQSxJQUFJQyxjQUFjLEdBQUdOLE9BQU8sQ0FBQ00sY0FBUixHQUF5QixDQUFDLE9BQUQsRUFBVSxPQUFWLEVBQW1CLE9BQW5CLEVBQTRCLE9BQTVCLEVBQXFDLE9BQXJDLEVBQThDLE9BQTlDLEVBQXVELE9BQXZELEVBQWdFLE9BQWhFLEVBQXlFLE9BQXpFLEVBQWtGLE9BQWxGLENBQTlDOztBQUVBO0FBQ0EsSUFBSUMsZUFBZSxHQUFHUCxPQUFPLENBQUNPLGVBQVIsR0FBMEIsQ0FBQyxRQUFELEVBQVcsUUFBWCxFQUFxQixRQUFyQixFQUErQixRQUEvQixFQUF5QyxRQUF6QyxFQUFtRCxRQUFuRCxFQUE2RCxRQUE3RCxFQUF1RSxRQUF2RSxFQUFpRixRQUFqRixFQUEyRixRQUEzRixDQUFoRCIsImZpbGUiOiI0NzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG4vLyBTdGFuZGFyZCBzdGFydCBlbmQgYW5kIG1pZGRsZSBiaXRzXG52YXIgU0lERV9CSU4gPSBleHBvcnRzLlNJREVfQklOID0gJzEwMSc7XG52YXIgTUlERExFX0JJTiA9IGV4cG9ydHMuTUlERExFX0JJTiA9ICcwMTAxMCc7XG5cbnZhciBCSU5BUklFUyA9IGV4cG9ydHMuQklOQVJJRVMgPSB7XG5cdCdMJzogWy8vIFRoZSBMIChsZWZ0KSB0eXBlIG9mIGVuY29kaW5nXG5cdCcwMDAxMTAxJywgJzAwMTEwMDEnLCAnMDAxMDAxMScsICcwMTExMTAxJywgJzAxMDAwMTEnLCAnMDExMDAwMScsICcwMTAxMTExJywgJzAxMTEwMTEnLCAnMDExMDExMScsICcwMDAxMDExJ10sXG5cdCdHJzogWy8vIFRoZSBHIHR5cGUgb2YgZW5jb2Rpbmdcblx0JzAxMDAxMTEnLCAnMDExMDAxMScsICcwMDExMDExJywgJzAxMDAwMDEnLCAnMDAxMTEwMScsICcwMTExMDAxJywgJzAwMDAxMDEnLCAnMDAxMDAwMScsICcwMDAxMDAxJywgJzAwMTAxMTEnXSxcblx0J1InOiBbLy8gVGhlIFIgKHJpZ2h0KSB0eXBlIG9mIGVuY29kaW5nXG5cdCcxMTEwMDEwJywgJzExMDAxMTAnLCAnMTEwMTEwMCcsICcxMDAwMDEwJywgJzEwMTExMDAnLCAnMTAwMTExMCcsICcxMDEwMDAwJywgJzEwMDAxMDAnLCAnMTAwMTAwMCcsICcxMTEwMTAwJ10sXG5cdCdPJzogWy8vIFRoZSBPIChvZGQpIGVuY29kaW5nIGZvciBVUEMtRVxuXHQnMDAwMTEwMScsICcwMDExMDAxJywgJzAwMTAwMTEnLCAnMDExMTEwMScsICcwMTAwMDExJywgJzAxMTAwMDEnLCAnMDEwMTExMScsICcwMTExMDExJywgJzAxMTAxMTEnLCAnMDAwMTAxMSddLFxuXHQnRSc6IFsvLyBUaGUgRSAoZXZlbikgZW5jb2RpbmcgZm9yIFVQQy1FXG5cdCcwMTAwMTExJywgJzAxMTAwMTEnLCAnMDAxMTAxMScsICcwMTAwMDAxJywgJzAwMTExMDEnLCAnMDExMTAwMScsICcwMDAwMTAxJywgJzAwMTAwMDEnLCAnMDAwMTAwMScsICcwMDEwMTExJ11cbn07XG5cbi8vIERlZmluZSB0aGUgRUFOLTIgc3RydWN0dXJlXG52YXIgRUFOMl9TVFJVQ1RVUkUgPSBleHBvcnRzLkVBTjJfU1RSVUNUVVJFID0gWydMTCcsICdMRycsICdHTCcsICdHRyddO1xuXG4vLyBEZWZpbmUgdGhlIEVBTi01IHN0cnVjdHVyZVxudmFyIEVBTjVfU1RSVUNUVVJFID0gZXhwb3J0cy5FQU41X1NUUlVDVFVSRSA9IFsnR0dMTEwnLCAnR0xHTEwnLCAnR0xMR0wnLCAnR0xMTEcnLCAnTEdHTEwnLCAnTExHR0wnLCAnTExMR0cnLCAnTEdMR0wnLCAnTEdMTEcnLCAnTExHTEcnXTtcblxuLy8gRGVmaW5lIHRoZSBFQU4tMTMgc3RydWN0dXJlXG52YXIgRUFOMTNfU1RSVUNUVVJFID0gZXhwb3J0cy5FQU4xM19TVFJVQ1RVUkUgPSBbJ0xMTExMTCcsICdMTEdMR0cnLCAnTExHR0xHJywgJ0xMR0dHTCcsICdMR0xMR0cnLCAnTEdHTExHJywgJ0xHR0dMTCcsICdMR0xHTEcnLCAnTEdMR0dMJywgJ0xHR0xHTCddOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///472\n");

/***/ }),

/***/ 473:
/*!*******************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/EAN_UPC/EAN.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _constants = __webpack_require__(/*! ./constants */ 472);\n\nvar _encoder = __webpack_require__(/*! ./encoder */ 474);\n\nvar _encoder2 = _interopRequireDefault(_encoder);\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode */ 461);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\n// Base class for EAN8 & EAN13\nvar EAN = function (_Barcode) {\n  _inherits(EAN, _Barcode);\n\n  function EAN(data, options) {\n    _classCallCheck(this, EAN);\n\n    // Make sure the font is not bigger than the space between the guard bars\n    var _this = _possibleConstructorReturn(this, (EAN.__proto__ || Object.getPrototypeOf(EAN)).call(this, data, options));\n\n    _this.fontSize = !options.flat && options.fontSize > options.width * 10 ? options.width * 10 : options.fontSize;\n\n    // Make the guard bars go down half the way of the text\n    _this.guardHeight = options.height + _this.fontSize / 2 + options.textMargin;\n    return _this;\n  }\n\n  _createClass(EAN, [{\n    key: 'encode',\n    value: function encode() {\n      return this.options.flat ? this.encodeFlat() : this.encodeGuarded();\n    } },\n  {\n    key: 'leftText',\n    value: function leftText(from, to) {\n      return this.text.substr(from, to);\n    } },\n  {\n    key: 'leftEncode',\n    value: function leftEncode(data, structure) {\n      return (0, _encoder2.default)(data, structure);\n    } },\n  {\n    key: 'rightText',\n    value: function rightText(from, to) {\n      return this.text.substr(from, to);\n    } },\n  {\n    key: 'rightEncode',\n    value: function rightEncode(data, structure) {\n      return (0, _encoder2.default)(data, structure);\n    } },\n  {\n    key: 'encodeGuarded',\n    value: function encodeGuarded() {\n      var textOptions = { fontSize: this.fontSize };\n      var guardOptions = { height: this.guardHeight };\n\n      return [{ data: _constants.SIDE_BIN, options: guardOptions }, { data: this.leftEncode(), text: this.leftText(), options: textOptions }, { data: _constants.MIDDLE_BIN, options: guardOptions }, { data: this.rightEncode(), text: this.rightText(), options: textOptions }, { data: _constants.SIDE_BIN, options: guardOptions }];\n    } },\n  {\n    key: 'encodeFlat',\n    value: function encodeFlat() {\n      var data = [_constants.SIDE_BIN, this.leftEncode(), _constants.MIDDLE_BIN, this.rightEncode(), _constants.SIDE_BIN];\n\n      return {\n        data: data.join(''),\n        text: this.text };\n\n    } }]);\n\n\n  return EAN;\n}(_Barcode3.default);\n\nexports.default = EAN;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///473\n");

/***/ }),

/***/ 474:
/*!***********************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/EAN_UPC/encoder.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _constants = __webpack_require__(/*! ./constants */ 472);\n\n// Encode data string\nvar encode = function encode(data, structure, separator) {\n  var encoded = data.split('').map(function (val, idx) {\n    return _constants.BINARIES[structure[idx]];\n  }).map(function (val, idx) {\n    return val ? val[data[idx]] : '';\n  });\n\n  if (separator) {\n    var last = data.length - 1;\n    encoded = encoded.map(function (val, idx) {\n      return idx < last ? val + separator : val;\n    });\n  }\n\n  return encoded.join('');\n};\n\nexports.default = encode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9FQU5fVVBDL2VuY29kZXIuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfY29uc3RhbnRzIiwicmVxdWlyZSIsImVuY29kZSIsImRhdGEiLCJzdHJ1Y3R1cmUiLCJzZXBhcmF0b3IiLCJlbmNvZGVkIiwic3BsaXQiLCJtYXAiLCJ2YWwiLCJpZHgiLCJCSU5BUklFUyIsImxhc3QiLCJsZW5ndGgiLCJqb2luIiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDNUNDLE9BQUssRUFBRSxJQURxQyxFQUE3Qzs7O0FBSUEsSUFBSUMsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLHNCQUFELENBQXhCOztBQUVBO0FBQ0EsSUFBSUMsTUFBTSxHQUFHLFNBQVNBLE1BQVQsQ0FBZ0JDLElBQWhCLEVBQXNCQyxTQUF0QixFQUFpQ0MsU0FBakMsRUFBNEM7QUFDeEQsTUFBSUMsT0FBTyxHQUFHSCxJQUFJLENBQUNJLEtBQUwsQ0FBVyxFQUFYLEVBQWVDLEdBQWYsQ0FBbUIsVUFBVUMsR0FBVixFQUFlQyxHQUFmLEVBQW9CO0FBQ3BELFdBQU9WLFVBQVUsQ0FBQ1csUUFBWCxDQUFvQlAsU0FBUyxDQUFDTSxHQUFELENBQTdCLENBQVA7QUFDQSxHQUZhLEVBRVhGLEdBRlcsQ0FFUCxVQUFVQyxHQUFWLEVBQWVDLEdBQWYsRUFBb0I7QUFDMUIsV0FBT0QsR0FBRyxHQUFHQSxHQUFHLENBQUNOLElBQUksQ0FBQ08sR0FBRCxDQUFMLENBQU4sR0FBb0IsRUFBOUI7QUFDQSxHQUphLENBQWQ7O0FBTUEsTUFBSUwsU0FBSixFQUFlO0FBQ2QsUUFBSU8sSUFBSSxHQUFHVCxJQUFJLENBQUNVLE1BQUwsR0FBYyxDQUF6QjtBQUNBUCxXQUFPLEdBQUdBLE9BQU8sQ0FBQ0UsR0FBUixDQUFZLFVBQVVDLEdBQVYsRUFBZUMsR0FBZixFQUFvQjtBQUN6QyxhQUFPQSxHQUFHLEdBQUdFLElBQU4sR0FBYUgsR0FBRyxHQUFHSixTQUFuQixHQUErQkksR0FBdEM7QUFDQSxLQUZTLENBQVY7QUFHQTs7QUFFRCxTQUFPSCxPQUFPLENBQUNRLElBQVIsQ0FBYSxFQUFiLENBQVA7QUFDQSxDQWZEOztBQWlCQWhCLE9BQU8sQ0FBQ2lCLE9BQVIsR0FBa0JiLE1BQWxCIiwiZmlsZSI6IjQ3NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG4vLyBFbmNvZGUgZGF0YSBzdHJpbmdcbnZhciBlbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgc3RydWN0dXJlLCBzZXBhcmF0b3IpIHtcblx0dmFyIGVuY29kZWQgPSBkYXRhLnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKHZhbCwgaWR4KSB7XG5cdFx0cmV0dXJuIF9jb25zdGFudHMuQklOQVJJRVNbc3RydWN0dXJlW2lkeF1dO1xuXHR9KS5tYXAoZnVuY3Rpb24gKHZhbCwgaWR4KSB7XG5cdFx0cmV0dXJuIHZhbCA/IHZhbFtkYXRhW2lkeF1dIDogJyc7XG5cdH0pO1xuXG5cdGlmIChzZXBhcmF0b3IpIHtcblx0XHR2YXIgbGFzdCA9IGRhdGEubGVuZ3RoIC0gMTtcblx0XHRlbmNvZGVkID0gZW5jb2RlZC5tYXAoZnVuY3Rpb24gKHZhbCwgaWR4KSB7XG5cdFx0XHRyZXR1cm4gaWR4IDwgbGFzdCA/IHZhbCArIHNlcGFyYXRvciA6IHZhbDtcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiBlbmNvZGVkLmpvaW4oJycpO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZW5jb2RlOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///474\n");

/***/ }),

/***/ 475:
/*!********************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/EAN_UPC/EAN8.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _get = function get(object, property, receiver) {if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {return get(parent, property, receiver);}} else if (\"value\" in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}};\n\nvar _EAN2 = __webpack_require__(/*! ./EAN */ 473);\n\nvar _EAN3 = _interopRequireDefault(_EAN2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation:\n// http://www.barcodeisland.com/ean8.phtml\n\n// Calculate the checksum digit\nvar checksum = function checksum(number) {\n  var res = number.substr(0, 7).split('').map(function (n) {\n    return +n;\n  }).reduce(function (sum, a, idx) {\n    return idx % 2 ? sum + a : sum + a * 3;\n  }, 0);\n\n  return (10 - res % 10) % 10;\n};\n\nvar EAN8 = function (_EAN) {\n  _inherits(EAN8, _EAN);\n\n  function EAN8(data, options) {\n    _classCallCheck(this, EAN8);\n\n    // Add checksum if it does not exist\n    if (data.search(/^[0-9]{7}$/) !== -1) {\n      data += checksum(data);\n    }\n\n    return _possibleConstructorReturn(this, (EAN8.__proto__ || Object.getPrototypeOf(EAN8)).call(this, data, options));\n  }\n\n  _createClass(EAN8, [{\n    key: 'valid',\n    value: function valid() {\n      return this.data.search(/^[0-9]{8}$/) !== -1 && +this.data[7] === checksum(this.data);\n    } },\n  {\n    key: 'leftText',\n    value: function leftText() {\n      return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'leftText', this).call(this, 0, 4);\n    } },\n  {\n    key: 'leftEncode',\n    value: function leftEncode() {\n      var data = this.data.substr(0, 4);\n      return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'leftEncode', this).call(this, data, 'LLLL');\n    } },\n  {\n    key: 'rightText',\n    value: function rightText() {\n      return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'rightText', this).call(this, 4, 4);\n    } },\n  {\n    key: 'rightEncode',\n    value: function rightEncode() {\n      var data = this.data.substr(4, 4);\n      return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'rightEncode', this).call(this, data, 'RRRR');\n    } }]);\n\n\n  return EAN8;\n}(_EAN3.default);\n\nexports.default = EAN8;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///475\n");

/***/ }),

/***/ 476:
/*!********************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/EAN_UPC/EAN5.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _constants = __webpack_require__(/*! ./constants */ 472);\n\nvar _encoder = __webpack_require__(/*! ./encoder */ 474);\n\nvar _encoder2 = _interopRequireDefault(_encoder);\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode */ 461);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation:\n// https://en.wikipedia.org/wiki/EAN_5#Encoding\n\nvar checksum = function checksum(data) {\n  var result = data.split('').map(function (n) {\n    return +n;\n  }).reduce(function (sum, a, idx) {\n    return idx % 2 ? sum + a * 9 : sum + a * 3;\n  }, 0);\n  return result % 10;\n};\n\nvar EAN5 = function (_Barcode) {\n  _inherits(EAN5, _Barcode);\n\n  function EAN5(data, options) {\n    _classCallCheck(this, EAN5);\n\n    return _possibleConstructorReturn(this, (EAN5.__proto__ || Object.getPrototypeOf(EAN5)).call(this, data, options));\n  }\n\n  _createClass(EAN5, [{\n    key: 'valid',\n    value: function valid() {\n      return this.data.search(/^[0-9]{5}$/) !== -1;\n    } },\n  {\n    key: 'encode',\n    value: function encode() {\n      var structure = _constants.EAN5_STRUCTURE[checksum(this.data)];\n      return {\n        data: '1011' + (0, _encoder2.default)(this.data, structure, '01'),\n        text: this.text };\n\n    } }]);\n\n\n  return EAN5;\n}(_Barcode3.default);\n\nexports.default = EAN5;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///476\n");

/***/ }),

/***/ 477:
/*!********************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/EAN_UPC/EAN2.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _constants = __webpack_require__(/*! ./constants */ 472);\n\nvar _encoder = __webpack_require__(/*! ./encoder */ 474);\n\nvar _encoder2 = _interopRequireDefault(_encoder);\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode */ 461);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation:\n// https://en.wikipedia.org/wiki/EAN_2#Encoding\n\nvar EAN2 = function (_Barcode) {\n  _inherits(EAN2, _Barcode);\n\n  function EAN2(data, options) {\n    _classCallCheck(this, EAN2);\n\n    return _possibleConstructorReturn(this, (EAN2.__proto__ || Object.getPrototypeOf(EAN2)).call(this, data, options));\n  }\n\n  _createClass(EAN2, [{\n    key: 'valid',\n    value: function valid() {\n      return this.data.search(/^[0-9]{2}$/) !== -1;\n    } },\n  {\n    key: 'encode',\n    value: function encode() {\n      // Choose the structure based on the number mod 4\n      var structure = _constants.EAN2_STRUCTURE[parseInt(this.data) % 4];\n      return {\n        // Start bits + Encode the two digits with 01 in between\n        data: '1011' + (0, _encoder2.default)(this.data, structure, '01'),\n        text: this.text };\n\n    } }]);\n\n\n  return EAN2;\n}(_Barcode3.default);\n\nexports.default = EAN2;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///477\n");

/***/ }),

/***/ 478:
/*!*******************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/EAN_UPC/UPC.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nexports.checksum = checksum;\n\nvar _encoder = __webpack_require__(/*! ./encoder */ 474);\n\nvar _encoder2 = _interopRequireDefault(_encoder);\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 461);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation:\n// https://en.wikipedia.org/wiki/Universal_Product_Code#Encoding\n\nvar UPC = function (_Barcode) {\n  _inherits(UPC, _Barcode);\n\n  function UPC(data, options) {\n    _classCallCheck(this, UPC);\n\n    // Add checksum if it does not exist\n    if (data.search(/^[0-9]{11}$/) !== -1) {\n      data += checksum(data);\n    }\n\n    var _this = _possibleConstructorReturn(this, (UPC.__proto__ || Object.getPrototypeOf(UPC)).call(this, data, options));\n\n    _this.displayValue = options.displayValue;\n\n    // Make sure the font is not bigger than the space between the guard bars\n    if (options.fontSize > options.width * 10) {\n      _this.fontSize = options.width * 10;\n    } else {\n      _this.fontSize = options.fontSize;\n    }\n\n    // Make the guard bars go down half the way of the text\n    _this.guardHeight = options.height + _this.fontSize / 2 + options.textMargin;\n    return _this;\n  }\n\n  _createClass(UPC, [{\n    key: \"valid\",\n    value: function valid() {\n      return this.data.search(/^[0-9]{12}$/) !== -1 && this.data[11] == checksum(this.data);\n    } },\n  {\n    key: \"encode\",\n    value: function encode() {\n      if (this.options.flat) {\n        return this.flatEncoding();\n      } else {\n        return this.guardedEncoding();\n      }\n    } },\n  {\n    key: \"flatEncoding\",\n    value: function flatEncoding() {\n      var result = \"\";\n\n      result += \"101\";\n      result += (0, _encoder2.default)(this.data.substr(0, 6), \"LLLLLL\");\n      result += \"01010\";\n      result += (0, _encoder2.default)(this.data.substr(6, 6), \"RRRRRR\");\n      result += \"101\";\n\n      return {\n        data: result,\n        text: this.text };\n\n    } },\n  {\n    key: \"guardedEncoding\",\n    value: function guardedEncoding() {\n      var result = [];\n\n      // Add the first digit\n      if (this.displayValue) {\n        result.push({\n          data: \"00000000\",\n          text: this.text.substr(0, 1),\n          options: { textAlign: \"left\", fontSize: this.fontSize } });\n\n      }\n\n      // Add the guard bars\n      result.push({\n        data: \"101\" + (0, _encoder2.default)(this.data[0], \"L\"),\n        options: { height: this.guardHeight } });\n\n\n      // Add the left side\n      result.push({\n        data: (0, _encoder2.default)(this.data.substr(1, 5), \"LLLLL\"),\n        text: this.text.substr(1, 5),\n        options: { fontSize: this.fontSize } });\n\n\n      // Add the middle bits\n      result.push({\n        data: \"01010\",\n        options: { height: this.guardHeight } });\n\n\n      // Add the right side\n      result.push({\n        data: (0, _encoder2.default)(this.data.substr(6, 5), \"RRRRR\"),\n        text: this.text.substr(6, 5),\n        options: { fontSize: this.fontSize } });\n\n\n      // Add the end bits\n      result.push({\n        data: (0, _encoder2.default)(this.data[11], \"R\") + \"101\",\n        options: { height: this.guardHeight } });\n\n\n      // Add the last digit\n      if (this.displayValue) {\n        result.push({\n          data: \"00000000\",\n          text: this.text.substr(11, 1),\n          options: { textAlign: \"right\", fontSize: this.fontSize } });\n\n      }\n\n      return result;\n    } }]);\n\n\n  return UPC;\n}(_Barcode3.default);\n\n// Calulate the checksum digit\n// https://en.wikipedia.org/wiki/International_Article_Number_(EAN)#Calculation_of_checksum_digit\n\n\nfunction checksum(number) {\n  var result = 0;\n\n  var i;\n  for (i = 1; i < 11; i += 2) {\n    result += parseInt(number[i]);\n  }\n  for (i = 0; i < 11; i += 2) {\n    result += parseInt(number[i]) * 3;\n  }\n\n  return (10 - result % 10) % 10;\n}\n\nexports.default = UPC;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///478\n");

/***/ }),

/***/ 479:
/*!********************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/EAN_UPC/UPCE.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _encoder = __webpack_require__(/*! ./encoder */ 474);\n\nvar _encoder2 = _interopRequireDefault(_encoder);\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 461);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nvar _UPC = __webpack_require__(/*! ./UPC.js */ 478);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation:\n// https://en.wikipedia.org/wiki/Universal_Product_Code#Encoding\n//\n// UPC-E documentation:\n// https://en.wikipedia.org/wiki/Universal_Product_Code#UPC-E\n\nvar EXPANSIONS = [\"XX00000XXX\", \"XX10000XXX\", \"XX20000XXX\", \"XXX00000XX\", \"XXXX00000X\", \"XXXXX00005\", \"XXXXX00006\", \"XXXXX00007\", \"XXXXX00008\", \"XXXXX00009\"];\n\nvar PARITIES = [[\"EEEOOO\", \"OOOEEE\"], [\"EEOEOO\", \"OOEOEE\"], [\"EEOOEO\", \"OOEEOE\"], [\"EEOOOE\", \"OOEEEO\"], [\"EOEEOO\", \"OEOOEE\"], [\"EOOEEO\", \"OEEOOE\"], [\"EOOOEE\", \"OEEEOO\"], [\"EOEOEO\", \"OEOEOE\"], [\"EOEOOE\", \"OEOEEO\"], [\"EOOEOE\", \"OEEOEO\"]];\n\nvar UPCE = function (_Barcode) {\n  _inherits(UPCE, _Barcode);\n\n  function UPCE(data, options) {\n    _classCallCheck(this, UPCE);\n\n    var _this = _possibleConstructorReturn(this, (UPCE.__proto__ || Object.getPrototypeOf(UPCE)).call(this, data, options));\n    // Code may be 6 or 8 digits;\n    // A 7 digit code is ambiguous as to whether the extra digit\n    // is a UPC-A check or number system digit.\n\n\n    _this.isValid = false;\n    if (data.search(/^[0-9]{6}$/) !== -1) {\n      _this.middleDigits = data;\n      _this.upcA = expandToUPCA(data, \"0\");\n      _this.text = options.text || '' + _this.upcA[0] + data + _this.upcA[_this.upcA.length - 1];\n      _this.isValid = true;\n    } else if (data.search(/^[01][0-9]{7}$/) !== -1) {\n      _this.middleDigits = data.substring(1, data.length - 1);\n      _this.upcA = expandToUPCA(_this.middleDigits, data[0]);\n\n      if (_this.upcA[_this.upcA.length - 1] === data[data.length - 1]) {\n        _this.isValid = true;\n      } else {\n        // checksum mismatch\n        return _possibleConstructorReturn(_this);\n      }\n    } else {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this.displayValue = options.displayValue;\n\n    // Make sure the font is not bigger than the space between the guard bars\n    if (options.fontSize > options.width * 10) {\n      _this.fontSize = options.width * 10;\n    } else {\n      _this.fontSize = options.fontSize;\n    }\n\n    // Make the guard bars go down half the way of the text\n    _this.guardHeight = options.height + _this.fontSize / 2 + options.textMargin;\n    return _this;\n  }\n\n  _createClass(UPCE, [{\n    key: 'valid',\n    value: function valid() {\n      return this.isValid;\n    } },\n  {\n    key: 'encode',\n    value: function encode() {\n      if (this.options.flat) {\n        return this.flatEncoding();\n      } else {\n        return this.guardedEncoding();\n      }\n    } },\n  {\n    key: 'flatEncoding',\n    value: function flatEncoding() {\n      var result = \"\";\n\n      result += \"101\";\n      result += this.encodeMiddleDigits();\n      result += \"010101\";\n\n      return {\n        data: result,\n        text: this.text };\n\n    } },\n  {\n    key: 'guardedEncoding',\n    value: function guardedEncoding() {\n      var result = [];\n\n      // Add the UPC-A number system digit beneath the quiet zone\n      if (this.displayValue) {\n        result.push({\n          data: \"00000000\",\n          text: this.text[0],\n          options: { textAlign: \"left\", fontSize: this.fontSize } });\n\n      }\n\n      // Add the guard bars\n      result.push({\n        data: \"101\",\n        options: { height: this.guardHeight } });\n\n\n      // Add the 6 UPC-E digits\n      result.push({\n        data: this.encodeMiddleDigits(),\n        text: this.text.substring(1, 7),\n        options: { fontSize: this.fontSize } });\n\n\n      // Add the end bits\n      result.push({\n        data: \"010101\",\n        options: { height: this.guardHeight } });\n\n\n      // Add the UPC-A check digit beneath the quiet zone\n      if (this.displayValue) {\n        result.push({\n          data: \"00000000\",\n          text: this.text[7],\n          options: { textAlign: \"right\", fontSize: this.fontSize } });\n\n      }\n\n      return result;\n    } },\n  {\n    key: 'encodeMiddleDigits',\n    value: function encodeMiddleDigits() {\n      var numberSystem = this.upcA[0];\n      var checkDigit = this.upcA[this.upcA.length - 1];\n      var parity = PARITIES[parseInt(checkDigit)][parseInt(numberSystem)];\n      return (0, _encoder2.default)(this.middleDigits, parity);\n    } }]);\n\n\n  return UPCE;\n}(_Barcode3.default);\n\nfunction expandToUPCA(middleDigits, numberSystem) {\n  var lastUpcE = parseInt(middleDigits[middleDigits.length - 1]);\n  var expansion = EXPANSIONS[lastUpcE];\n\n  var result = \"\";\n  var digitIndex = 0;\n  for (var i = 0; i < expansion.length; i++) {\n    var c = expansion[i];\n    if (c === 'X') {\n      result += middleDigits[digitIndex++];\n    } else {\n      result += c;\n    }\n  }\n\n  result = '' + numberSystem + result;\n  return '' + result + (0, _UPC.checksum)(result);\n}\n\nexports.default = UPCE;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///479\n");

/***/ }),

/***/ 48:
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ 49);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDZCQUFxQiIsImZpbGUiOiI0OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///48\n");

/***/ }),

/***/ 480:
/*!*****************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/ITF/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.ITF14 = exports.ITF = undefined;\n\nvar _ITF = __webpack_require__(/*! ./ITF */ 481);\n\nvar _ITF2 = _interopRequireDefault(_ITF);\n\nvar _ITF3 = __webpack_require__(/*! ./ITF14 */ 483);\n\nvar _ITF4 = _interopRequireDefault(_ITF3);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nexports.ITF = _ITF2.default;\nexports.ITF14 = _ITF4.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9JVEYvaW5kZXguanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJJVEYxNCIsIklURiIsInVuZGVmaW5lZCIsIl9JVEYiLCJyZXF1aXJlIiwiX0lURjIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX0lURjMiLCJfSVRGNCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsT0FBSyxFQUFFLElBRG9DLEVBQTdDOztBQUdBRCxPQUFPLENBQUNFLEtBQVIsR0FBZ0JGLE9BQU8sQ0FBQ0csR0FBUixHQUFjQyxTQUE5Qjs7QUFFQSxJQUFJQyxJQUFJLEdBQUdDLG1CQUFPLENBQUMsZ0JBQUQsQ0FBbEI7O0FBRUEsSUFBSUMsS0FBSyxHQUFHQyxzQkFBc0IsQ0FBQ0gsSUFBRCxDQUFsQzs7QUFFQSxJQUFJSSxLQUFLLEdBQUdILG1CQUFPLENBQUMsa0JBQUQsQ0FBbkI7O0FBRUEsSUFBSUksS0FBSyxHQUFHRixzQkFBc0IsQ0FBQ0MsS0FBRCxDQUFsQzs7QUFFQSxTQUFTRCxzQkFBVCxDQUFnQ0csR0FBaEMsRUFBcUMsQ0FBRSxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEIsRUFBRUUsT0FBTyxFQUFFRixHQUFYLEVBQXJDLENBQXdEOztBQUUvRlgsT0FBTyxDQUFDRyxHQUFSLEdBQWNJLEtBQUssQ0FBQ00sT0FBcEI7QUFDQWIsT0FBTyxDQUFDRSxLQUFSLEdBQWdCUSxLQUFLLENBQUNHLE9BQXRCIiwiZmlsZSI6IjQ4MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuSVRGMTQgPSBleHBvcnRzLklURiA9IHVuZGVmaW5lZDtcblxudmFyIF9JVEYgPSByZXF1aXJlKCcuL0lURicpO1xuXG52YXIgX0lURjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9JVEYpO1xuXG52YXIgX0lURjMgPSByZXF1aXJlKCcuL0lURjE0Jyk7XG5cbnZhciBfSVRGNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0lURjMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLklURiA9IF9JVEYyLmRlZmF1bHQ7XG5leHBvcnRzLklURjE0ID0gX0lURjQuZGVmYXVsdDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///480\n");

/***/ }),

/***/ 481:
/*!***************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/ITF/ITF.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _constants = __webpack_require__(/*! ./constants */ 482);\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode */ 461);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar ITF = function (_Barcode) {\n  _inherits(ITF, _Barcode);\n\n  function ITF() {\n    _classCallCheck(this, ITF);\n\n    return _possibleConstructorReturn(this, (ITF.__proto__ || Object.getPrototypeOf(ITF)).apply(this, arguments));\n  }\n\n  _createClass(ITF, [{\n    key: 'valid',\n    value: function valid() {\n      return this.data.search(/^([0-9]{2})+$/) !== -1;\n    } },\n  {\n    key: 'encode',\n    value: function encode() {\n      var _this2 = this;\n\n      // Calculate all the digit pairs\n      var encoded = this.data.match(/.{2}/g).map(function (pair) {\n        return _this2.encodePair(pair);\n      }).join('');\n\n      return {\n        data: _constants.START_BIN + encoded + _constants.END_BIN,\n        text: this.text };\n\n    }\n\n    // Calculate the data of a number pair\n  },\n  {\n    key: 'encodePair',\n    value: function encodePair(pair) {\n      var second = _constants.BINARIES[pair[1]];\n\n      return _constants.BINARIES[pair[0]].split('').map(function (first, idx) {\n        return (first === '1' ? '111' : '1') + (second[idx] === '1' ? '000' : '0');\n      }).join('');\n    } }]);\n\n\n  return ITF;\n}(_Barcode3.default);\n\nexports.default = ITF;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///481\n");

/***/ }),

/***/ 482:
/*!*********************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/ITF/constants.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nvar START_BIN = exports.START_BIN = '1010';\nvar END_BIN = exports.END_BIN = '11101';\n\nvar BINARIES = exports.BINARIES = ['00110', '10001', '01001', '11000', '00101', '10100', '01100', '00011', '10010', '01010'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9JVEYvY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU1RBUlRfQklOIiwiRU5EX0JJTiIsIkJJTkFSSUVTIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUM1Q0MsT0FBSyxFQUFFLElBRHFDLEVBQTdDOztBQUdBLElBQUlDLFNBQVMsR0FBR0YsT0FBTyxDQUFDRSxTQUFSLEdBQW9CLE1BQXBDO0FBQ0EsSUFBSUMsT0FBTyxHQUFHSCxPQUFPLENBQUNHLE9BQVIsR0FBa0IsT0FBaEM7O0FBRUEsSUFBSUMsUUFBUSxHQUFHSixPQUFPLENBQUNJLFFBQVIsR0FBbUIsQ0FBQyxPQUFELEVBQVUsT0FBVixFQUFtQixPQUFuQixFQUE0QixPQUE1QixFQUFxQyxPQUFyQyxFQUE4QyxPQUE5QyxFQUF1RCxPQUF2RCxFQUFnRSxPQUFoRSxFQUF5RSxPQUF6RSxFQUFrRixPQUFsRixDQUFsQyIsImZpbGUiOiI0ODIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG52YXIgU1RBUlRfQklOID0gZXhwb3J0cy5TVEFSVF9CSU4gPSAnMTAxMCc7XG52YXIgRU5EX0JJTiA9IGV4cG9ydHMuRU5EX0JJTiA9ICcxMTEwMSc7XG5cbnZhciBCSU5BUklFUyA9IGV4cG9ydHMuQklOQVJJRVMgPSBbJzAwMTEwJywgJzEwMDAxJywgJzAxMDAxJywgJzExMDAwJywgJzAwMTAxJywgJzEwMTAwJywgJzAxMTAwJywgJzAwMDExJywgJzEwMDEwJywgJzAxMDEwJ107Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///482\n");

/***/ }),

/***/ 483:
/*!*****************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/ITF/ITF14.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _ITF2 = __webpack_require__(/*! ./ITF */ 481);\n\nvar _ITF3 = _interopRequireDefault(_ITF2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\n// Calculate the checksum digit\nvar checksum = function checksum(data) {\n  var res = data.substr(0, 13).split('').map(function (num) {\n    return parseInt(num, 10);\n  }).reduce(function (sum, n, idx) {\n    return sum + n * (3 - idx % 2 * 2);\n  }, 0);\n\n  return Math.ceil(res / 10) * 10 - res;\n};\n\nvar ITF14 = function (_ITF) {\n  _inherits(ITF14, _ITF);\n\n  function ITF14(data, options) {\n    _classCallCheck(this, ITF14);\n\n    // Add checksum if it does not exist\n    if (data.search(/^[0-9]{13}$/) !== -1) {\n      data += checksum(data);\n    }\n    return _possibleConstructorReturn(this, (ITF14.__proto__ || Object.getPrototypeOf(ITF14)).call(this, data, options));\n  }\n\n  _createClass(ITF14, [{\n    key: 'valid',\n    value: function valid() {\n      return this.data.search(/^[0-9]{14}$/) !== -1 && +this.data[13] === checksum(this.data);\n    } }]);\n\n\n  return ITF14;\n}(_ITF3.default);\n\nexports.default = ITF14;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///483\n");

/***/ }),

/***/ 484:
/*!*****************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/MSI/index.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.MSI1110 = exports.MSI1010 = exports.MSI11 = exports.MSI10 = exports.MSI = undefined;\n\nvar _MSI = __webpack_require__(/*! ./MSI.js */ 485);\n\nvar _MSI2 = _interopRequireDefault(_MSI);\n\nvar _MSI3 = __webpack_require__(/*! ./MSI10.js */ 486);\n\nvar _MSI4 = _interopRequireDefault(_MSI3);\n\nvar _MSI5 = __webpack_require__(/*! ./MSI11.js */ 488);\n\nvar _MSI6 = _interopRequireDefault(_MSI5);\n\nvar _MSI7 = __webpack_require__(/*! ./MSI1010.js */ 489);\n\nvar _MSI8 = _interopRequireDefault(_MSI7);\n\nvar _MSI9 = __webpack_require__(/*! ./MSI1110.js */ 490);\n\nvar _MSI10 = _interopRequireDefault(_MSI9);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nexports.MSI = _MSI2.default;\nexports.MSI10 = _MSI4.default;\nexports.MSI11 = _MSI6.default;\nexports.MSI1010 = _MSI8.default;\nexports.MSI1110 = _MSI10.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9NU0kvaW5kZXguanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJNU0kxMTEwIiwiTVNJMTAxMCIsIk1TSTExIiwiTVNJMTAiLCJNU0kiLCJ1bmRlZmluZWQiLCJfTVNJIiwicmVxdWlyZSIsIl9NU0kyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9NU0kzIiwiX01TSTQiLCJfTVNJNSIsIl9NU0k2IiwiX01TSTciLCJfTVNJOCIsIl9NU0k5IiwiX01TSTEwIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxPQUFLLEVBQUUsSUFEb0MsRUFBN0M7O0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkYsT0FBTyxDQUFDRyxPQUFSLEdBQWtCSCxPQUFPLENBQUNJLEtBQVIsR0FBZ0JKLE9BQU8sQ0FBQ0ssS0FBUixHQUFnQkwsT0FBTyxDQUFDTSxHQUFSLEdBQWNDLFNBQWxGOztBQUVBLElBQUlDLElBQUksR0FBR0MsbUJBQU8sQ0FBQyxtQkFBRCxDQUFsQjs7QUFFQSxJQUFJQyxLQUFLLEdBQUdDLHNCQUFzQixDQUFDSCxJQUFELENBQWxDOztBQUVBLElBQUlJLEtBQUssR0FBR0gsbUJBQU8sQ0FBQyxxQkFBRCxDQUFuQjs7QUFFQSxJQUFJSSxLQUFLLEdBQUdGLHNCQUFzQixDQUFDQyxLQUFELENBQWxDOztBQUVBLElBQUlFLEtBQUssR0FBR0wsbUJBQU8sQ0FBQyxxQkFBRCxDQUFuQjs7QUFFQSxJQUFJTSxLQUFLLEdBQUdKLHNCQUFzQixDQUFDRyxLQUFELENBQWxDOztBQUVBLElBQUlFLEtBQUssR0FBR1AsbUJBQU8sQ0FBQyx1QkFBRCxDQUFuQjs7QUFFQSxJQUFJUSxLQUFLLEdBQUdOLHNCQUFzQixDQUFDSyxLQUFELENBQWxDOztBQUVBLElBQUlFLEtBQUssR0FBR1QsbUJBQU8sQ0FBQyx1QkFBRCxDQUFuQjs7QUFFQSxJQUFJVSxNQUFNLEdBQUdSLHNCQUFzQixDQUFDTyxLQUFELENBQW5DOztBQUVBLFNBQVNQLHNCQUFULENBQWdDUyxHQUFoQyxFQUFxQyxDQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxPQUFPLEVBQUVGLEdBQVgsRUFBckMsQ0FBd0Q7O0FBRS9GcEIsT0FBTyxDQUFDTSxHQUFSLEdBQWNJLEtBQUssQ0FBQ1ksT0FBcEI7QUFDQXRCLE9BQU8sQ0FBQ0ssS0FBUixHQUFnQlEsS0FBSyxDQUFDUyxPQUF0QjtBQUNBdEIsT0FBTyxDQUFDSSxLQUFSLEdBQWdCVyxLQUFLLENBQUNPLE9BQXRCO0FBQ0F0QixPQUFPLENBQUNHLE9BQVIsR0FBa0JjLEtBQUssQ0FBQ0ssT0FBeEI7QUFDQXRCLE9BQU8sQ0FBQ0UsT0FBUixHQUFrQmlCLE1BQU0sQ0FBQ0csT0FBekIiLCJmaWxlIjoiNDg0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5NU0kxMTEwID0gZXhwb3J0cy5NU0kxMDEwID0gZXhwb3J0cy5NU0kxMSA9IGV4cG9ydHMuTVNJMTAgPSBleHBvcnRzLk1TSSA9IHVuZGVmaW5lZDtcblxudmFyIF9NU0kgPSByZXF1aXJlKCcuL01TSS5qcycpO1xuXG52YXIgX01TSTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NU0kpO1xuXG52YXIgX01TSTMgPSByZXF1aXJlKCcuL01TSTEwLmpzJyk7XG5cbnZhciBfTVNJNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01TSTMpO1xuXG52YXIgX01TSTUgPSByZXF1aXJlKCcuL01TSTExLmpzJyk7XG5cbnZhciBfTVNJNiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01TSTUpO1xuXG52YXIgX01TSTcgPSByZXF1aXJlKCcuL01TSTEwMTAuanMnKTtcblxudmFyIF9NU0k4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTVNJNyk7XG5cbnZhciBfTVNJOSA9IHJlcXVpcmUoJy4vTVNJMTExMC5qcycpO1xuXG52YXIgX01TSTEwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTVNJOSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuTVNJID0gX01TSTIuZGVmYXVsdDtcbmV4cG9ydHMuTVNJMTAgPSBfTVNJNC5kZWZhdWx0O1xuZXhwb3J0cy5NU0kxMSA9IF9NU0k2LmRlZmF1bHQ7XG5leHBvcnRzLk1TSTEwMTAgPSBfTVNJOC5kZWZhdWx0O1xuZXhwb3J0cy5NU0kxMTEwID0gX01TSTEwLmRlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///484\n");

/***/ }),

/***/ 485:
/*!***************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/MSI/MSI.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 461);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation\n// https://en.wikipedia.org/wiki/MSI_Barcode#Character_set_and_binary_lookup\n\nvar MSI = function (_Barcode) {\n  _inherits(MSI, _Barcode);\n\n  function MSI(data, options) {\n    _classCallCheck(this, MSI);\n\n    return _possibleConstructorReturn(this, (MSI.__proto__ || Object.getPrototypeOf(MSI)).call(this, data, options));\n  }\n\n  _createClass(MSI, [{\n    key: \"encode\",\n    value: function encode() {\n      // Start bits\n      var ret = \"110\";\n\n      for (var i = 0; i < this.data.length; i++) {\n        // Convert the character to binary (always 4 binary digits)\n        var digit = parseInt(this.data[i]);\n        var bin = digit.toString(2);\n        bin = addZeroes(bin, 4 - bin.length);\n\n        // Add 100 for every zero and 110 for every 1\n        for (var b = 0; b < bin.length; b++) {\n          ret += bin[b] == \"0\" ? \"100\" : \"110\";\n        }\n      }\n\n      // End bits\n      ret += \"1001\";\n\n      return {\n        data: ret,\n        text: this.text };\n\n    } },\n  {\n    key: \"valid\",\n    value: function valid() {\n      return this.data.search(/^[0-9]+$/) !== -1;\n    } }]);\n\n\n  return MSI;\n}(_Barcode3.default);\n\nfunction addZeroes(number, n) {\n  for (var i = 0; i < n; i++) {\n    number = \"0\" + number;\n  }\n  return number;\n}\n\nexports.default = MSI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///485\n");

/***/ }),

/***/ 486:
/*!*****************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/MSI/MSI10.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _MSI2 = __webpack_require__(/*! ./MSI.js */ 485);\n\nvar _MSI3 = _interopRequireDefault(_MSI2);\n\nvar _checksums = __webpack_require__(/*! ./checksums.js */ 487);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar MSI10 = function (_MSI) {\n  _inherits(MSI10, _MSI);\n\n  function MSI10(data, options) {\n    _classCallCheck(this, MSI10);\n\n    return _possibleConstructorReturn(this, (MSI10.__proto__ || Object.getPrototypeOf(MSI10)).call(this, data + (0, _checksums.mod10)(data), options));\n  }\n\n  return MSI10;\n}(_MSI3.default);\n\nexports.default = MSI10;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9NU0kvTVNJMTAuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfTVNJMiIsInJlcXVpcmUiLCJfTVNJMyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY2hlY2tzdW1zIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiY2FsbCIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIk1TSTEwIiwiX01TSSIsImRhdGEiLCJvcHRpb25zIiwiZ2V0UHJvdG90eXBlT2YiLCJtb2QxMCJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDNUNDLE9BQUssRUFBRSxJQURxQyxFQUE3Qzs7O0FBSUEsSUFBSUMsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLG1CQUFELENBQW5COztBQUVBLElBQUlDLEtBQUssR0FBR0Msc0JBQXNCLENBQUNILEtBQUQsQ0FBbEM7O0FBRUEsSUFBSUksVUFBVSxHQUFHSCxtQkFBTyxDQUFDLHlCQUFELENBQXhCOztBQUVBLFNBQVNFLHNCQUFULENBQWdDRSxHQUFoQyxFQUFxQyxDQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxPQUFPLEVBQUVGLEdBQVgsRUFBckMsQ0FBd0Q7O0FBRS9GLFNBQVNHLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DQyxXQUFuQyxFQUFnRCxDQUFFLElBQUksRUFBRUQsUUFBUSxZQUFZQyxXQUF0QixDQUFKLEVBQXdDLENBQUUsTUFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTixDQUEyRCxDQUFFOztBQUV6SixTQUFTQywwQkFBVCxDQUFvQ0MsSUFBcEMsRUFBMENDLElBQTFDLEVBQWdELENBQUUsSUFBSSxDQUFDRCxJQUFMLEVBQVcsQ0FBRSxNQUFNLElBQUlFLGNBQUosQ0FBbUIsMkRBQW5CLENBQU4sQ0FBd0YsQ0FBQyxPQUFPRCxJQUFJLEtBQUssT0FBT0EsSUFBUCxLQUFnQixRQUFoQixJQUE0QixPQUFPQSxJQUFQLEtBQWdCLFVBQWpELENBQUosR0FBbUVBLElBQW5FLEdBQTBFRCxJQUFqRixDQUF3Rjs7QUFFaFAsU0FBU0csU0FBVCxDQUFtQkMsUUFBbkIsRUFBNkJDLFVBQTdCLEVBQXlDLENBQUUsSUFBSSxPQUFPQSxVQUFQLEtBQXNCLFVBQXRCLElBQW9DQSxVQUFVLEtBQUssSUFBdkQsRUFBNkQsQ0FBRSxNQUFNLElBQUlQLFNBQUosQ0FBYyw2REFBNkQsT0FBT08sVUFBbEYsQ0FBTixDQUFzRyxDQUFDRCxRQUFRLENBQUNFLFNBQVQsR0FBcUJ2QixNQUFNLENBQUN3QixNQUFQLENBQWNGLFVBQVUsSUFBSUEsVUFBVSxDQUFDQyxTQUF2QyxFQUFrRCxFQUFFRSxXQUFXLEVBQUUsRUFBRXRCLEtBQUssRUFBRWtCLFFBQVQsRUFBbUJLLFVBQVUsRUFBRSxLQUEvQixFQUFzQ0MsUUFBUSxFQUFFLElBQWhELEVBQXNEQyxZQUFZLEVBQUUsSUFBcEUsRUFBZixFQUFsRCxDQUFyQixDQUFxSyxJQUFJTixVQUFKLEVBQWdCdEIsTUFBTSxDQUFDNkIsY0FBUCxHQUF3QjdCLE1BQU0sQ0FBQzZCLGNBQVAsQ0FBc0JSLFFBQXRCLEVBQWdDQyxVQUFoQyxDQUF4QixHQUFzRUQsUUFBUSxDQUFDUyxTQUFULEdBQXFCUixVQUEzRixDQUF3Rzs7QUFFOWUsSUFBSVMsS0FBSyxHQUFHLFVBQVVDLElBQVYsRUFBZ0I7QUFDM0JaLFdBQVMsQ0FBQ1csS0FBRCxFQUFRQyxJQUFSLENBQVQ7O0FBRUEsV0FBU0QsS0FBVCxDQUFlRSxJQUFmLEVBQXFCQyxPQUFyQixFQUE4QjtBQUM3QnRCLG1CQUFlLENBQUMsSUFBRCxFQUFPbUIsS0FBUCxDQUFmOztBQUVBLFdBQU9mLDBCQUEwQixDQUFDLElBQUQsRUFBTyxDQUFDZSxLQUFLLENBQUNELFNBQU4sSUFBbUI5QixNQUFNLENBQUNtQyxjQUFQLENBQXNCSixLQUF0QixDQUFwQixFQUFrRGIsSUFBbEQsQ0FBdUQsSUFBdkQsRUFBNkRlLElBQUksR0FBRyxDQUFDLEdBQUd6QixVQUFVLENBQUM0QixLQUFmLEVBQXNCSCxJQUF0QixDQUFwRSxFQUFpR0MsT0FBakcsQ0FBUCxDQUFqQztBQUNBOztBQUVELFNBQU9ILEtBQVA7QUFDQSxDQVZXLENBVVZ6QixLQUFLLENBQUNLLE9BVkksQ0FBWjs7QUFZQVQsT0FBTyxDQUFDUyxPQUFSLEdBQWtCb0IsS0FBbEIiLCJmaWxlIjoiNDg2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX01TSTIgPSByZXF1aXJlKCcuL01TSS5qcycpO1xuXG52YXIgX01TSTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NU0kyKTtcblxudmFyIF9jaGVja3N1bXMgPSByZXF1aXJlKCcuL2NoZWNrc3Vtcy5qcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBNU0kxMCA9IGZ1bmN0aW9uIChfTVNJKSB7XG5cdF9pbmhlcml0cyhNU0kxMCwgX01TSSk7XG5cblx0ZnVuY3Rpb24gTVNJMTAoZGF0YSwgb3B0aW9ucykge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNU0kxMCk7XG5cblx0XHRyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE1TSTEwLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTVNJMTApKS5jYWxsKHRoaXMsIGRhdGEgKyAoMCwgX2NoZWNrc3Vtcy5tb2QxMCkoZGF0YSksIG9wdGlvbnMpKTtcblx0fVxuXG5cdHJldHVybiBNU0kxMDtcbn0oX01TSTMuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE1TSTEwOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///486\n");

/***/ }),

/***/ 487:
/*!*********************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/MSI/checksums.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.mod10 = mod10;\nexports.mod11 = mod11;\nfunction mod10(number) {\n  var sum = 0;\n  for (var i = 0; i < number.length; i++) {\n    var n = parseInt(number[i]);\n    if ((i + number.length) % 2 === 0) {\n      sum += n;\n    } else {\n      sum += n * 2 % 10 + Math.floor(n * 2 / 10);\n    }\n  }\n  return (10 - sum % 10) % 10;\n}\n\nfunction mod11(number) {\n  var sum = 0;\n  var weights = [2, 3, 4, 5, 6, 7];\n  for (var i = 0; i < number.length; i++) {\n    var n = parseInt(number[number.length - 1 - i]);\n    sum += weights[i % weights.length] * n;\n  }\n  return (11 - sum % 11) % 11;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9NU0kvY2hlY2tzdW1zLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kMTAiLCJtb2QxMSIsIm51bWJlciIsInN1bSIsImkiLCJsZW5ndGgiLCJuIiwicGFyc2VJbnQiLCJNYXRoIiwiZmxvb3IiLCJ3ZWlnaHRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUM1Q0MsT0FBSyxFQUFFLElBRHFDLEVBQTdDOztBQUdBRCxPQUFPLENBQUNFLEtBQVIsR0FBZ0JBLEtBQWhCO0FBQ0FGLE9BQU8sQ0FBQ0csS0FBUixHQUFnQkEsS0FBaEI7QUFDQSxTQUFTRCxLQUFULENBQWVFLE1BQWYsRUFBdUI7QUFDdEIsTUFBSUMsR0FBRyxHQUFHLENBQVY7QUFDQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLE1BQU0sQ0FBQ0csTUFBM0IsRUFBbUNELENBQUMsRUFBcEMsRUFBd0M7QUFDdkMsUUFBSUUsQ0FBQyxHQUFHQyxRQUFRLENBQUNMLE1BQU0sQ0FBQ0UsQ0FBRCxDQUFQLENBQWhCO0FBQ0EsUUFBSSxDQUFDQSxDQUFDLEdBQUdGLE1BQU0sQ0FBQ0csTUFBWixJQUFzQixDQUF0QixLQUE0QixDQUFoQyxFQUFtQztBQUNsQ0YsU0FBRyxJQUFJRyxDQUFQO0FBQ0EsS0FGRCxNQUVPO0FBQ05ILFNBQUcsSUFBSUcsQ0FBQyxHQUFHLENBQUosR0FBUSxFQUFSLEdBQWFFLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxDQUFDLEdBQUcsQ0FBSixHQUFRLEVBQW5CLENBQXBCO0FBQ0E7QUFDRDtBQUNELFNBQU8sQ0FBQyxLQUFLSCxHQUFHLEdBQUcsRUFBWixJQUFrQixFQUF6QjtBQUNBOztBQUVELFNBQVNGLEtBQVQsQ0FBZUMsTUFBZixFQUF1QjtBQUN0QixNQUFJQyxHQUFHLEdBQUcsQ0FBVjtBQUNBLE1BQUlPLE9BQU8sR0FBRyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsRUFBYSxDQUFiLEVBQWdCLENBQWhCLENBQWQ7QUFDQSxPQUFLLElBQUlOLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLE1BQU0sQ0FBQ0csTUFBM0IsRUFBbUNELENBQUMsRUFBcEMsRUFBd0M7QUFDdkMsUUFBSUUsQ0FBQyxHQUFHQyxRQUFRLENBQUNMLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDRyxNQUFQLEdBQWdCLENBQWhCLEdBQW9CRCxDQUFyQixDQUFQLENBQWhCO0FBQ0FELE9BQUcsSUFBSU8sT0FBTyxDQUFDTixDQUFDLEdBQUdNLE9BQU8sQ0FBQ0wsTUFBYixDQUFQLEdBQThCQyxDQUFyQztBQUNBO0FBQ0QsU0FBTyxDQUFDLEtBQUtILEdBQUcsR0FBRyxFQUFaLElBQWtCLEVBQXpCO0FBQ0EiLCJmaWxlIjoiNDg3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLm1vZDEwID0gbW9kMTA7XG5leHBvcnRzLm1vZDExID0gbW9kMTE7XG5mdW5jdGlvbiBtb2QxMChudW1iZXIpIHtcblx0dmFyIHN1bSA9IDA7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIG4gPSBwYXJzZUludChudW1iZXJbaV0pO1xuXHRcdGlmICgoaSArIG51bWJlci5sZW5ndGgpICUgMiA9PT0gMCkge1xuXHRcdFx0c3VtICs9IG47XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN1bSArPSBuICogMiAlIDEwICsgTWF0aC5mbG9vcihuICogMiAvIDEwKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuICgxMCAtIHN1bSAlIDEwKSAlIDEwO1xufVxuXG5mdW5jdGlvbiBtb2QxMShudW1iZXIpIHtcblx0dmFyIHN1bSA9IDA7XG5cdHZhciB3ZWlnaHRzID0gWzIsIDMsIDQsIDUsIDYsIDddO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBuID0gcGFyc2VJbnQobnVtYmVyW251bWJlci5sZW5ndGggLSAxIC0gaV0pO1xuXHRcdHN1bSArPSB3ZWlnaHRzW2kgJSB3ZWlnaHRzLmxlbmd0aF0gKiBuO1xuXHR9XG5cdHJldHVybiAoMTEgLSBzdW0gJSAxMSkgJSAxMTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///487\n");

/***/ }),

/***/ 488:
/*!*****************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/MSI/MSI11.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _MSI2 = __webpack_require__(/*! ./MSI.js */ 485);\n\nvar _MSI3 = _interopRequireDefault(_MSI2);\n\nvar _checksums = __webpack_require__(/*! ./checksums.js */ 487);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar MSI11 = function (_MSI) {\n  _inherits(MSI11, _MSI);\n\n  function MSI11(data, options) {\n    _classCallCheck(this, MSI11);\n\n    return _possibleConstructorReturn(this, (MSI11.__proto__ || Object.getPrototypeOf(MSI11)).call(this, data + (0, _checksums.mod11)(data), options));\n  }\n\n  return MSI11;\n}(_MSI3.default);\n\nexports.default = MSI11;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9NU0kvTVNJMTEuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfTVNJMiIsInJlcXVpcmUiLCJfTVNJMyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY2hlY2tzdW1zIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiY2FsbCIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIk1TSTExIiwiX01TSSIsImRhdGEiLCJvcHRpb25zIiwiZ2V0UHJvdG90eXBlT2YiLCJtb2QxMSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDNUNDLE9BQUssRUFBRSxJQURxQyxFQUE3Qzs7O0FBSUEsSUFBSUMsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLG1CQUFELENBQW5COztBQUVBLElBQUlDLEtBQUssR0FBR0Msc0JBQXNCLENBQUNILEtBQUQsQ0FBbEM7O0FBRUEsSUFBSUksVUFBVSxHQUFHSCxtQkFBTyxDQUFDLHlCQUFELENBQXhCOztBQUVBLFNBQVNFLHNCQUFULENBQWdDRSxHQUFoQyxFQUFxQyxDQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxPQUFPLEVBQUVGLEdBQVgsRUFBckMsQ0FBd0Q7O0FBRS9GLFNBQVNHLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DQyxXQUFuQyxFQUFnRCxDQUFFLElBQUksRUFBRUQsUUFBUSxZQUFZQyxXQUF0QixDQUFKLEVBQXdDLENBQUUsTUFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTixDQUEyRCxDQUFFOztBQUV6SixTQUFTQywwQkFBVCxDQUFvQ0MsSUFBcEMsRUFBMENDLElBQTFDLEVBQWdELENBQUUsSUFBSSxDQUFDRCxJQUFMLEVBQVcsQ0FBRSxNQUFNLElBQUlFLGNBQUosQ0FBbUIsMkRBQW5CLENBQU4sQ0FBd0YsQ0FBQyxPQUFPRCxJQUFJLEtBQUssT0FBT0EsSUFBUCxLQUFnQixRQUFoQixJQUE0QixPQUFPQSxJQUFQLEtBQWdCLFVBQWpELENBQUosR0FBbUVBLElBQW5FLEdBQTBFRCxJQUFqRixDQUF3Rjs7QUFFaFAsU0FBU0csU0FBVCxDQUFtQkMsUUFBbkIsRUFBNkJDLFVBQTdCLEVBQXlDLENBQUUsSUFBSSxPQUFPQSxVQUFQLEtBQXNCLFVBQXRCLElBQW9DQSxVQUFVLEtBQUssSUFBdkQsRUFBNkQsQ0FBRSxNQUFNLElBQUlQLFNBQUosQ0FBYyw2REFBNkQsT0FBT08sVUFBbEYsQ0FBTixDQUFzRyxDQUFDRCxRQUFRLENBQUNFLFNBQVQsR0FBcUJ2QixNQUFNLENBQUN3QixNQUFQLENBQWNGLFVBQVUsSUFBSUEsVUFBVSxDQUFDQyxTQUF2QyxFQUFrRCxFQUFFRSxXQUFXLEVBQUUsRUFBRXRCLEtBQUssRUFBRWtCLFFBQVQsRUFBbUJLLFVBQVUsRUFBRSxLQUEvQixFQUFzQ0MsUUFBUSxFQUFFLElBQWhELEVBQXNEQyxZQUFZLEVBQUUsSUFBcEUsRUFBZixFQUFsRCxDQUFyQixDQUFxSyxJQUFJTixVQUFKLEVBQWdCdEIsTUFBTSxDQUFDNkIsY0FBUCxHQUF3QjdCLE1BQU0sQ0FBQzZCLGNBQVAsQ0FBc0JSLFFBQXRCLEVBQWdDQyxVQUFoQyxDQUF4QixHQUFzRUQsUUFBUSxDQUFDUyxTQUFULEdBQXFCUixVQUEzRixDQUF3Rzs7QUFFOWUsSUFBSVMsS0FBSyxHQUFHLFVBQVVDLElBQVYsRUFBZ0I7QUFDM0JaLFdBQVMsQ0FBQ1csS0FBRCxFQUFRQyxJQUFSLENBQVQ7O0FBRUEsV0FBU0QsS0FBVCxDQUFlRSxJQUFmLEVBQXFCQyxPQUFyQixFQUE4QjtBQUM3QnRCLG1CQUFlLENBQUMsSUFBRCxFQUFPbUIsS0FBUCxDQUFmOztBQUVBLFdBQU9mLDBCQUEwQixDQUFDLElBQUQsRUFBTyxDQUFDZSxLQUFLLENBQUNELFNBQU4sSUFBbUI5QixNQUFNLENBQUNtQyxjQUFQLENBQXNCSixLQUF0QixDQUFwQixFQUFrRGIsSUFBbEQsQ0FBdUQsSUFBdkQsRUFBNkRlLElBQUksR0FBRyxDQUFDLEdBQUd6QixVQUFVLENBQUM0QixLQUFmLEVBQXNCSCxJQUF0QixDQUFwRSxFQUFpR0MsT0FBakcsQ0FBUCxDQUFqQztBQUNBOztBQUVELFNBQU9ILEtBQVA7QUFDQSxDQVZXLENBVVZ6QixLQUFLLENBQUNLLE9BVkksQ0FBWjs7QUFZQVQsT0FBTyxDQUFDUyxPQUFSLEdBQWtCb0IsS0FBbEIiLCJmaWxlIjoiNDg4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX01TSTIgPSByZXF1aXJlKCcuL01TSS5qcycpO1xuXG52YXIgX01TSTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NU0kyKTtcblxudmFyIF9jaGVja3N1bXMgPSByZXF1aXJlKCcuL2NoZWNrc3Vtcy5qcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBNU0kxMSA9IGZ1bmN0aW9uIChfTVNJKSB7XG5cdF9pbmhlcml0cyhNU0kxMSwgX01TSSk7XG5cblx0ZnVuY3Rpb24gTVNJMTEoZGF0YSwgb3B0aW9ucykge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNU0kxMSk7XG5cblx0XHRyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE1TSTExLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTVNJMTEpKS5jYWxsKHRoaXMsIGRhdGEgKyAoMCwgX2NoZWNrc3Vtcy5tb2QxMSkoZGF0YSksIG9wdGlvbnMpKTtcblx0fVxuXG5cdHJldHVybiBNU0kxMTtcbn0oX01TSTMuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE1TSTExOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///488\n");

/***/ }),

/***/ 489:
/*!*******************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/MSI/MSI1010.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _MSI2 = __webpack_require__(/*! ./MSI.js */ 485);\n\nvar _MSI3 = _interopRequireDefault(_MSI2);\n\nvar _checksums = __webpack_require__(/*! ./checksums.js */ 487);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar MSI1010 = function (_MSI) {\n  _inherits(MSI1010, _MSI);\n\n  function MSI1010(data, options) {\n    _classCallCheck(this, MSI1010);\n\n    data += (0, _checksums.mod10)(data);\n    data += (0, _checksums.mod10)(data);\n    return _possibleConstructorReturn(this, (MSI1010.__proto__ || Object.getPrototypeOf(MSI1010)).call(this, data, options));\n  }\n\n  return MSI1010;\n}(_MSI3.default);\n\nexports.default = MSI1010;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9NU0kvTVNJMTAxMC5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9NU0kyIiwicmVxdWlyZSIsIl9NU0kzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jaGVja3N1bXMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiTVNJMTAxMCIsIl9NU0kiLCJkYXRhIiwib3B0aW9ucyIsIm1vZDEwIiwiZ2V0UHJvdG90eXBlT2YiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzVDQyxPQUFLLEVBQUUsSUFEcUMsRUFBN0M7OztBQUlBLElBQUlDLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyxtQkFBRCxDQUFuQjs7QUFFQSxJQUFJQyxLQUFLLEdBQUdDLHNCQUFzQixDQUFDSCxLQUFELENBQWxDOztBQUVBLElBQUlJLFVBQVUsR0FBR0gsbUJBQU8sQ0FBQyx5QkFBRCxDQUF4Qjs7QUFFQSxTQUFTRSxzQkFBVCxDQUFnQ0UsR0FBaEMsRUFBcUMsQ0FBRSxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEIsRUFBRUUsT0FBTyxFQUFFRixHQUFYLEVBQXJDLENBQXdEOztBQUUvRixTQUFTRyxlQUFULENBQXlCQyxRQUF6QixFQUFtQ0MsV0FBbkMsRUFBZ0QsQ0FBRSxJQUFJLEVBQUVELFFBQVEsWUFBWUMsV0FBdEIsQ0FBSixFQUF3QyxDQUFFLE1BQU0sSUFBSUMsU0FBSixDQUFjLG1DQUFkLENBQU4sQ0FBMkQsQ0FBRTs7QUFFekosU0FBU0MsMEJBQVQsQ0FBb0NDLElBQXBDLEVBQTBDQyxJQUExQyxFQUFnRCxDQUFFLElBQUksQ0FBQ0QsSUFBTCxFQUFXLENBQUUsTUFBTSxJQUFJRSxjQUFKLENBQW1CLDJEQUFuQixDQUFOLENBQXdGLENBQUMsT0FBT0QsSUFBSSxLQUFLLE9BQU9BLElBQVAsS0FBZ0IsUUFBaEIsSUFBNEIsT0FBT0EsSUFBUCxLQUFnQixVQUFqRCxDQUFKLEdBQW1FQSxJQUFuRSxHQUEwRUQsSUFBakYsQ0FBd0Y7O0FBRWhQLFNBQVNHLFNBQVQsQ0FBbUJDLFFBQW5CLEVBQTZCQyxVQUE3QixFQUF5QyxDQUFFLElBQUksT0FBT0EsVUFBUCxLQUFzQixVQUF0QixJQUFvQ0EsVUFBVSxLQUFLLElBQXZELEVBQTZELENBQUUsTUFBTSxJQUFJUCxTQUFKLENBQWMsNkRBQTZELE9BQU9PLFVBQWxGLENBQU4sQ0FBc0csQ0FBQ0QsUUFBUSxDQUFDRSxTQUFULEdBQXFCdkIsTUFBTSxDQUFDd0IsTUFBUCxDQUFjRixVQUFVLElBQUlBLFVBQVUsQ0FBQ0MsU0FBdkMsRUFBa0QsRUFBRUUsV0FBVyxFQUFFLEVBQUV0QixLQUFLLEVBQUVrQixRQUFULEVBQW1CSyxVQUFVLEVBQUUsS0FBL0IsRUFBc0NDLFFBQVEsRUFBRSxJQUFoRCxFQUFzREMsWUFBWSxFQUFFLElBQXBFLEVBQWYsRUFBbEQsQ0FBckIsQ0FBcUssSUFBSU4sVUFBSixFQUFnQnRCLE1BQU0sQ0FBQzZCLGNBQVAsR0FBd0I3QixNQUFNLENBQUM2QixjQUFQLENBQXNCUixRQUF0QixFQUFnQ0MsVUFBaEMsQ0FBeEIsR0FBc0VELFFBQVEsQ0FBQ1MsU0FBVCxHQUFxQlIsVUFBM0YsQ0FBd0c7O0FBRTllLElBQUlTLE9BQU8sR0FBRyxVQUFVQyxJQUFWLEVBQWdCO0FBQzdCWixXQUFTLENBQUNXLE9BQUQsRUFBVUMsSUFBVixDQUFUOztBQUVBLFdBQVNELE9BQVQsQ0FBaUJFLElBQWpCLEVBQXVCQyxPQUF2QixFQUFnQztBQUMvQnRCLG1CQUFlLENBQUMsSUFBRCxFQUFPbUIsT0FBUCxDQUFmOztBQUVBRSxRQUFJLElBQUksQ0FBQyxHQUFHekIsVUFBVSxDQUFDMkIsS0FBZixFQUFzQkYsSUFBdEIsQ0FBUjtBQUNBQSxRQUFJLElBQUksQ0FBQyxHQUFHekIsVUFBVSxDQUFDMkIsS0FBZixFQUFzQkYsSUFBdEIsQ0FBUjtBQUNBLFdBQU9qQiwwQkFBMEIsQ0FBQyxJQUFELEVBQU8sQ0FBQ2UsT0FBTyxDQUFDRCxTQUFSLElBQXFCOUIsTUFBTSxDQUFDb0MsY0FBUCxDQUFzQkwsT0FBdEIsQ0FBdEIsRUFBc0RiLElBQXRELENBQTJELElBQTNELEVBQWlFZSxJQUFqRSxFQUF1RUMsT0FBdkUsQ0FBUCxDQUFqQztBQUNBOztBQUVELFNBQU9ILE9BQVA7QUFDQSxDQVphLENBWVp6QixLQUFLLENBQUNLLE9BWk0sQ0FBZDs7QUFjQVQsT0FBTyxDQUFDUyxPQUFSLEdBQWtCb0IsT0FBbEIiLCJmaWxlIjoiNDg5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX01TSTIgPSByZXF1aXJlKCcuL01TSS5qcycpO1xuXG52YXIgX01TSTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NU0kyKTtcblxudmFyIF9jaGVja3N1bXMgPSByZXF1aXJlKCcuL2NoZWNrc3Vtcy5qcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBNU0kxMDEwID0gZnVuY3Rpb24gKF9NU0kpIHtcblx0X2luaGVyaXRzKE1TSTEwMTAsIF9NU0kpO1xuXG5cdGZ1bmN0aW9uIE1TSTEwMTAoZGF0YSwgb3B0aW9ucykge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNU0kxMDEwKTtcblxuXHRcdGRhdGEgKz0gKDAsIF9jaGVja3N1bXMubW9kMTApKGRhdGEpO1xuXHRcdGRhdGEgKz0gKDAsIF9jaGVja3N1bXMubW9kMTApKGRhdGEpO1xuXHRcdHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTVNJMTAxMC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE1TSTEwMTApKS5jYWxsKHRoaXMsIGRhdGEsIG9wdGlvbnMpKTtcblx0fVxuXG5cdHJldHVybiBNU0kxMDEwO1xufShfTVNJMy5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTVNJMTAxMDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///489\n");

/***/ }),

/***/ 49:
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(/*! ./runtime */ 50);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLG1CQUFXOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsImZpbGUiOiI0OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLy8gVGhpcyBtZXRob2Qgb2Ygb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0IG5lZWRzIHRvIGJlXG4vLyBrZXB0IGlkZW50aWNhbCB0byB0aGUgd2F5IGl0IGlzIG9idGFpbmVkIGluIHJ1bnRpbWUuanNcbnZhciBnID0gKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcyB8fCAodHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgJiYgc2VsZik7XG59KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcblxuLy8gVXNlIGBnZXRPd25Qcm9wZXJ0eU5hbWVzYCBiZWNhdXNlIG5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCBjYWxsaW5nXG4vLyBgaGFzT3duUHJvcGVydHlgIG9uIHRoZSBnbG9iYWwgYHNlbGZgIG9iamVjdCBpbiBhIHdvcmtlci4gU2VlICMxODMuXG52YXIgaGFkUnVudGltZSA9IGcucmVnZW5lcmF0b3JSdW50aW1lICYmXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGcpLmluZGV4T2YoXCJyZWdlbmVyYXRvclJ1bnRpbWVcIikgPj0gMDtcblxuLy8gU2F2ZSB0aGUgb2xkIHJlZ2VuZXJhdG9yUnVudGltZSBpbiBjYXNlIGl0IG5lZWRzIHRvIGJlIHJlc3RvcmVkIGxhdGVyLlxudmFyIG9sZFJ1bnRpbWUgPSBoYWRSdW50aW1lICYmIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuXG4vLyBGb3JjZSByZWV2YWx1dGF0aW9uIG9mIHJ1bnRpbWUuanMuXG5nLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9ydW50aW1lXCIpO1xuXG5pZiAoaGFkUnVudGltZSkge1xuICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBydW50aW1lLlxuICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IG9sZFJ1bnRpbWU7XG59IGVsc2Uge1xuICAvLyBSZW1vdmUgdGhlIGdsb2JhbCBwcm9wZXJ0eSBhZGRlZCBieSBydW50aW1lLmpzLlxuICB0cnkge1xuICAgIGRlbGV0ZSBnLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgfSBjYXRjaChlKSB7XG4gICAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49\n");

/***/ }),

/***/ 490:
/*!*******************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/MSI/MSI1110.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _MSI2 = __webpack_require__(/*! ./MSI.js */ 485);\n\nvar _MSI3 = _interopRequireDefault(_MSI2);\n\nvar _checksums = __webpack_require__(/*! ./checksums.js */ 487);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar MSI1110 = function (_MSI) {\n  _inherits(MSI1110, _MSI);\n\n  function MSI1110(data, options) {\n    _classCallCheck(this, MSI1110);\n\n    data += (0, _checksums.mod11)(data);\n    data += (0, _checksums.mod10)(data);\n    return _possibleConstructorReturn(this, (MSI1110.__proto__ || Object.getPrototypeOf(MSI1110)).call(this, data, options));\n  }\n\n  return MSI1110;\n}(_MSI3.default);\n\nexports.default = MSI1110;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9NU0kvTVNJMTExMC5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9NU0kyIiwicmVxdWlyZSIsIl9NU0kzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jaGVja3N1bXMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiTVNJMTExMCIsIl9NU0kiLCJkYXRhIiwib3B0aW9ucyIsIm1vZDExIiwibW9kMTAiLCJnZXRQcm90b3R5cGVPZiJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDNUNDLE9BQUssRUFBRSxJQURxQyxFQUE3Qzs7O0FBSUEsSUFBSUMsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLG1CQUFELENBQW5COztBQUVBLElBQUlDLEtBQUssR0FBR0Msc0JBQXNCLENBQUNILEtBQUQsQ0FBbEM7O0FBRUEsSUFBSUksVUFBVSxHQUFHSCxtQkFBTyxDQUFDLHlCQUFELENBQXhCOztBQUVBLFNBQVNFLHNCQUFULENBQWdDRSxHQUFoQyxFQUFxQyxDQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxPQUFPLEVBQUVGLEdBQVgsRUFBckMsQ0FBd0Q7O0FBRS9GLFNBQVNHLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DQyxXQUFuQyxFQUFnRCxDQUFFLElBQUksRUFBRUQsUUFBUSxZQUFZQyxXQUF0QixDQUFKLEVBQXdDLENBQUUsTUFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTixDQUEyRCxDQUFFOztBQUV6SixTQUFTQywwQkFBVCxDQUFvQ0MsSUFBcEMsRUFBMENDLElBQTFDLEVBQWdELENBQUUsSUFBSSxDQUFDRCxJQUFMLEVBQVcsQ0FBRSxNQUFNLElBQUlFLGNBQUosQ0FBbUIsMkRBQW5CLENBQU4sQ0FBd0YsQ0FBQyxPQUFPRCxJQUFJLEtBQUssT0FBT0EsSUFBUCxLQUFnQixRQUFoQixJQUE0QixPQUFPQSxJQUFQLEtBQWdCLFVBQWpELENBQUosR0FBbUVBLElBQW5FLEdBQTBFRCxJQUFqRixDQUF3Rjs7QUFFaFAsU0FBU0csU0FBVCxDQUFtQkMsUUFBbkIsRUFBNkJDLFVBQTdCLEVBQXlDLENBQUUsSUFBSSxPQUFPQSxVQUFQLEtBQXNCLFVBQXRCLElBQW9DQSxVQUFVLEtBQUssSUFBdkQsRUFBNkQsQ0FBRSxNQUFNLElBQUlQLFNBQUosQ0FBYyw2REFBNkQsT0FBT08sVUFBbEYsQ0FBTixDQUFzRyxDQUFDRCxRQUFRLENBQUNFLFNBQVQsR0FBcUJ2QixNQUFNLENBQUN3QixNQUFQLENBQWNGLFVBQVUsSUFBSUEsVUFBVSxDQUFDQyxTQUF2QyxFQUFrRCxFQUFFRSxXQUFXLEVBQUUsRUFBRXRCLEtBQUssRUFBRWtCLFFBQVQsRUFBbUJLLFVBQVUsRUFBRSxLQUEvQixFQUFzQ0MsUUFBUSxFQUFFLElBQWhELEVBQXNEQyxZQUFZLEVBQUUsSUFBcEUsRUFBZixFQUFsRCxDQUFyQixDQUFxSyxJQUFJTixVQUFKLEVBQWdCdEIsTUFBTSxDQUFDNkIsY0FBUCxHQUF3QjdCLE1BQU0sQ0FBQzZCLGNBQVAsQ0FBc0JSLFFBQXRCLEVBQWdDQyxVQUFoQyxDQUF4QixHQUFzRUQsUUFBUSxDQUFDUyxTQUFULEdBQXFCUixVQUEzRixDQUF3Rzs7QUFFOWUsSUFBSVMsT0FBTyxHQUFHLFVBQVVDLElBQVYsRUFBZ0I7QUFDN0JaLFdBQVMsQ0FBQ1csT0FBRCxFQUFVQyxJQUFWLENBQVQ7O0FBRUEsV0FBU0QsT0FBVCxDQUFpQkUsSUFBakIsRUFBdUJDLE9BQXZCLEVBQWdDO0FBQy9CdEIsbUJBQWUsQ0FBQyxJQUFELEVBQU9tQixPQUFQLENBQWY7O0FBRUFFLFFBQUksSUFBSSxDQUFDLEdBQUd6QixVQUFVLENBQUMyQixLQUFmLEVBQXNCRixJQUF0QixDQUFSO0FBQ0FBLFFBQUksSUFBSSxDQUFDLEdBQUd6QixVQUFVLENBQUM0QixLQUFmLEVBQXNCSCxJQUF0QixDQUFSO0FBQ0EsV0FBT2pCLDBCQUEwQixDQUFDLElBQUQsRUFBTyxDQUFDZSxPQUFPLENBQUNELFNBQVIsSUFBcUI5QixNQUFNLENBQUNxQyxjQUFQLENBQXNCTixPQUF0QixDQUF0QixFQUFzRGIsSUFBdEQsQ0FBMkQsSUFBM0QsRUFBaUVlLElBQWpFLEVBQXVFQyxPQUF2RSxDQUFQLENBQWpDO0FBQ0E7O0FBRUQsU0FBT0gsT0FBUDtBQUNBLENBWmEsQ0FZWnpCLEtBQUssQ0FBQ0ssT0FaTSxDQUFkOztBQWNBVCxPQUFPLENBQUNTLE9BQVIsR0FBa0JvQixPQUFsQiIsImZpbGUiOiI0OTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfTVNJMiA9IHJlcXVpcmUoJy4vTVNJLmpzJyk7XG5cbnZhciBfTVNJMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01TSTIpO1xuXG52YXIgX2NoZWNrc3VtcyA9IHJlcXVpcmUoJy4vY2hlY2tzdW1zLmpzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIE1TSTExMTAgPSBmdW5jdGlvbiAoX01TSSkge1xuXHRfaW5oZXJpdHMoTVNJMTExMCwgX01TSSk7XG5cblx0ZnVuY3Rpb24gTVNJMTExMChkYXRhLCBvcHRpb25zKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1TSTExMTApO1xuXG5cdFx0ZGF0YSArPSAoMCwgX2NoZWNrc3Vtcy5tb2QxMSkoZGF0YSk7XG5cdFx0ZGF0YSArPSAoMCwgX2NoZWNrc3Vtcy5tb2QxMCkoZGF0YSk7XG5cdFx0cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNU0kxMTEwLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTVNJMTExMCkpLmNhbGwodGhpcywgZGF0YSwgb3B0aW9ucykpO1xuXHR9XG5cblx0cmV0dXJuIE1TSTExMTA7XG59KF9NU0kzLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBNU0kxMTEwOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///490\n");

/***/ }),

/***/ 491:
/*!************************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/pharmacode/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.pharmacode = undefined;\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 461);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation\n// http://www.gomaro.ch/ftproot/Laetus_PHARMA-CODE.pdf\n\nvar pharmacode = function (_Barcode) {\n  _inherits(pharmacode, _Barcode);\n\n  function pharmacode(data, options) {\n    _classCallCheck(this, pharmacode);\n\n    var _this = _possibleConstructorReturn(this, (pharmacode.__proto__ || Object.getPrototypeOf(pharmacode)).call(this, data, options));\n\n    _this.number = parseInt(data, 10);\n    return _this;\n  }\n\n  _createClass(pharmacode, [{\n    key: \"encode\",\n    value: function encode() {\n      var z = this.number;\n      var result = \"\";\n\n      // http://i.imgur.com/RMm4UDJ.png\n      // (source: http://www.gomaro.ch/ftproot/Laetus_PHARMA-CODE.pdf, page: 34)\n      while (!isNaN(z) && z != 0) {\n        if (z % 2 === 0) {\n          // Even\n          result = \"11100\" + result;\n          z = (z - 2) / 2;\n        } else {\n          // Odd\n          result = \"100\" + result;\n          z = (z - 1) / 2;\n        }\n      }\n\n      // Remove the two last zeroes\n      result = result.slice(0, -2);\n\n      return {\n        data: result,\n        text: this.text };\n\n    } },\n  {\n    key: \"valid\",\n    value: function valid() {\n      return this.number >= 3 && this.number <= 131070;\n    } }]);\n\n\n  return pharmacode;\n}(_Barcode3.default);\n\nexports.pharmacode = pharmacode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///491\n");

/***/ }),

/***/ 492:
/*!*********************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/codabar/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.codabar = undefined;\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 461);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding specification:\n// http://www.barcodeisland.com/codabar.phtml\n\nvar codabar = function (_Barcode) {\n  _inherits(codabar, _Barcode);\n\n  function codabar(data, options) {\n    _classCallCheck(this, codabar);\n\n    if (data.search(/^[0-9\\-\\$\\:\\.\\+\\/]+$/) === 0) {\n      data = \"A\" + data + \"A\";\n    }\n\n    var _this = _possibleConstructorReturn(this, (codabar.__proto__ || Object.getPrototypeOf(codabar)).call(this, data.toUpperCase(), options));\n\n    _this.text = _this.options.text || _this.text.replace(/[A-D]/g, '');\n    return _this;\n  }\n\n  _createClass(codabar, [{\n    key: \"valid\",\n    value: function valid() {\n      return this.data.search(/^[A-D][0-9\\-\\$\\:\\.\\+\\/]+[A-D]$/) !== -1;\n    } },\n  {\n    key: \"encode\",\n    value: function encode() {\n      var result = [];\n      var encodings = this.getEncodings();\n      for (var i = 0; i < this.data.length; i++) {\n        result.push(encodings[this.data.charAt(i)]);\n        // for all characters except the last, append a narrow-space (\"0\")\n        if (i !== this.data.length - 1) {\n          result.push(\"0\");\n        }\n      }\n      return {\n        text: this.text,\n        data: result.join('') };\n\n    } },\n  {\n    key: \"getEncodings\",\n    value: function getEncodings() {\n      return {\n        \"0\": \"101010011\",\n        \"1\": \"101011001\",\n        \"2\": \"101001011\",\n        \"3\": \"110010101\",\n        \"4\": \"101101001\",\n        \"5\": \"110101001\",\n        \"6\": \"100101011\",\n        \"7\": \"100101101\",\n        \"8\": \"100110101\",\n        \"9\": \"110100101\",\n        \"-\": \"101001101\",\n        \"$\": \"101100101\",\n        \":\": \"1101011011\",\n        \"/\": \"1101101011\",\n        \".\": \"1101101101\",\n        \"+\": \"101100110011\",\n        \"A\": \"1011001001\",\n        \"B\": \"1001001011\",\n        \"C\": \"1010010011\",\n        \"D\": \"1010011001\" };\n\n    } }]);\n\n\n  return codabar;\n}(_Barcode3.default);\n\nexports.codabar = codabar;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///492\n");

/***/ }),

/***/ 493:
/*!****************************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/tki-barcode/barcodes/GenericBarcode/index.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.GenericBarcode = undefined;\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 461);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar GenericBarcode = function (_Barcode) {\n  _inherits(GenericBarcode, _Barcode);\n\n  function GenericBarcode(data, options) {\n    _classCallCheck(this, GenericBarcode);\n\n    return _possibleConstructorReturn(this, (GenericBarcode.__proto__ || Object.getPrototypeOf(GenericBarcode)).call(this, data, options)); // Sets this.data and this.text\n  }\n\n  // Return the corresponding binary numbers for the data provided\n\n\n  _createClass(GenericBarcode, [{\n    key: \"encode\",\n    value: function encode() {\n      return {\n        data: \"10101010101010101010101010101010101010101\",\n        text: this.text };\n\n    }\n\n    // Resturn true/false if the string provided is valid for this encoder\n  },\n  {\n    key: \"valid\",\n    value: function valid() {\n      return true;\n    } }]);\n\n\n  return GenericBarcode;\n}(_Barcode3.default);\n\nexports.GenericBarcode = GenericBarcode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///493\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    // 兼容微信小程序低版本基础库\n    if (uni.canIUse('getAccountInfoSync')) {\n      packName = uni.getAccountInfoSync().miniProgram.appId || '';\n    }\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\r\n       * h5 请求\r\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function' && \"development\" !== 'development') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 50:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///50\n");

/***/ }),

/***/ 508:
/*!***************************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/components/mpvueGestureLock/gestureLock.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var GestureLock = /*#__PURE__*/function () {\n\n  function GestureLock(containerWidth, cycleRadius) {_classCallCheck(this, GestureLock);\n    this.containerWidth = containerWidth; // 容器宽度\n    this.cycleRadius = cycleRadius; // 圆的半径\n\n    this.circleArray = []; // 全部圆的对象数组\n    this.checkPoints = []; // 选中的圆的对象数组\n    this.lineArray = []; // 已激活锁之间的线段数组\n    this.lastCheckPoint = 0; // 最后一个激活的锁\n    this.offsetX = 0; // 容器的 X 偏移\n    this.offsetY = 0; // 容器的 Y 偏移\n    this.activeLine = {}; // 最后一个激活的锁与当前位置之间的线段\n\n    this.windowWidth = wx.getSystemInfoSync().windowWidth; // 窗口大小(用于rpx 和 px 转换)\n\n    this.initCircleArray();\n  }\n\n  // 初始化 画布上的 9个圆\n  _createClass(GestureLock, [{ key: \"initCircleArray\", value: function initCircleArray() {\n      var cycleMargin = (this.containerWidth - 6 * this.cycleRadius) / 6;\n      var count = 0;\n      for (var i = 0; i < 3; i++) {\n        for (var j = 0; j < 3; j++) {\n          count++;\n          this.circleArray.push({\n            count: count,\n            x: this.rpxTopx((cycleMargin + this.cycleRadius) * (j * 2 + 1)),\n            y: this.rpxTopx((cycleMargin + this.cycleRadius) * (i * 2 + 1)),\n            radius: this.rpxTopx(this.cycleRadius),\n            check: false,\n            style: {\n              left: (cycleMargin + this.cycleRadius) * (j * 2 + 1) - this.cycleRadius + 'rpx',\n              top: (cycleMargin + this.cycleRadius) * (i * 2 + 1) - this.cycleRadius + 'rpx',\n              width: this.cycleRadius * 2 + 'rpx' } });\n\n\n        }\n      }\n    } }, { key: \"onTouchStart\", value: function onTouchStart(\n\n    e) {\n      this.setOffset(e);\n      this.checkTouch({\n        x: e.touches[0].pageX - this.offsetX,\n        y: e.touches[0].pageY - this.offsetY });\n\n    } }, { key: \"onTouchMove\", value: function onTouchMove(\n\n    e) {\n      this.moveDraw(e);\n    } }, { key: \"onTouchEnd\", value: function onTouchEnd(\n\n    e) {\n      var checkPoints = this.checkPoints;\n      this.reset();\n      return checkPoints;\n    }\n\n    // 初始化 偏移量\n  }, { key: \"setOffset\", value: function setOffset(e) {\n      this.offsetX = e.currentTarget.offsetLeft;\n      this.offsetY = e.currentTarget.offsetTop;\n    }\n\n    // 检测当时 触摸位置是否位于 锁上\n  }, { key: \"checkTouch\", value: function checkTouch(_ref)\n\n\n    {var x = _ref.x,y = _ref.y;\n      for (var i = 0; i < this.circleArray.length; i++) {\n        var point = this.circleArray[i];\n        if (this.isPointInCycle(x, y, point.x, point.y, point.radius)) {\n          if (!point.check) {\n            this.checkPoints.push(point.count);\n            if (this.lastCheckPoint != 0) {\n              // 已激活锁之间的线段\n              var line = this.drawLine(this.lastCheckPoint, point);\n              this.lineArray.push(line);\n            }\n            this.lastCheckPoint = point;\n          }\n          point.check = true;\n          return;\n        }\n      }\n    }\n\n    // 画线 - 返回 样式 对象\n  }, { key: \"drawLine\", value: function drawLine(start, end) {\n      var width = this.getPointDis(start.x, start.y, end.x, end.y);\n      var rotate = this.getAngle(start, end);\n\n      return {\n        activeLeft: start.x + 'px',\n        activeTop: start.y + 'px',\n        activeWidth: width + 'px',\n        activeRotate: rotate + 'deg' };\n\n\n    }\n\n    // 获取 画线的 角度\n  }, { key: \"getAngle\", value: function getAngle(start, end) {\n      var diff_x = end.x - start.x,\n      diff_y = end.y - start.y;\n      if (diff_x >= 0) {\n        return 360 * Math.atan(diff_y / diff_x) / (2 * Math.PI);\n      } else {\n        return 180 + 360 * Math.atan(diff_y / diff_x) / (2 * Math.PI);\n      }\n    }\n\n    // 判断 当前点是否位于 锁内\n  }, { key: \"isPointInCycle\", value: function isPointInCycle(x, y, circleX, circleY, radius) {\n      return this.getPointDis(x, y, circleX, circleY) < radius ? true : false;\n    }\n\n    // 获取两点之间距离\n  }, { key: \"getPointDis\", value: function getPointDis(ax, ay, bx, by) {\n      return Math.sqrt(Math.pow(ax - bx, 2) + Math.pow(ay - by, 2));\n    }\n\n    // 移动 绘制\n  }, { key: \"moveDraw\", value: function moveDraw(e) {\n      // 画经过的圆\n      var x = e.touches[0].pageX - this.offsetX;\n      var y = e.touches[0].pageY - this.offsetY;\n      this.checkTouch({\n        x: x,\n        y: y });\n\n\n      // 画 最后一个激活的锁与当前位置之间的线段\n      this.activeLine = this.drawLine(this.lastCheckPoint, {\n        x: x,\n        y: y });\n\n    }\n\n    // 使 画布 恢复初始状态\n  }, { key: \"reset\", value: function reset() {\n      this.circleArray.forEach(function (item) {\n        item.check = false;\n      });\n      this.checkPoints = [];\n      this.lineArray = [];\n      this.activeLine = {};\n      this.lastCheckPoint = 0;\n    }\n\n\n    // 获取 最后一个激活的锁与当前位置之间的线段\n  }, { key: \"getActiveLine\", value: function getActiveLine() {\n      return this.activeLine;\n    }\n\n    // 获取 圆对象数组\n  }, { key: \"getCycleArray\", value: function getCycleArray() {\n      return this.circleArray;\n    }\n\n    // 获取 已激活锁之间的线段\n  }, { key: \"getLineArray\", value: function getLineArray() {\n      return this.lineArray;\n    }\n\n    // 将 RPX 转换成 PX\n  }, { key: \"rpxTopx\", value: function rpxTopx(rpx) {\n      return rpx / 750 * this.windowWidth;\n    } }]);return GestureLock;}();var _default =\n\n\nGestureLock;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///508\n");

/***/ }),

/***/ 51:
/*!*****************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/common/permission.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) { /// null = 未请求，1 = 已允许，0 = 拒绝|受限, 2 = 系统未开启\n\nvar isIOS;\n\nfunction album() {\n  var result = 0;\n  var PHPhotoLibrary = plus.ios.import(\"PHPhotoLibrary\");\n  var authStatus = PHPhotoLibrary.authorizationStatus();\n  if (authStatus === 0) {\n    result = null;\n  } else if (authStatus == 3) {\n    result = 1;\n  } else {\n    result = 0;\n  }\n  plus.ios.deleteObject(PHPhotoLibrary);\n  return result;\n}\n\nfunction camera() {\n  var result = 0;\n  var AVCaptureDevice = plus.ios.import(\"AVCaptureDevice\");\n  var authStatus = AVCaptureDevice.authorizationStatusForMediaType('vide');\n  if (authStatus === 0) {\n    result = null;\n  } else if (authStatus == 3) {\n    result = 1;\n  } else {\n    result = 0;\n  }\n  plus.ios.deleteObject(AVCaptureDevice);\n  return result;\n}\n\nfunction location() {\n  var result = 0;\n  var cllocationManger = plus.ios.import(\"CLLocationManager\");\n  var enable = cllocationManger.locationServicesEnabled();\n  var status = cllocationManger.authorizationStatus();\n  if (!enable) {\n    result = 2;\n  } else if (status === 0) {\n    result = null;\n  } else if (status === 3 || status === 4) {\n    result = 1;\n  } else {\n    result = 0;\n  }\n  plus.ios.deleteObject(cllocationManger);\n  return result;\n}\n\nfunction push() {\n  var result = 0;\n  var UIApplication = plus.ios.import(\"UIApplication\");\n  var app = UIApplication.sharedApplication();\n  var enabledTypes = 0;\n  if (app.currentUserNotificationSettings) {\n    var settings = app.currentUserNotificationSettings();\n    enabledTypes = settings.plusGetAttribute(\"types\");\n    if (enabledTypes == 0) {\n      result = 0;\n      console.log(__f__(\"推送权限没有开启\", \" at common\\\\permission.js:63\"));\n    } else {\n      result = 1;\n      console.log(__f__(\"已经开启推送功能!\", \" at common\\\\permission.js:66\"));\n    }\n    plus.ios.deleteObject(settings);\n  } else {\n    enabledTypes = app.enabledRemoteNotificationTypes();\n    if (enabledTypes == 0) {\n      result = 3;\n      console.log(__f__(\"推送权限没有开启!\", \" at common\\\\permission.js:73\"));\n    } else {\n      result = 4;\n      console.log(__f__(\"已经开启推送功能!\", \" at common\\\\permission.js:76\"));\n    }\n  }\n  plus.ios.deleteObject(app);\n  plus.ios.deleteObject(UIApplication);\n  return result;\n}\n\nfunction contact() {\n  var result = 0;\n  var CNContactStore = plus.ios.import(\"CNContactStore\");\n  var cnAuthStatus = CNContactStore.authorizationStatusForEntityType(0);\n  if (authStatus === 0) {\n    result = null;\n  } else if (authStatus == 3) {\n    result = 1;\n  } else {\n    result = 0;\n  }\n  plus.ios.deleteObject(CNContactStore);\n  return result;\n}\n\nfunction record() {\n  var result = null;\n  var avaudiosession = plus.ios.import(\"AVAudioSession\");\n  var avaudio = avaudiosession.sharedInstance();\n  var status = avaudio.recordPermission();\n  console.log(__f__(\"permissionStatus:\" + status, \" at common\\\\permission.js:104\"));\n  if (status === 1970168948) {\n    result = null;\n  } else if (status === 1735552628) {\n    result = 1;\n  } else {\n    result = 0;\n  }\n  plus.ios.deleteObject(avaudiosession);\n  return result;\n}\n\nfunction calendar() {\n  var result = null;\n  var EKEventStore = plus.ios.import(\"EKEventStore\");\n  var ekAuthStatus = EKEventStore.authorizationStatusForEntityType(0);\n  if (ekAuthStatus == 3) {\n    result = 1;\n    console.log(__f__(\"日历权限已经开启\", \" at common\\\\permission.js:122\"));\n  } else {\n    console.log(__f__(\"日历权限没有开启\", \" at common\\\\permission.js:124\"));\n  }\n  plus.ios.deleteObject(EKEventStore);\n  return result;\n}\n\nfunction memo() {\n  var result = null;\n  var EKEventStore = plus.ios.import(\"EKEventStore\");\n  var ekAuthStatus = EKEventStore.authorizationStatusForEntityType(1);\n  if (ekAuthStatus == 3) {\n    result = 1;\n    console.log(__f__(\"备忘录权限已经开启\", \" at common\\\\permission.js:136\"));\n  } else {\n    console.log(__f__(\"备忘录权限没有开启\", \" at common\\\\permission.js:138\"));\n  }\n  plus.ios.deleteObject(EKEventStore);\n  return result;\n}\n\n\nfunction requestIOS(permissionID) {\n  return new Promise(function (resolve, reject) {\n    switch (permissionID) {\n      case \"push\":\n        resolve(push());\n        break;\n      case \"location\":\n        resolve(location());\n        break;\n      case \"record\":\n        resolve(record());\n        break;\n      case \"camera\":\n        resolve(camera());\n        break;\n      case \"album\":\n        resolve(album());\n        break;\n      case \"contact\":\n        resolve(contact());\n        break;\n      case \"calendar\":\n        resolve(calendar());\n        break;\n      case \"memo\":\n        resolve(memo());\n        break;\n      default:\n        resolve(0);\n        break;}\n\n  });\n}\n\nfunction requestAndroid(permissionID) {\n  return new Promise(function (resolve, reject) {\n    plus.android.requestPermissions(\n    [permissionID],\n    function (resultObj) {\n      var result = 0;\n      for (var i = 0; i < resultObj.granted.length; i++) {\n        var grantedPermission = resultObj.granted[i];\n        console.log(__f__('已获取的权限：' + grantedPermission, \" at common\\\\permission.js:187\"));\n        result = 1;\n      }\n      for (var i = 0; i < resultObj.deniedPresent.length; i++) {\n        var deniedPresentPermission = resultObj.deniedPresent[i];\n        console.log(__f__('拒绝本次申请的权限：' + deniedPresentPermission, \" at common\\\\permission.js:192\"));\n        result = 0;\n      }\n      for (var i = 0; i < resultObj.deniedAlways.length; i++) {\n        var deniedAlwaysPermission = resultObj.deniedAlways[i];\n        console.log(__f__('永久拒绝申请的权限：' + deniedAlwaysPermission, \" at common\\\\permission.js:197\"));\n        result = -1;\n      }\n      resolve(result);\n    },\n    function (error) {\n      console.log(__f__('result error: ' + error.message, \" at common\\\\permission.js:203\"));\n      resolve({\n        code: error.code,\n        message: error.message });\n\n    });\n\n  });\n}\n\nfunction gotoAppPermissionSetting() {\n  if (permission.isIOS) {\n    var UIApplication = plus.ios.import(\"UIApplication\");\n    var application2 = UIApplication.sharedApplication();\n    var NSURL2 = plus.ios.import(\"NSURL\");\n    var setting2 = NSURL2.URLWithString(\"app-settings:\");\n    application2.openURL(setting2);\n    plus.ios.deleteObject(setting2);\n    plus.ios.deleteObject(NSURL2);\n    plus.ios.deleteObject(application2);\n  } else {\n    var Intent = plus.android.importClass(\"android.content.Intent\");\n    var Settings = plus.android.importClass(\"android.provider.Settings\");\n    var Uri = plus.android.importClass(\"android.net.Uri\");\n    var mainActivity = plus.android.runtimeMainActivity();\n    var intent = new Intent();\n    intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n    var uri = Uri.fromParts(\"package\", mainActivity.getPackageName(), null);\n    intent.setData(uri);\n    mainActivity.startActivity(intent);\n  }\n}\n\nfunction gotoiOSPermissionSetting() {\n  var UIApplication = plus.ios.import(\"UIApplication\");\n  var application2 = UIApplication.sharedApplication();\n  var NSURL2 = plus.ios.import(\"NSURL\");\n  var setting2 = NSURL2.URLWithString(\"App-prefs:root=General\");\n  application2.openURL(setting2);\n\n  plus.ios.deleteObject(setting2);\n  plus.ios.deleteObject(NSURL2);\n  plus.ios.deleteObject(application2);\n}\n\nvar permission = {\n  get isIOS() {\n    return typeof isIOS === 'boolean' ? isIOS : isIOS = uni.getSystemInfoSync().platform === 'ios';\n  },\n  requestIOS: requestIOS,\n  requestAndroid: requestAndroid,\n  gotoAppSetting: gotoAppPermissionSetting,\n  gotoiOSSetting: gotoiOSPermissionSetting };\n\n\nmodule.exports = permission;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///51\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@^2.0.0-alpha-24420191128001\",\"_id\":\"@dcloudio/uni-stat@2.0.0-v3-24020191018001\",\"_inBundle\":false,\"_integrity\":\"sha512-nYBm5pRrYzrj2dKMqucWSF2PwInUMnn3MLHM/ik3gnLUEKSW61rzcY1RPlUwaH7c+Snm6N+bAJzmj3GvlrlVXA==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"range\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@^2.0.0-alpha-24420191128001\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"^2.0.0-alpha-24420191128001\",\"saveSpec\":null,\"fetchSpec\":\"^2.0.0-alpha-24420191128001\"},\"_requiredBy\":[\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-v3-24020191018001.tgz\",\"_shasum\":\"6ef04326cc0b945726413eebe442ab8f47c7536c\",\"_spec\":\"@dcloudio/uni-stat@^2.0.0-alpha-24420191128001\",\"_where\":\"/Users/guoshengqiang/Documents/dcloud-plugins/alpha/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"197e8df53cc9d4c3f6eb722b918ccf51672b5cfe\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-v3-24020191018001\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 7:
/*!************************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/pages.json?{"type":"style"} ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/login/login_mer\": { \"navigationBarTitleText\": \"登录\" }, \"pages/login/register\": { \"navigationBarTitleText\": \"注册\" }, \"pages/login/forget\": { \"navigationBarTitleText\": \"找回密码\" }, \"pages/tabBar/home/home\": { \"navigationBarTitleText\": \"首页\" }, \"pages/tabBar/huabei/huabei\": { \"navigationBarTitleText\": \"花呗\" }, \"pages/tabBar/account/account\": { \"navigationBarTitleText\": \"我的\" }, \"pages/home/receipt/receipt\": { \"navigationBarTitleText\": \"收款\", \"usingComponents\": {} }, \"pages/home/setAmount/setAmount\": { \"navigationBarTitleText\": \"设置金额\", \"usingComponents\": {} }, \"pages/home/collectionRecord/collectionRecord\": { \"navigationBarTitleText\": \"收款纪录\" }, \"pages/home/withdraw/withdraw\": { \"navigationBarTitleText\": \"我要提现\" }, \"pages/home/billLists/billLists\": { \"navigationBarTitleText\": \"账单\", \"enablePullDownRefresh\": true }, \"pages/home/payment/payment\": { \"navigationBarTitleText\": \"付款\" }, \"pages/home/merchantService/merchantService\": { \"navigationBarTitleText\": \"商家服务\" }, \"pages/home/collectionCode/collectionCode\": { \"navigationBarTitleText\": \"商户收款码\" }, \"pages/home/returnLists/returnLists\": { \"navigationBarTitleText\": \"退货\" }, \"pages/home/returnDetail/returnDetail\": { \"navigationBarTitleText\": \"退货详情\" }, \"pages/account/biopayment/biopayment\": { \"navigationBarTitleText\": \"生物支付\" }, \"pages/account/feedback/feedback\": { \"navigationBarTitleText\": \"意见建议\" }, \"pages/account/fingerprint/fingerprint\": { \"navigationBarTitleText\": \"指纹支付\" }, \"pages/account/gesture-lock/gesture-lock\": { \"navigationBarTitleText\": \"手势密码支付\" }, \"pages/home/bankCard/bankCard\": { \"navigationBarTitleText\": \"银行卡\" }, \"pages/home/bankCardDetail/bankCardDetail\": { \"navigationBarTitleText\": \"银行卡详情\" }, \"pages/home/addBankCard-01/addBankCard-01\": { \"navigationBarTitleText\": \"添加银行卡\" }, \"pages/home/addBankCard-02/addBankCard-02\": { \"navigationBarTitleText\": \"添加银行卡\" }, \"pages/home/addBankCard-03/addBankCard-03\": { \"navigationBarTitleText\": \"添加银行卡\" }, \"pages/account/paysetting/paysetting\": { \"navigationBarTitleText\": \"支付设置\" }, \"pages/account/change-mobile1/change-mobile1\": { \"navigationBarTitleText\": \"更换手机号\" }, \"pages/account/country-code/country-code\": { \"navigationBarTitleText\": \"国家地区\" }, \"pages/account/change-mobile2/change-mobile2\": { \"navigationBarTitleText\": \"更换手机号\" }, \"pages/account/update-loginpwd/update-loginpwd\": { \"navigationBarTitleText\": \"修改登录密码\" }, \"pages/account/update-paypwd/update-paypwd\": { \"navigationBarTitleText\": \"修改支付密码\" }, \"pages/huabei/byBill/byBill\": { \"navigationBarTitleText\": \"我的账单\" }, \"pages/huabei/quota/quota\": { \"navigationBarTitleText\": \"我的额度\" }, \"pages/huabei/quota-detail/quota-detail\": { \"navigationBarTitleText\": \"通用额度\" }, \"pages/huabei/myBillDetail/myBillDetail\": { \"navigationBarTitleText\": \"账单详情\" }, \"pages/huabei/repayment/repayment\": { \"navigationBarTitleText\": \"还款\" }, \"pages/huabei/repment-result/repment-result\": { \"navigationBarTitleText\": \"还款结果\" }, \"pages/huabei/staging/staging\": { \"navigationBarTitleText\": \"账单分期\" }, \"pages/huabei/billLists/billLists\": { \"navigationBarTitleText\": \"花呗账单\" }, \"pages/huabei/payment-code/payment-code\": { \"navigationBarTitleText\": \"分期码\" }, \"pages/common/webpage\": { \"navigationBarTitleText\": \"正在加载\" }, \"pages/common/testUser\": { \"navigationBarTitleText\": \"钱包\" }, \"pages/common/testMerchant\": { \"navigationBarTitleText\": \"钱包\" }, \"pages/common/testTransfer\": { \"navigationBarTitleText\": \"钱包\" }, \"pages/home/balance/balance\": { \"navigationBarTitleText\": \"余额\" }, \"pages/home/recharge/recharge\": { \"navigationBarTitleText\": \"充值\" }, \"pages/home/payaction/paydynamic\": { \"navigationBarTitleText\": \"付款\" }, \"pages/home/payaction/paystatic\": { \"navigationBarTitleText\": \"付款\" }, \"pages/home/transferSuccess/transferSuccess\": { \"navigationBarTitleText\": \"交易成功\" }, \"pages/home/transferFailure/transferFailure\": { \"navigationBarTitleText\": \"交易失败\" }, \"pages/tabBar/mer-home/mer-home\": { \"navigationBarTitleText\": \"钱包\" }, \"pages/account/update-userinfo/update-userinfo\": { \"navigationBarTitleText\": \"用户信息\" } }, \"globalStyle\": { \"navigationBarTextStyle\": \"black\", \"navigationBarTitleText\": \"Hello uniapp\", \"navigationBarBackgroundColor\": \"#F8F8F8\", \"backgroundColor\": \"#F8F8F8\", \"backgroundColorTop\": \"#F4F5F6\", \"backgroundColorBottom\": \"#F4F5F6\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 8:
/*!***********************************************************************!*\
  !*** E:/workspace/Html5 App/WalletApp-Mer/pages.json?{"type":"stat"} ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__186412C\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX18xODY0MTJDXCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ })

}]);